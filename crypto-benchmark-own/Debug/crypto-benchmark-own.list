
crypto-benchmark-own.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800410c  0800410c  0000609c  2**0
                  CONTENTS
  4 .ARM          00000008  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004114  08004114  0000609c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004114  08004114  00005114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004118  08004118  00005118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800411c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000009c  080041b8  0000609c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080041b8  00006318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000935d  00000000  00000000  000060cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b64  00000000  00000000  0000f429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00010f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064c  00000000  00000000  000117e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216a5  00000000  00000000  00011e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b614  00000000  00000000  000334d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8bbf  00000000  00000000  0003eae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001076a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  001076e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00109c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e30 	.word	0x08003e30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08003e30 	.word	0x08003e30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b089      	sub	sp, #36	@ 0x24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	e030      	b.n	8000622 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	441a      	add	r2, r3
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	440b      	add	r3, r1
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	3301      	adds	r3, #1
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	441a      	add	r2, r3
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	3301      	adds	r3, #1
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	440b      	add	r3, r1
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	3302      	adds	r3, #2
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	441a      	add	r2, r3
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	3302      	adds	r3, #2
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	440b      	add	r3, r1
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3303      	adds	r3, #3
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	441a      	add	r2, r3
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	3303      	adds	r3, #3
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	440b      	add	r3, r1
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3301      	adds	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d9cb      	bls.n	80005c0 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000628:	2304      	movs	r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	e081      	b.n	8000732 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3b01      	subs	r3, #1
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	3301      	adds	r3, #1
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	3302      	adds	r3, #2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	3303      	adds	r3, #3
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d125      	bne.n	80006ba <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800066e:	7b3b      	ldrb	r3, [r7, #12]
 8000670:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	461a      	mov	r2, r3
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <KeyExpansion+0x198>)
 8000688:	5c9b      	ldrb	r3, [r3, r2]
 800068a:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	461a      	mov	r2, r3
 8000690:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <KeyExpansion+0x198>)
 8000692:	5c9b      	ldrb	r3, [r3, r2]
 8000694:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	461a      	mov	r2, r3
 800069a:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <KeyExpansion+0x198>)
 800069c:	5c9b      	ldrb	r3, [r3, r2]
 800069e:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <KeyExpansion+0x198>)
 80006a6:	5c9b      	ldrb	r3, [r3, r2]
 80006a8:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80006aa:	7b3a      	ldrb	r2, [r7, #12]
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	089b      	lsrs	r3, r3, #2
 80006b0:	4926      	ldr	r1, [pc, #152]	@ (800074c <KeyExpansion+0x19c>)
 80006b2:	5ccb      	ldrb	r3, [r1, r3]
 80006b4:	4053      	eors	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	3b04      	subs	r3, #4
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	4413      	add	r3, r2
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	7b3a      	ldrb	r2, [r7, #12]
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	4403      	add	r3, r0
 80006d8:	404a      	eors	r2, r1
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	3301      	adds	r3, #1
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	7819      	ldrb	r1, [r3, #0]
 80006e8:	7b7a      	ldrb	r2, [r7, #13]
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3301      	adds	r3, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	4403      	add	r3, r0
 80006f2:	404a      	eors	r2, r1
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	3302      	adds	r3, #2
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	7819      	ldrb	r1, [r3, #0]
 8000702:	7bba      	ldrb	r2, [r7, #14]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	3302      	adds	r3, #2
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	4403      	add	r3, r0
 800070c:	404a      	eors	r2, r1
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	3303      	adds	r3, #3
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	7819      	ldrb	r1, [r3, #0]
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	3303      	adds	r3, #3
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	4403      	add	r3, r0
 8000726:	404a      	eors	r2, r1
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	3301      	adds	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	2b2b      	cmp	r3, #43	@ 0x2b
 8000736:	f67f af7a 	bls.w	800062e <KeyExpansion+0x7e>
  }
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3724      	adds	r7, #36	@ 0x24
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	08003eb4 	.word	0x08003eb4
 800074c:	080040b4 	.word	0x080040b4

08000750 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff26 	bl	80005b0 <KeyExpansion>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <AES_init_ctx_iv>:
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff17 	bl	80005b0 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	33b0      	adds	r3, #176	@ 0xb0
 8000786:	2210      	movs	r2, #16
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f002 ff04 	bl	8003598 <memcpy>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8000798:	b480      	push	{r7}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80007a6:	2300      	movs	r3, #0
 80007a8:	75fb      	strb	r3, [r7, #23]
 80007aa:	e027      	b.n	80007fc <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80007ac:	2300      	movs	r3, #0
 80007ae:	75bb      	strb	r3, [r7, #22]
 80007b0:	e01e      	b.n	80007f0 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80007b2:	7dfa      	ldrb	r2, [r7, #23]
 80007b4:	7dbb      	ldrb	r3, [r7, #22]
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	0092      	lsls	r2, r2, #2
 80007ba:	440a      	add	r2, r1
 80007bc:	4413      	add	r3, r2
 80007be:	7818      	ldrb	r0, [r3, #0]
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	009a      	lsls	r2, r3, #2
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	4413      	add	r3, r2
 80007c8:	009a      	lsls	r2, r3, #2
 80007ca:	7dbb      	ldrb	r3, [r7, #22]
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	7819      	ldrb	r1, [r3, #0]
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	7dbb      	ldrb	r3, [r7, #22]
 80007da:	4041      	eors	r1, r0
 80007dc:	b2c8      	uxtb	r0, r1
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	440a      	add	r2, r1
 80007e4:	4413      	add	r3, r2
 80007e6:	4602      	mov	r2, r0
 80007e8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80007ea:	7dbb      	ldrb	r3, [r7, #22]
 80007ec:	3301      	adds	r3, #1
 80007ee:	75bb      	strb	r3, [r7, #22]
 80007f0:	7dbb      	ldrb	r3, [r7, #22]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d9dd      	bls.n	80007b2 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	3301      	adds	r3, #1
 80007fa:	75fb      	strb	r3, [r7, #23]
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d9d4      	bls.n	80007ac <AddRoundKey+0x14>
    }
  }
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	371c      	adds	r7, #28
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e01d      	b.n	800085a <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]
 8000822:	e014      	b.n	800084e <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000824:	7bba      	ldrb	r2, [r7, #14]
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	440a      	add	r2, r1
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	490d      	ldr	r1, [pc, #52]	@ (8000870 <SubBytes+0x60>)
 800083a:	5c08      	ldrb	r0, [r1, r0]
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	440a      	add	r2, r1
 8000842:	4413      	add	r3, r2
 8000844:	4602      	mov	r2, r0
 8000846:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	3301      	adds	r3, #1
 800084c:	73bb      	strb	r3, [r7, #14]
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d9e7      	bls.n	8000824 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3301      	adds	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d9de      	bls.n	800081e <SubBytes+0xe>
    }
  }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	08003eb4 	.word	0x08003eb4

08000874 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	785b      	ldrb	r3, [r3, #1]
 8000880:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	795a      	ldrb	r2, [r3, #5]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7a5a      	ldrb	r2, [r3, #9]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7b5a      	ldrb	r2, [r3, #13]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7bfa      	ldrb	r2, [r7, #15]
 800089e:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7a9a      	ldrb	r2, [r3, #10]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	799b      	ldrb	r3, [r3, #6]
 80008b8:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7b9a      	ldrb	r2, [r3, #14]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7bfa      	ldrb	r2, [r7, #15]
 80008c6:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	78db      	ldrb	r3, [r3, #3]
 80008cc:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7bda      	ldrb	r2, [r3, #15]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7ada      	ldrb	r2, [r3, #11]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	79da      	ldrb	r2, [r3, #7]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7bfa      	ldrb	r2, [r7, #15]
 80008ea:	71da      	strb	r2, [r3, #7]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <xtime>:

static uint8_t xtime(uint8_t x)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	b25a      	sxtb	r2, r3
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	09db      	lsrs	r3, r3, #7
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	0049      	lsls	r1, r1, #1
 8000912:	440b      	add	r3, r1
 8000914:	4619      	mov	r1, r3
 8000916:	00c8      	lsls	r0, r1, #3
 8000918:	4619      	mov	r1, r3
 800091a:	4603      	mov	r3, r0
 800091c:	440b      	add	r3, r1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	b25b      	sxtb	r3, r3
 8000922:	4053      	eors	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	b2db      	uxtb	r3, r3
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e0a4      	b.n	8000a8c <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800094a:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	440b      	add	r3, r1
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	4053      	eors	r3, r2
 8000960:	b2da      	uxtb	r2, r3
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	4053      	eors	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	78db      	ldrb	r3, [r3, #3]
 800097a:	4053      	eors	r3, r2
 800097c:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	4053      	eors	r3, r2
 8000992:	733b      	strb	r3, [r7, #12]
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ffae 	bl	80008f8 <xtime>
 800099c:	4603      	mov	r3, r0
 800099e:	733b      	strb	r3, [r7, #12]
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80009a8:	7b3a      	ldrb	r2, [r7, #12]
 80009aa:	7b7b      	ldrb	r3, [r7, #13]
 80009ac:	4053      	eors	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	404b      	eors	r3, r1
 80009b4:	b2d9      	uxtb	r1, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	789b      	ldrb	r3, [r3, #2]
 80009d0:	4053      	eors	r3, r2
 80009d2:	733b      	strb	r3, [r7, #12]
 80009d4:	7b3b      	ldrb	r3, [r7, #12]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff8e 	bl	80008f8 <xtime>
 80009dc:	4603      	mov	r3, r0
 80009de:	733b      	strb	r3, [r7, #12]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	7859      	ldrb	r1, [r3, #1]
 80009ea:	7b3a      	ldrb	r2, [r7, #12]
 80009ec:	7b7b      	ldrb	r3, [r7, #13]
 80009ee:	4053      	eors	r3, r2
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	404a      	eors	r2, r1
 80009f6:	b2d1      	uxtb	r1, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	460a      	mov	r2, r1
 8000a00:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	789a      	ldrb	r2, [r3, #2]
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	78db      	ldrb	r3, [r3, #3]
 8000a16:	4053      	eors	r3, r2
 8000a18:	733b      	strb	r3, [r7, #12]
 8000a1a:	7b3b      	ldrb	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff6b 	bl	80008f8 <xtime>
 8000a22:	4603      	mov	r3, r0
 8000a24:	733b      	strb	r3, [r7, #12]
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	7899      	ldrb	r1, [r3, #2]
 8000a30:	7b3a      	ldrb	r2, [r7, #12]
 8000a32:	7b7b      	ldrb	r3, [r7, #13]
 8000a34:	4053      	eors	r3, r2
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	404a      	eors	r2, r1
 8000a3c:	b2d1      	uxtb	r1, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	460a      	mov	r2, r1
 8000a46:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	78da      	ldrb	r2, [r3, #3]
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	4053      	eors	r3, r2
 8000a56:	733b      	strb	r3, [r7, #12]
 8000a58:	7b3b      	ldrb	r3, [r7, #12]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff4c 	bl	80008f8 <xtime>
 8000a60:	4603      	mov	r3, r0
 8000a62:	733b      	strb	r3, [r7, #12]
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	78d9      	ldrb	r1, [r3, #3]
 8000a6e:	7b3a      	ldrb	r2, [r7, #12]
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	4053      	eors	r3, r2
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	404a      	eors	r2, r1
 8000a7a:	b2d1      	uxtb	r1, r2
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	460a      	mov	r2, r1
 8000a84:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	f67f af57 	bls.w	8000942 <MixColumns+0xe>
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8000a9e:	b5b0      	push	{r4, r5, r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	e33b      	b.n	8001124 <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000ab4:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000ada:	7afb      	ldrb	r3, [r7, #11]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff0b 	bl	80008f8 <xtime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff07 	bl	80008f8 <xtime>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff03 	bl	80008f8 <xtime>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff feff 	bl	80008f8 <xtime>
 8000afa:	7abb      	ldrb	r3, [r7, #10]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fefb 	bl	80008f8 <xtime>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fef7 	bl	80008f8 <xtime>
 8000b0a:	7abb      	ldrb	r3, [r7, #10]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fef3 	bl	80008f8 <xtime>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff feef 	bl	80008f8 <xtime>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff feeb 	bl	80008f8 <xtime>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fee7 	bl	80008f8 <xtime>
 8000b2a:	7a7b      	ldrb	r3, [r7, #9]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fee3 	bl	80008f8 <xtime>
 8000b32:	7a7b      	ldrb	r3, [r7, #9]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fedf 	bl	80008f8 <xtime>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fedb 	bl	80008f8 <xtime>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fed7 	bl	80008f8 <xtime>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fed3 	bl	80008f8 <xtime>
 8000b52:	7a3b      	ldrb	r3, [r7, #8]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fecf 	bl	80008f8 <xtime>
 8000b5a:	7a3b      	ldrb	r3, [r7, #8]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fecb 	bl	80008f8 <xtime>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fec7 	bl	80008f8 <xtime>
 8000b6a:	7a3b      	ldrb	r3, [r7, #8]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fec3 	bl	80008f8 <xtime>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff febf 	bl	80008f8 <xtime>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff febb 	bl	80008f8 <xtime>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff feb7 	bl	80008f8 <xtime>
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff feb3 	bl	80008f8 <xtime>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461c      	mov	r4, r3
 8000b96:	7afb      	ldrb	r3, [r7, #11]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fead 	bl	80008f8 <xtime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fea9 	bl	80008f8 <xtime>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4063      	eors	r3, r4
 8000baa:	b2dc      	uxtb	r4, r3
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fea2 	bl	80008f8 <xtime>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe9e 	bl	80008f8 <xtime>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fe9a 	bl	80008f8 <xtime>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4063      	eors	r3, r4
 8000bc8:	b2dc      	uxtb	r4, r3
 8000bca:	7abb      	ldrb	r3, [r7, #10]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe93 	bl	80008f8 <xtime>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	7abb      	ldrb	r3, [r7, #10]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	b2dd      	uxtb	r5, r3
 8000bdc:	7abb      	ldrb	r3, [r7, #10]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe8a 	bl	80008f8 <xtime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe86 	bl	80008f8 <xtime>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe82 	bl	80008f8 <xtime>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	406b      	eors	r3, r5
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4063      	eors	r3, r4
 8000bfc:	b2dc      	uxtb	r4, r3
 8000bfe:	7a7b      	ldrb	r3, [r7, #9]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe79 	bl	80008f8 <xtime>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe75 	bl	80008f8 <xtime>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	7a7b      	ldrb	r3, [r7, #9]
 8000c14:	4053      	eors	r3, r2
 8000c16:	b2dd      	uxtb	r5, r3
 8000c18:	7a7b      	ldrb	r3, [r7, #9]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fe6c 	bl	80008f8 <xtime>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe68 	bl	80008f8 <xtime>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe64 	bl	80008f8 <xtime>
 8000c30:	4603      	mov	r3, r0
 8000c32:	406b      	eors	r3, r5
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4063      	eors	r3, r4
 8000c38:	b2dc      	uxtb	r4, r3
 8000c3a:	7a3b      	ldrb	r3, [r7, #8]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe5b 	bl	80008f8 <xtime>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe57 	bl	80008f8 <xtime>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe53 	bl	80008f8 <xtime>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	7a3b      	ldrb	r3, [r7, #8]
 8000c58:	4053      	eors	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4063      	eors	r3, r4
 8000c5e:	b2d9      	uxtb	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000c68:	7afb      	ldrb	r3, [r7, #11]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fe44 	bl	80008f8 <xtime>
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe40 	bl	80008f8 <xtime>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fe3c 	bl	80008f8 <xtime>
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fe38 	bl	80008f8 <xtime>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe34 	bl	80008f8 <xtime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fe30 	bl	80008f8 <xtime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe2c 	bl	80008f8 <xtime>
 8000ca0:	7abb      	ldrb	r3, [r7, #10]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe28 	bl	80008f8 <xtime>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fe24 	bl	80008f8 <xtime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe20 	bl	80008f8 <xtime>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fe1c 	bl	80008f8 <xtime>
 8000cc0:	7a7b      	ldrb	r3, [r7, #9]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fe18 	bl	80008f8 <xtime>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fe14 	bl	80008f8 <xtime>
 8000cd0:	7a7b      	ldrb	r3, [r7, #9]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe10 	bl	80008f8 <xtime>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fe0c 	bl	80008f8 <xtime>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe08 	bl	80008f8 <xtime>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe04 	bl	80008f8 <xtime>
 8000cf0:	7a3b      	ldrb	r3, [r7, #8]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe00 	bl	80008f8 <xtime>
 8000cf8:	7a3b      	ldrb	r3, [r7, #8]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fdfc 	bl	80008f8 <xtime>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fdf8 	bl	80008f8 <xtime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fdf4 	bl	80008f8 <xtime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fdf0 	bl	80008f8 <xtime>
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fdec 	bl	80008f8 <xtime>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fde8 	bl	80008f8 <xtime>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fde4 	bl	80008f8 <xtime>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	4053      	eors	r3, r2
 8000d38:	b2dc      	uxtb	r4, r3
 8000d3a:	7abb      	ldrb	r3, [r7, #10]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fddb 	bl	80008f8 <xtime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461d      	mov	r5, r3
 8000d46:	7abb      	ldrb	r3, [r7, #10]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fdd5 	bl	80008f8 <xtime>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fdd1 	bl	80008f8 <xtime>
 8000d56:	4603      	mov	r3, r0
 8000d58:	406b      	eors	r3, r5
 8000d5a:	b2dd      	uxtb	r5, r3
 8000d5c:	7abb      	ldrb	r3, [r7, #10]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fdca 	bl	80008f8 <xtime>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fdc6 	bl	80008f8 <xtime>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fdc2 	bl	80008f8 <xtime>
 8000d74:	4603      	mov	r3, r0
 8000d76:	406b      	eors	r3, r5
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4063      	eors	r3, r4
 8000d7c:	b2dc      	uxtb	r4, r3
 8000d7e:	7a7b      	ldrb	r3, [r7, #9]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdb9 	bl	80008f8 <xtime>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7a7b      	ldrb	r3, [r7, #9]
 8000d8c:	4053      	eors	r3, r2
 8000d8e:	b2dd      	uxtb	r5, r3
 8000d90:	7a7b      	ldrb	r3, [r7, #9]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fdb0 	bl	80008f8 <xtime>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fdac 	bl	80008f8 <xtime>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fda8 	bl	80008f8 <xtime>
 8000da8:	4603      	mov	r3, r0
 8000daa:	406b      	eors	r3, r5
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4063      	eors	r3, r4
 8000db0:	b2dc      	uxtb	r4, r3
 8000db2:	7a3b      	ldrb	r3, [r7, #8]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fd9f 	bl	80008f8 <xtime>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fd9b 	bl	80008f8 <xtime>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	7a3b      	ldrb	r3, [r7, #8]
 8000dc8:	4053      	eors	r3, r2
 8000dca:	b2dd      	uxtb	r5, r3
 8000dcc:	7a3b      	ldrb	r3, [r7, #8]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd92 	bl	80008f8 <xtime>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd8e 	bl	80008f8 <xtime>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fd8a 	bl	80008f8 <xtime>
 8000de4:	4603      	mov	r3, r0
 8000de6:	406b      	eors	r3, r5
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4063      	eors	r3, r4
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	460a      	mov	r2, r1
 8000df8:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd7b 	bl	80008f8 <xtime>
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fd77 	bl	80008f8 <xtime>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fd73 	bl	80008f8 <xtime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd6f 	bl	80008f8 <xtime>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fd6b 	bl	80008f8 <xtime>
 8000e22:	7abb      	ldrb	r3, [r7, #10]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fd67 	bl	80008f8 <xtime>
 8000e2a:	7abb      	ldrb	r3, [r7, #10]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fd63 	bl	80008f8 <xtime>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd5f 	bl	80008f8 <xtime>
 8000e3a:	7abb      	ldrb	r3, [r7, #10]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fd5b 	bl	80008f8 <xtime>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd57 	bl	80008f8 <xtime>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fd53 	bl	80008f8 <xtime>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fd4f 	bl	80008f8 <xtime>
 8000e5a:	7a7b      	ldrb	r3, [r7, #9]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd4b 	bl	80008f8 <xtime>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fd47 	bl	80008f8 <xtime>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd43 	bl	80008f8 <xtime>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fd3f 	bl	80008f8 <xtime>
 8000e7a:	7a3b      	ldrb	r3, [r7, #8]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd3b 	bl	80008f8 <xtime>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fd37 	bl	80008f8 <xtime>
 8000e8a:	7a3b      	ldrb	r3, [r7, #8]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd33 	bl	80008f8 <xtime>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fd2f 	bl	80008f8 <xtime>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd2b 	bl	80008f8 <xtime>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fd27 	bl	80008f8 <xtime>
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd23 	bl	80008f8 <xtime>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd1f 	bl	80008f8 <xtime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	b2dc      	uxtb	r4, r3
 8000ec4:	7afb      	ldrb	r3, [r7, #11]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fd16 	bl	80008f8 <xtime>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd12 	bl	80008f8 <xtime>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fd0e 	bl	80008f8 <xtime>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4063      	eors	r3, r4
 8000ee0:	b2dc      	uxtb	r4, r3
 8000ee2:	7abb      	ldrb	r3, [r7, #10]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd07 	bl	80008f8 <xtime>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fd03 	bl	80008f8 <xtime>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fcff 	bl	80008f8 <xtime>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	7abb      	ldrb	r3, [r7, #10]
 8000f00:	4053      	eors	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4063      	eors	r3, r4
 8000f06:	b2dc      	uxtb	r4, r3
 8000f08:	7a7b      	ldrb	r3, [r7, #9]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fcf4 	bl	80008f8 <xtime>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461d      	mov	r5, r3
 8000f14:	7a7b      	ldrb	r3, [r7, #9]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fcee 	bl	80008f8 <xtime>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fcea 	bl	80008f8 <xtime>
 8000f24:	4603      	mov	r3, r0
 8000f26:	406b      	eors	r3, r5
 8000f28:	b2dd      	uxtb	r5, r3
 8000f2a:	7a7b      	ldrb	r3, [r7, #9]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fce3 	bl	80008f8 <xtime>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fcdf 	bl	80008f8 <xtime>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fcdb 	bl	80008f8 <xtime>
 8000f42:	4603      	mov	r3, r0
 8000f44:	406b      	eors	r3, r5
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4063      	eors	r3, r4
 8000f4a:	b2dc      	uxtb	r4, r3
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fcd2 	bl	80008f8 <xtime>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	7a3b      	ldrb	r3, [r7, #8]
 8000f5a:	4053      	eors	r3, r2
 8000f5c:	b2dd      	uxtb	r5, r3
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fcc9 	bl	80008f8 <xtime>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fcc5 	bl	80008f8 <xtime>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fcc1 	bl	80008f8 <xtime>
 8000f76:	4603      	mov	r3, r0
 8000f78:	406b      	eors	r3, r5
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4063      	eors	r3, r4
 8000f7e:	b2d9      	uxtb	r1, r3
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	460a      	mov	r2, r1
 8000f8a:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fcb2 	bl	80008f8 <xtime>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fcae 	bl	80008f8 <xtime>
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fcaa 	bl	80008f8 <xtime>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fca6 	bl	80008f8 <xtime>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fca2 	bl	80008f8 <xtime>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc9e 	bl	80008f8 <xtime>
 8000fbc:	7abb      	ldrb	r3, [r7, #10]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fc9a 	bl	80008f8 <xtime>
 8000fc4:	7abb      	ldrb	r3, [r7, #10]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fc96 	bl	80008f8 <xtime>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fc92 	bl	80008f8 <xtime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fc8e 	bl	80008f8 <xtime>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fc8a 	bl	80008f8 <xtime>
 8000fe4:	7a7b      	ldrb	r3, [r7, #9]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fc86 	bl	80008f8 <xtime>
 8000fec:	7a7b      	ldrb	r3, [r7, #9]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc82 	bl	80008f8 <xtime>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fc7e 	bl	80008f8 <xtime>
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fc7a 	bl	80008f8 <xtime>
 8001004:	4603      	mov	r3, r0
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fc76 	bl	80008f8 <xtime>
 800100c:	4603      	mov	r3, r0
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fc72 	bl	80008f8 <xtime>
 8001014:	4603      	mov	r3, r0
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fc6e 	bl	80008f8 <xtime>
 800101c:	7a3b      	ldrb	r3, [r7, #8]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fc6a 	bl	80008f8 <xtime>
 8001024:	4603      	mov	r3, r0
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fc66 	bl	80008f8 <xtime>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fc62 	bl	80008f8 <xtime>
 8001034:	4603      	mov	r3, r0
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fc5e 	bl	80008f8 <xtime>
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc5a 	bl	80008f8 <xtime>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	4053      	eors	r3, r2
 800104c:	b2dc      	uxtb	r4, r3
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fc51 	bl	80008f8 <xtime>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fc4d 	bl	80008f8 <xtime>
 800105e:	4603      	mov	r3, r0
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fc49 	bl	80008f8 <xtime>
 8001066:	4603      	mov	r3, r0
 8001068:	4063      	eors	r3, r4
 800106a:	b2dc      	uxtb	r4, r3
 800106c:	7abb      	ldrb	r3, [r7, #10]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fc42 	bl	80008f8 <xtime>
 8001074:	4603      	mov	r3, r0
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc3e 	bl	80008f8 <xtime>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	7abb      	ldrb	r3, [r7, #10]
 8001082:	4053      	eors	r3, r2
 8001084:	b2dd      	uxtb	r5, r3
 8001086:	7abb      	ldrb	r3, [r7, #10]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fc35 	bl	80008f8 <xtime>
 800108e:	4603      	mov	r3, r0
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fc31 	bl	80008f8 <xtime>
 8001096:	4603      	mov	r3, r0
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fc2d 	bl	80008f8 <xtime>
 800109e:	4603      	mov	r3, r0
 80010a0:	406b      	eors	r3, r5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4063      	eors	r3, r4
 80010a6:	b2dc      	uxtb	r4, r3
 80010a8:	7a7b      	ldrb	r3, [r7, #9]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fc24 	bl	80008f8 <xtime>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fc20 	bl	80008f8 <xtime>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fc1c 	bl	80008f8 <xtime>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	4053      	eors	r3, r2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4063      	eors	r3, r4
 80010cc:	b2dc      	uxtb	r4, r3
 80010ce:	7a3b      	ldrb	r3, [r7, #8]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fc11 	bl	80008f8 <xtime>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461d      	mov	r5, r3
 80010da:	7a3b      	ldrb	r3, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fc0b 	bl	80008f8 <xtime>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fc07 	bl	80008f8 <xtime>
 80010ea:	4603      	mov	r3, r0
 80010ec:	406b      	eors	r3, r5
 80010ee:	b2dd      	uxtb	r5, r3
 80010f0:	7a3b      	ldrb	r3, [r7, #8]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fc00 	bl	80008f8 <xtime>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fbfc 	bl	80008f8 <xtime>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fbf8 	bl	80008f8 <xtime>
 8001108:	4603      	mov	r3, r0
 800110a:	406b      	eors	r3, r5
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4063      	eors	r3, r4
 8001110:	b2d9      	uxtb	r1, r3
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	460a      	mov	r2, r1
 800111c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b03      	cmp	r3, #3
 8001128:	f77f acc0 	ble.w	8000aac <InvMixColumns+0xe>
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001138 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e01d      	b.n	8001182 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]
 800114a:	e014      	b.n	8001176 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 800114c:	7bba      	ldrb	r2, [r7, #14]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	440a      	add	r2, r1
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	7bba      	ldrb	r2, [r7, #14]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	490d      	ldr	r1, [pc, #52]	@ (8001198 <InvSubBytes+0x60>)
 8001162:	5c08      	ldrb	r0, [r1, r0]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	440a      	add	r2, r1
 800116a:	4413      	add	r3, r2
 800116c:	4602      	mov	r2, r0
 800116e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	3301      	adds	r3, #1
 8001174:	73bb      	strb	r3, [r7, #14]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d9e7      	bls.n	800114c <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3301      	adds	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d9de      	bls.n	8001146 <InvSubBytes+0xe>
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	08003fb4 	.word	0x08003fb4

0800119c <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b5b      	ldrb	r3, [r3, #13]
 80011a8:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7a5a      	ldrb	r2, [r3, #9]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	795a      	ldrb	r2, [r3, #5]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	785a      	ldrb	r2, [r3, #1]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7a9a      	ldrb	r2, [r3, #10]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	799b      	ldrb	r3, [r3, #6]
 80011e0:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b9a      	ldrb	r2, [r3, #14]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	78db      	ldrb	r3, [r3, #3]
 80011f4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	79da      	ldrb	r2, [r3, #7]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7ada      	ldrb	r2, [r3, #11]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7bda      	ldrb	r2, [r3, #15]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	73da      	strb	r2, [r3, #15]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fab0 	bl	8000798 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fae7 	bl	8000810 <SubBytes>
    ShiftRows(state);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fb16 	bl	8000874 <ShiftRows>
    if (round == Nr) {
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b0a      	cmp	r3, #10
 800124c:	d00c      	beq.n	8001268 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fb70 	bl	8000934 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fa9c 	bl	8000798 <AddRoundKey>
  for (round = 1; ; ++round)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	3301      	adds	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8001266:	e7e9      	b.n	800123c <Cipher+0x1c>
      break;
 8001268:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	200a      	movs	r0, #10
 8001270:	f7ff fa92 	bl	8000798 <AddRoundKey>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	200a      	movs	r0, #10
 8001290:	f7ff fa82 	bl	8000798 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8001294:	2309      	movs	r3, #9
 8001296:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff7f 	bl	800119c <InvShiftRows>
    InvSubBytes(state);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff4a 	bl	8001138 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa74 	bl	8000798 <AddRoundKey>
    if (round == 0) {
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fbf1 	bl	8000a9e <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3b01      	subs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 80012c2:	e7e9      	b.n	8001298 <InvCipher+0x1c>
      break;
 80012c4:	bf00      	nop
  }

}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4619      	mov	r1, r3
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff ff9f 	bl	8001220 <Cipher>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4619      	mov	r1, r3
 80012f8:	6838      	ldr	r0, [r7, #0]
 80012fa:	f7ff ffbf 	bl	800127c <InvCipher>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e010      	b.n	8001338 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	7819      	ldrb	r1, [r3, #0]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4403      	add	r3, r0
 800132c:	404a      	eors	r2, r1
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	3301      	adds	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d9eb      	bls.n	8001316 <XorWithIv+0x10>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	33b0      	adds	r3, #176	@ 0xb0
 800135c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e010      	b.n	8001386 <AES_CBC_encrypt_buffer+0x3a>
  {
    XorWithIv(buf, Iv);
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f7ff ffcd 	bl	8001306 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4619      	mov	r1, r3
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7ff ff55 	bl	8001220 <Cipher>
    Iv = buf;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3310      	adds	r3, #16
 800137e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3310      	adds	r3, #16
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3ea      	bcc.n	8001364 <AES_CBC_encrypt_buffer+0x18>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	33b0      	adds	r3, #176	@ 0xb0
 8001392:	2210      	movs	r2, #16
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	4618      	mov	r0, r3
 8001398:	f002 f8fe 	bl	8003598 <memcpy>
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b4:	e022      	b.n	80013fc <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f107 0414 	add.w	r4, r7, #20
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4619      	mov	r1, r3
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f7ff ff56 	bl	800127c <InvCipher>
    XorWithIv(buf, ctx->Iv);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	33b0      	adds	r3, #176	@ 0xb0
 80013d4:	4619      	mov	r1, r3
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f7ff ff95 	bl	8001306 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	33b0      	adds	r3, #176	@ 0xb0
 80013e0:	461d      	mov	r5, r3
 80013e2:	f107 0414 	add.w	r4, r7, #20
 80013e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e8:	6028      	str	r0, [r5, #0]
 80013ea:	6069      	str	r1, [r5, #4]
 80013ec:	60aa      	str	r2, [r5, #8]
 80013ee:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3310      	adds	r3, #16
 80013f4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	3310      	adds	r3, #16
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3d8      	bcc.n	80013b6 <AES_CBC_decrypt_buffer+0x12>
  }

}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001410 <test_encrypt_ecb>:
    struct AES_ctx ctx;

    uint8_t out_dec[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x5f, 0x12 };

static int test_encrypt_ecb(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    AES_init_ctx(&ctx, key);
 8001414:	4905      	ldr	r1, [pc, #20]	@ (800142c <test_encrypt_ecb+0x1c>)
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <test_encrypt_ecb+0x20>)
 8001418:	f7ff f99a 	bl	8000750 <AES_init_ctx>
    AES_ECB_encrypt(&ctx, in);
 800141c:	4905      	ldr	r1, [pc, #20]	@ (8001434 <test_encrypt_ecb+0x24>)
 800141e:	4804      	ldr	r0, [pc, #16]	@ (8001430 <test_encrypt_ecb+0x20>)
 8001420:	f7ff ff55 	bl	80012ce <AES_ECB_encrypt>
//	return(0);
//    } else {
////        printf("FAILURE!\n");
//	return(1);
//    }
    return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	20000108 	.word	0x20000108
 8001434:	20000030 	.word	0x20000030

08001438 <test_decrypt_cbc>:

static int test_decrypt_cbc(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    AES_init_ctx_iv(&ctx, key, iv);
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <test_decrypt_cbc+0x20>)
 800143e:	4907      	ldr	r1, [pc, #28]	@ (800145c <test_decrypt_cbc+0x24>)
 8001440:	4807      	ldr	r0, [pc, #28]	@ (8001460 <test_decrypt_cbc+0x28>)
 8001442:	f7ff f993 	bl	800076c <AES_init_ctx_iv>
    AES_CBC_decrypt_buffer(&ctx, in_dec, 16);
 8001446:	2210      	movs	r2, #16
 8001448:	4906      	ldr	r1, [pc, #24]	@ (8001464 <test_decrypt_cbc+0x2c>)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <test_decrypt_cbc+0x28>)
 800144c:	f7ff ffaa 	bl	80013a4 <AES_CBC_decrypt_buffer>
//	return(0);
//    } else {
////        printf("FAILURE!\n");
//	return(1);
//    }
    return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000020 	.word	0x20000020
 800145c:	20000000 	.word	0x20000000
 8001460:	20000108 	.word	0x20000108
 8001464:	20000010 	.word	0x20000010

08001468 <test_encrypt_cbc>:

static int test_encrypt_cbc(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
    AES_init_ctx_iv(&ctx, key, iv);
 800146c:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <test_encrypt_cbc+0x20>)
 800146e:	4907      	ldr	r1, [pc, #28]	@ (800148c <test_encrypt_cbc+0x24>)
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <test_encrypt_cbc+0x28>)
 8001472:	f7ff f97b 	bl	800076c <AES_init_ctx_iv>
    AES_CBC_encrypt_buffer(&ctx, in, 16);
 8001476:	2210      	movs	r2, #16
 8001478:	4906      	ldr	r1, [pc, #24]	@ (8001494 <test_encrypt_cbc+0x2c>)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <test_encrypt_cbc+0x28>)
 800147c:	f7ff ff66 	bl	800134c <AES_CBC_encrypt_buffer>
//	return(0);
//    } else {
////        printf("FAILURE!\n");
//	return(1);
//    }
    return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000020 	.word	0x20000020
 800148c:	20000000 	.word	0x20000000
 8001490:	20000108 	.word	0x20000108
 8001494:	20000030 	.word	0x20000030

08001498 <test_decrypt_ecb>:


static int test_decrypt_ecb(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    AES_init_ctx(&ctx, key);
 800149c:	4905      	ldr	r1, [pc, #20]	@ (80014b4 <test_decrypt_ecb+0x1c>)
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <test_decrypt_ecb+0x20>)
 80014a0:	f7ff f956 	bl	8000750 <AES_init_ctx>
    AES_ECB_decrypt(&ctx, in_dec);
 80014a4:	4905      	ldr	r1, [pc, #20]	@ (80014bc <test_decrypt_ecb+0x24>)
 80014a6:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <test_decrypt_ecb+0x20>)
 80014a8:	f7ff ff1f 	bl	80012ea <AES_ECB_decrypt>
//	return(0);
//    } else {
////        printf("FAILURE!\n");
//	return(1);
//    }
    return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000108 	.word	0x20000108
 80014bc:	20000010 	.word	0x20000010

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b095      	sub	sp, #84	@ 0x54
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f000 faad 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f853 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 f901 	bl	80016d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d2:	f000 f8d5 	bl	8001680 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80014d6:	f000 f8bf 	bl	8001658 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"Piotr Slawecki & Jan Chyczynski - Crypto Alg test for STM32F446:\n\r", strlen("Piotr Slawecki & Jan Chyczynski - Crypto Alg test for STM32F446:\n\r"), 100);
 80014da:	2364      	movs	r3, #100	@ 0x64
 80014dc:	2242      	movs	r2, #66	@ 0x42
 80014de:	4922      	ldr	r1, [pc, #136]	@ (8001568 <main+0xa8>)
 80014e0:	4822      	ldr	r0, [pc, #136]	@ (800156c <main+0xac>)
 80014e2:	f001 fc49 	bl	8002d78 <HAL_UART_Transmit>
  sprintf(buff, "Elapsed (TinyAES CBC 10k ops): %ld\n\r", result);
  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 100);
#endif

#ifdef USE_AES_ECB
  uint32_t start_millis = HAL_GetTick();
 80014e6:	f000 fb03 	bl	8001af0 <HAL_GetTick>
 80014ea:	64b8      	str	r0, [r7, #72]	@ 0x48
  uint32_t res;
  for(int i = 0; i < 10000; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014f0:	e00a      	b.n	8001508 <main+0x48>
	 res = test_encrypt_ecb();
 80014f2:	f7ff ff8d 	bl	8001410 <test_encrypt_ecb>
 80014f6:	4603      	mov	r3, r0
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	 res = test_decrypt_ecb();
 80014fa:	f7ff ffcd 	bl	8001498 <test_decrypt_ecb>
 80014fe:	4603      	mov	r3, r0
 8001500:	63bb      	str	r3, [r7, #56]	@ 0x38
  for(int i = 0; i < 10000; i++) {
 8001502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001504:	3301      	adds	r3, #1
 8001506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800150a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800150e:	4293      	cmp	r3, r2
 8001510:	ddef      	ble.n	80014f2 <main+0x32>
  }
  uint32_t stop_millis = HAL_GetTick();
 8001512:	f000 faed 	bl	8001af0 <HAL_GetTick>
 8001516:	6478      	str	r0, [r7, #68]	@ 0x44
  uint32_t result = stop_millis - start_millis;
 8001518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800151a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	643b      	str	r3, [r7, #64]	@ 0x40
      /* Turn on the green led in case of AES CBC operations are succssfuls*/
  uint8_t buff[50];
  sprintf(buff, "Elapsed (TinyAES ECB 10k ops): %ld\n\r", result);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001524:	4912      	ldr	r1, [pc, #72]	@ (8001570 <main+0xb0>)
 8001526:	4618      	mov	r0, r3
 8001528:	f001 ffe2 	bl	80034f0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 100);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe6e 	bl	8000210 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	1d39      	adds	r1, r7, #4
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	480b      	ldr	r0, [pc, #44]	@ (800156c <main+0xac>)
 800153e:	f001 fc1b 	bl	8002d78 <HAL_UART_Transmit>
      while (1)
      {

  //  	  const char message[];

    	  int exit = test_encrypt_cbc() + test_decrypt_cbc() +
 8001542:	f7ff ff91 	bl	8001468 <test_encrypt_cbc>
 8001546:	4604      	mov	r4, r0
 8001548:	f7ff ff76 	bl	8001438 <test_decrypt_cbc>
 800154c:	4603      	mov	r3, r0
 800154e:	441c      	add	r4, r3
    	  test_decrypt_ecb() + test_encrypt_ecb();
 8001550:	f7ff ffa2 	bl	8001498 <test_decrypt_ecb>
 8001554:	4603      	mov	r3, r0
    	  int exit = test_encrypt_cbc() + test_decrypt_cbc() +
 8001556:	441c      	add	r4, r3
    	  test_decrypt_ecb() + test_encrypt_ecb();
 8001558:	f7ff ff5a 	bl	8001410 <test_encrypt_ecb>
 800155c:	4603      	mov	r3, r0
    	  int exit = test_encrypt_cbc() + test_decrypt_cbc() +
 800155e:	4423      	add	r3, r4
 8001560:	63fb      	str	r3, [r7, #60]	@ 0x3c
      {
 8001562:	bf00      	nop
 8001564:	e7ed      	b.n	8001542 <main+0x82>
 8001566:	bf00      	nop
 8001568:	08003e48 	.word	0x08003e48
 800156c:	200000c0 	.word	0x200000c0
 8001570:	08003e8c 	.word	0x08003e8c

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	@ 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2234      	movs	r2, #52	@ 0x34
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f001 ffd4 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <SystemClock_Config+0xdc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001650 <SystemClock_Config+0xdc>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a8:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <SystemClock_Config+0xdc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <SystemClock_Config+0xe0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a25      	ldr	r2, [pc, #148]	@ (8001654 <SystemClock_Config+0xe0>)
 80015be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <SystemClock_Config+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015e8:	23b4      	movs	r3, #180	@ 0xb4
 80015ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 f8cd 	bl	800279c <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001608:	f000 f8d2 	bl	80017b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800160c:	f000 fd2c 	bl	8002068 <HAL_PWREx_EnableOverDrive>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001616:	f000 f8cb 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2302      	movs	r3, #2
 8001620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001626:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001630:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2105      	movs	r1, #5
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fd65 	bl	8002108 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001644:	f000 f8b4 	bl	80017b0 <Error_Handler>
  }
}
 8001648:	bf00      	nop
 800164a:	3750      	adds	r7, #80	@ 0x50
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000

08001658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_CRC_Init+0x20>)
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <MX_CRC_Init+0x24>)
 8001660:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_CRC_Init+0x20>)
 8001664:	f000 fb35 	bl	8001cd2 <HAL_CRC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800166e:	f000 f89f 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000b8 	.word	0x200000b8
 800167c:	40023000 	.word	0x40023000

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <MX_USART2_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b8:	f001 fb0e 	bl	8002cd8 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 f875 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000c0 	.word	0x200000c0
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a2c      	ldr	r2, [pc, #176]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a25      	ldr	r2, [pc, #148]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a17      	ldr	r2, [pc, #92]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <MX_GPIO_Init+0xd0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001760:	f000 fc68 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	480c      	ldr	r0, [pc, #48]	@ (80017ac <MX_GPIO_Init+0xd8>)
 800177c:	f000 fac6 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001780:	2320      	movs	r3, #32
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001798:	f000 fab8 	bl	8001d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020800 	.word	0x40020800

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001808 <HAL_MspInit+0x4c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_MspInit+0x4c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017fa:	2007      	movs	r0, #7
 80017fc:	f000 fa36 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_CRC_MspInit+0x3c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10d      	bne.n	800183a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_CRC_MspInit+0x40>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_CRC_MspInit+0x40>)
 8001828:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <HAL_CRC_MspInit+0x40>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023000 	.word	0x40023000
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <HAL_UART_MspInit+0x84>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12b      	bne.n	80018ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_UART_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_UART_MspInit+0x88>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_UART_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_UART_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_UART_MspInit+0x88>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018aa:	230c      	movs	r3, #12
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <HAL_UART_MspInit+0x8c>)
 80018c6:	f000 fa21 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	@ 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <NMI_Handler+0x4>

080018e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <MemManage_Handler+0x4>

080018f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001936:	f000 f8c7 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f001 fde6 	bl	8003540 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20020000 	.word	0x20020000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	200001c8 	.word	0x200001c8
 80019a8:	20000318 	.word	0x20000318

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d4:	f7ff ffea 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019da:	490d      	ldr	r1, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f001 fda5 	bl	800354c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff fd5d 	bl	80014c0 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001a14:	0800411c 	.word	0x0800411c
  ldr r2, =_sbss
 8001a18:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001a1c:	20000318 	.word	0x20000318

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f90d 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff feb0 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f917 	bl	8001cba <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f8ed 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000040 	.word	0x20000040
 8001ac0:	20000048 	.word	0x20000048
 8001ac4:	20000044 	.word	0x20000044

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000048 	.word	0x20000048
 8001aec:	200001cc 	.word	0x200001cc

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200001cc 	.word	0x200001cc

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff47 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff5c 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff8e 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffb0 	bl	8001c28 <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e00e      	b.n	8001d02 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	795b      	ldrb	r3, [r3, #5]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fd89 	bl	800180c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e165      	b.n	8001ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8154 	bne.w	8001fee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80ae 	beq.w	8001fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b5d      	ldr	r3, [pc, #372]	@ (800200c <HAL_GPIO_Init+0x300>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800200c <HAL_GPIO_Init+0x300>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800200c <HAL_GPIO_Init+0x300>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a58      	ldr	r2, [pc, #352]	@ (8002010 <HAL_GPIO_Init+0x304>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4f      	ldr	r2, [pc, #316]	@ (8002014 <HAL_GPIO_Init+0x308>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0x21a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4e      	ldr	r2, [pc, #312]	@ (8002018 <HAL_GPIO_Init+0x30c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x216>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4d      	ldr	r2, [pc, #308]	@ (800201c <HAL_GPIO_Init+0x310>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x212>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4c      	ldr	r2, [pc, #304]	@ (8002020 <HAL_GPIO_Init+0x314>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x20e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8002024 <HAL_GPIO_Init+0x318>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x20a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4a      	ldr	r2, [pc, #296]	@ (8002028 <HAL_GPIO_Init+0x31c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x206>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a49      	ldr	r2, [pc, #292]	@ (800202c <HAL_GPIO_Init+0x320>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x202>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00c      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00a      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x21c>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	@ (8002010 <HAL_GPIO_Init+0x304>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a31      	ldr	r2, [pc, #196]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a26      	ldr	r2, [pc, #152]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe8:	4a11      	ldr	r2, [pc, #68]	@ (8002030 <HAL_GPIO_Init+0x324>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f ae96 	bls.w	8001d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a1f      	ldr	r2, [pc, #124]	@ (80020f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800208e:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_PWREx_EnableOverDrive+0x94>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002094:	f7ff fd2c 	bl	8001af0 <HAL_GetTick>
 8002098:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800209a:	e009      	b.n	80020b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800209c:	f7ff fd28 	bl	8001af0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020aa:	d901      	bls.n	80020b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e01f      	b.n	80020f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020bc:	d1ee      	bne.n	800209c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c4:	f7ff fd14 	bl	8001af0 <HAL_GetTick>
 80020c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020ca:	e009      	b.n	80020e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020cc:	f7ff fd10 	bl	8001af0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020da:	d901      	bls.n	80020e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e007      	b.n	80020f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020ec:	d1ee      	bne.n	80020cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	420e0040 	.word	0x420e0040
 8002100:	40007000 	.word	0x40007000
 8002104:	420e0044 	.word	0x420e0044

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0cc      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b68      	ldr	r3, [pc, #416]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d90c      	bls.n	8002144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b65      	ldr	r3, [pc, #404]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b63      	ldr	r3, [pc, #396]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b8      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800215c:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a58      	ldr	r2, [pc, #352]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002174:	4b53      	ldr	r3, [pc, #332]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800217e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	494d      	ldr	r1, [pc, #308]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d044      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e07f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e067      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b37      	ldr	r3, [pc, #220]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4934      	ldr	r1, [pc, #208]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7ff fc7a 	bl	8001af0 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7ff fc76 	bl	8001af0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e04f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d20c      	bcs.n	8002250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e032      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4916      	ldr	r1, [pc, #88]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227a:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	490e      	ldr	r1, [pc, #56]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800228e:	f000 f855 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8002292:	4602      	mov	r2, r0
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	490a      	ldr	r1, [pc, #40]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	5ccb      	ldrb	r3, [r1, r3]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fbda 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	080040c0 	.word	0x080040c0
 80022cc:	20000040 	.word	0x20000040
 80022d0:	20000044 	.word	0x20000044

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000040 	.word	0x20000040

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	080040d0 	.word	0x080040d0

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffdc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0b5b      	lsrs	r3, r3, #13
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	080040d0 	.word	0x080040d0

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002340:	b0ae      	sub	sp, #184	@ 0xb8
 8002342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002362:	4bcb      	ldr	r3, [pc, #812]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b0c      	cmp	r3, #12
 800236c:	f200 8206 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x440>
 8002370:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	080023ad 	.word	0x080023ad
 800237c:	0800277d 	.word	0x0800277d
 8002380:	0800277d 	.word	0x0800277d
 8002384:	0800277d 	.word	0x0800277d
 8002388:	080023b5 	.word	0x080023b5
 800238c:	0800277d 	.word	0x0800277d
 8002390:	0800277d 	.word	0x0800277d
 8002394:	0800277d 	.word	0x0800277d
 8002398:	080023bd 	.word	0x080023bd
 800239c:	0800277d 	.word	0x0800277d
 80023a0:	0800277d 	.word	0x0800277d
 80023a4:	0800277d 	.word	0x0800277d
 80023a8:	080025ad 	.word	0x080025ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80023b2:	e1e7      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ba:	e1e3      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	4bb4      	ldr	r3, [pc, #720]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d071      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d4:	4bae      	ldr	r3, [pc, #696]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	2200      	movs	r2, #0
 80023dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80023e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023fa:	4622      	mov	r2, r4
 80023fc:	462b      	mov	r3, r5
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	0159      	lsls	r1, r3, #5
 8002408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240c:	0150      	lsls	r0, r2, #5
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4621      	mov	r1, r4
 8002414:	1a51      	subs	r1, r2, r1
 8002416:	6439      	str	r1, [r7, #64]	@ 0x40
 8002418:	4629      	mov	r1, r5
 800241a:	eb63 0301 	sbc.w	r3, r3, r1
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800242c:	4649      	mov	r1, r9
 800242e:	018b      	lsls	r3, r1, #6
 8002430:	4641      	mov	r1, r8
 8002432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002436:	4641      	mov	r1, r8
 8002438:	018a      	lsls	r2, r1, #6
 800243a:	4641      	mov	r1, r8
 800243c:	1a51      	subs	r1, r2, r1
 800243e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002440:	4649      	mov	r1, r9
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002454:	4649      	mov	r1, r9
 8002456:	00cb      	lsls	r3, r1, #3
 8002458:	4641      	mov	r1, r8
 800245a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245e:	4641      	mov	r1, r8
 8002460:	00ca      	lsls	r2, r1, #3
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4603      	mov	r3, r0
 8002468:	4622      	mov	r2, r4
 800246a:	189b      	adds	r3, r3, r2
 800246c:	633b      	str	r3, [r7, #48]	@ 0x30
 800246e:	462b      	mov	r3, r5
 8002470:	460a      	mov	r2, r1
 8002472:	eb42 0303 	adc.w	r3, r2, r3
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002484:	4629      	mov	r1, r5
 8002486:	024b      	lsls	r3, r1, #9
 8002488:	4621      	mov	r1, r4
 800248a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800248e:	4621      	mov	r1, r4
 8002490:	024a      	lsls	r2, r1, #9
 8002492:	4610      	mov	r0, r2
 8002494:	4619      	mov	r1, r3
 8002496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024a8:	f7fd ff0a 	bl	80002c0 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024b6:	e067      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	4b75      	ldr	r3, [pc, #468]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80024c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024d2:	2300      	movs	r3, #0
 80024d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80024da:	4622      	mov	r2, r4
 80024dc:	462b      	mov	r3, r5
 80024de:	f04f 0000 	mov.w	r0, #0
 80024e2:	f04f 0100 	mov.w	r1, #0
 80024e6:	0159      	lsls	r1, r3, #5
 80024e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ec:	0150      	lsls	r0, r2, #5
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4621      	mov	r1, r4
 80024f4:	1a51      	subs	r1, r2, r1
 80024f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80024f8:	4629      	mov	r1, r5
 80024fa:	eb63 0301 	sbc.w	r3, r3, r1
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800250c:	4649      	mov	r1, r9
 800250e:	018b      	lsls	r3, r1, #6
 8002510:	4641      	mov	r1, r8
 8002512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002516:	4641      	mov	r1, r8
 8002518:	018a      	lsls	r2, r1, #6
 800251a:	4641      	mov	r1, r8
 800251c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002520:	4649      	mov	r1, r9
 8002522:	eb63 0b01 	sbc.w	fp, r3, r1
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002532:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800253a:	4692      	mov	sl, r2
 800253c:	469b      	mov	fp, r3
 800253e:	4623      	mov	r3, r4
 8002540:	eb1a 0303 	adds.w	r3, sl, r3
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	462b      	mov	r3, r5
 8002548:	eb4b 0303 	adc.w	r3, fp, r3
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800255a:	4629      	mov	r1, r5
 800255c:	028b      	lsls	r3, r1, #10
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002564:	4621      	mov	r1, r4
 8002566:	028a      	lsls	r2, r1, #10
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002570:	2200      	movs	r2, #0
 8002572:	673b      	str	r3, [r7, #112]	@ 0x70
 8002574:	677a      	str	r2, [r7, #116]	@ 0x74
 8002576:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800257a:	f7fd fea1 	bl	80002c0 <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4613      	mov	r3, r2
 8002584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002588:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800259a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800259e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025aa:	e0eb      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b8:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d06b      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	2200      	movs	r2, #0
 80025cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d8:	2300      	movs	r3, #0
 80025da:	667b      	str	r3, [r7, #100]	@ 0x64
 80025dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80025e0:	4622      	mov	r2, r4
 80025e2:	462b      	mov	r3, r5
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	0159      	lsls	r1, r3, #5
 80025ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f2:	0150      	lsls	r0, r2, #5
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4621      	mov	r1, r4
 80025fa:	1a51      	subs	r1, r2, r1
 80025fc:	61b9      	str	r1, [r7, #24]
 80025fe:	4629      	mov	r1, r5
 8002600:	eb63 0301 	sbc.w	r3, r3, r1
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002612:	4659      	mov	r1, fp
 8002614:	018b      	lsls	r3, r1, #6
 8002616:	4651      	mov	r1, sl
 8002618:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261c:	4651      	mov	r1, sl
 800261e:	018a      	lsls	r2, r1, #6
 8002620:	4651      	mov	r1, sl
 8002622:	ebb2 0801 	subs.w	r8, r2, r1
 8002626:	4659      	mov	r1, fp
 8002628:	eb63 0901 	sbc.w	r9, r3, r1
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002640:	4690      	mov	r8, r2
 8002642:	4699      	mov	r9, r3
 8002644:	4623      	mov	r3, r4
 8002646:	eb18 0303 	adds.w	r3, r8, r3
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	462b      	mov	r3, r5
 800264e:	eb49 0303 	adc.w	r3, r9, r3
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002660:	4629      	mov	r1, r5
 8002662:	024b      	lsls	r3, r1, #9
 8002664:	4621      	mov	r1, r4
 8002666:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800266a:	4621      	mov	r1, r4
 800266c:	024a      	lsls	r2, r1, #9
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002676:	2200      	movs	r2, #0
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800267a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800267c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002680:	f7fd fe1e 	bl	80002c0 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800268e:	e065      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x420>
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400
 8002698:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x458>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	2200      	movs	r2, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	4611      	mov	r1, r2
 80026a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ae:	2300      	movs	r3, #0
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026b6:	4642      	mov	r2, r8
 80026b8:	464b      	mov	r3, r9
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	0159      	lsls	r1, r3, #5
 80026c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c8:	0150      	lsls	r0, r2, #5
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4641      	mov	r1, r8
 80026d0:	1a51      	subs	r1, r2, r1
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	4649      	mov	r1, r9
 80026d6:	eb63 0301 	sbc.w	r3, r3, r1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026e8:	4659      	mov	r1, fp
 80026ea:	018b      	lsls	r3, r1, #6
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f2:	4651      	mov	r1, sl
 80026f4:	018a      	lsls	r2, r1, #6
 80026f6:	4651      	mov	r1, sl
 80026f8:	1a54      	subs	r4, r2, r1
 80026fa:	4659      	mov	r1, fp
 80026fc:	eb63 0501 	sbc.w	r5, r3, r1
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	00eb      	lsls	r3, r5, #3
 800270a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4643      	mov	r3, r8
 8002716:	18e3      	adds	r3, r4, r3
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	464b      	mov	r3, r9
 800271c:	eb45 0303 	adc.w	r3, r5, r3
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272e:	4629      	mov	r1, r5
 8002730:	028b      	lsls	r3, r1, #10
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002738:	4621      	mov	r1, r4
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002744:	2200      	movs	r2, #0
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002748:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800274a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800274e:	f7fd fdb7 	bl	80002c0 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4613      	mov	r3, r2
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x458>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0f1b      	lsrs	r3, r3, #28
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800276a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800276e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800277a:	e003      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x45c>)
 800277e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002788:	4618      	mov	r0, r3
 800278a:	37b8      	adds	r7, #184	@ 0xb8
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400

0800279c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e28d      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8083 	beq.w	80028c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027bc:	4b94      	ldr	r3, [pc, #592]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d019      	beq.n	80027fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027c8:	4b91      	ldr	r3, [pc, #580]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b88      	ldr	r3, [pc, #544]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b84      	ldr	r3, [pc, #528]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x124>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e25a      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x90>
 800281e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xcc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0xb4>
 8002836:	4b76      	ldr	r3, [pc, #472]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b73      	ldr	r3, [pc, #460]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a72      	ldr	r2, [pc, #456]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xcc>
 8002850:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6e      	ldr	r2, [pc, #440]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6b      	ldr	r2, [pc, #428]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f93e 	bl	8001af0 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff f93a 	bl	8001af0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e21f      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b61      	ldr	r3, [pc, #388]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xdc>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f92a 	bl	8001af0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff f926 	bl	8001af0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e20b      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x104>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06f      	beq.n	80029ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028ce:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028da:	4b4d      	ldr	r3, [pc, #308]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d105      	bne.n	80028f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b44      	ldr	r3, [pc, #272]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x186>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1d3      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4937      	ldr	r1, [pc, #220]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x278>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7ff f8d3 	bl	8001af0 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294e:	f7ff f8cf 	bl	8001af0 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1b4      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4925      	ldr	r1, [pc, #148]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_RCC_OscConfig+0x278>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7ff f8b2 	bl	8001af0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002990:	f7ff f8ae 	bl	8001af0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e193      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d036      	beq.n	8002a28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7ff f892 	bl	8001af0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d0:	f7ff f88e 	bl	8001af0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e173      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x234>
 80029ee:	e01b      	b.n	8002a28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7ff f87b 	bl	8001af0 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00e      	b.n	8002a1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029fe:	f7ff f877 	bl	8001af0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d907      	bls.n	8002a1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e15c      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ea      	bne.n	80029fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8097 	beq.w	8002b64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b83      	ldr	r3, [pc, #524]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a56:	4b7c      	ldr	r3, [pc, #496]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b79      	ldr	r3, [pc, #484]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d118      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff f837 	bl	8001af0 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7ff f833 	bl	8001af0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e118      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b6c      	ldr	r3, [pc, #432]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x31e>
 8002aac:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	4a65      	ldr	r2, [pc, #404]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x358>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x340>
 8002ac2:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ace:	4b5e      	ldr	r3, [pc, #376]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x358>
 8002adc:	4b5a      	ldr	r3, [pc, #360]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b57      	ldr	r3, [pc, #348]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fff8 	bl	8001af0 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fff4 	bl	8001af0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0d7      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x368>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe ffe2 	bl	8001af0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe ffde 	bl	8001af0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0c1      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ad 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6e:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d060      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d145      	bne.n	8002c0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x4b4>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe ffb2 	bl	8001af0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe ffae 	bl	8001af0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e093      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	071b      	lsls	r3, r3, #28
 8002bda:	491b      	ldr	r1, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x4b4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe ff83 	bl	8001af0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe ff7f 	bl	8001af0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e064      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x452>
 8002c0c:	e05c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x4b4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe ff6c 	bl	8001af0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe ff68 	bl	8001af0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e04d      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x480>
 8002c3a:	e045      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e040      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_RCC_OscConfig+0x538>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d030      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d129      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d122      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d119      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e042      	b.n	8002d70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fda6 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	@ 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f973 	bl	8003008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	@ 0x28
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d175      	bne.n	8002e84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Transmit+0x2c>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06e      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	@ 0x21
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fe9b 	bl	8001af0 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Transmit+0x6c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dec:	e02e      	b.n	8002e4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	@ 0x80
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f848 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03a      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e007      	b.n	8002e3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1cb      	bne.n	8002dee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	@ 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f814 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9e:	e03b      	b.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d037      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe fe22 	bl	8001af0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	6a3a      	ldr	r2, [r7, #32]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e03a      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b80      	cmp	r3, #128	@ 0x80
 8002ed4:	d020      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b40      	cmp	r3, #64	@ 0x40
 8002eda:	d01d      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d116      	bne.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f81d 	bl	8002f40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00f      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d0b4      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b095      	sub	sp, #84	@ 0x54
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f68:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3314      	adds	r3, #20
 8002f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3314      	adds	r3, #20
 8002f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d119      	bne.n	8002fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fd8:	61ba      	str	r2, [r7, #24]
 8002fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6979      	ldr	r1, [r7, #20]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ffa:	bf00      	nop
 8002ffc:	3754      	adds	r7, #84	@ 0x54
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b0c0      	sub	sp, #256	@ 0x100
 800300e:	af00      	add	r7, sp, #0
 8003010:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	68d9      	ldr	r1, [r3, #12]
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	ea40 0301 	orr.w	r3, r0, r1
 8003030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003060:	f021 010c 	bic.w	r1, r1, #12
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800306e:	430b      	orrs	r3, r1
 8003070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	6999      	ldr	r1, [r3, #24]
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	ea40 0301 	orr.w	r3, r0, r1
 800308e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b8f      	ldr	r3, [pc, #572]	@ (80032d4 <UART_SetConfig+0x2cc>)
 8003098:	429a      	cmp	r2, r3
 800309a:	d005      	beq.n	80030a8 <UART_SetConfig+0xa0>
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b8d      	ldr	r3, [pc, #564]	@ (80032d8 <UART_SetConfig+0x2d0>)
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d104      	bne.n	80030b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a8:	f7ff f934 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 80030ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030b0:	e003      	b.n	80030ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030b2:	f7ff f91b 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80030b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c4:	f040 810c 	bne.w	80032e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	1891      	adds	r1, r2, r2
 80030e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030e2:	415b      	adcs	r3, r3
 80030e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030ea:	4621      	mov	r1, r4
 80030ec:	eb12 0801 	adds.w	r8, r2, r1
 80030f0:	4629      	mov	r1, r5
 80030f2:	eb43 0901 	adc.w	r9, r3, r1
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800310a:	4690      	mov	r8, r2
 800310c:	4699      	mov	r9, r3
 800310e:	4623      	mov	r3, r4
 8003110:	eb18 0303 	adds.w	r3, r8, r3
 8003114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003118:	462b      	mov	r3, r5
 800311a:	eb49 0303 	adc.w	r3, r9, r3
 800311e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800312e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003136:	460b      	mov	r3, r1
 8003138:	18db      	adds	r3, r3, r3
 800313a:	653b      	str	r3, [r7, #80]	@ 0x50
 800313c:	4613      	mov	r3, r2
 800313e:	eb42 0303 	adc.w	r3, r2, r3
 8003142:	657b      	str	r3, [r7, #84]	@ 0x54
 8003144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800314c:	f7fd f8b8 	bl	80002c0 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <UART_SetConfig+0x2d4>)
 8003156:	fba3 2302 	umull	r2, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	011c      	lsls	r4, r3, #4
 800315e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003168:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800316c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	1891      	adds	r1, r2, r2
 8003176:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003178:	415b      	adcs	r3, r3
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003180:	4641      	mov	r1, r8
 8003182:	eb12 0a01 	adds.w	sl, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb43 0b01 	adc.w	fp, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800319c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a0:	4692      	mov	sl, r2
 80031a2:	469b      	mov	fp, r3
 80031a4:	4643      	mov	r3, r8
 80031a6:	eb1a 0303 	adds.w	r3, sl, r3
 80031aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031ae:	464b      	mov	r3, r9
 80031b0:	eb4b 0303 	adc.w	r3, fp, r3
 80031b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031cc:	460b      	mov	r3, r1
 80031ce:	18db      	adds	r3, r3, r3
 80031d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031d2:	4613      	mov	r3, r2
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031e2:	f7fd f86d 	bl	80002c0 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <UART_SetConfig+0x2d4>)
 80031ee:	fba3 2301 	umull	r2, r3, r3, r1
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2264      	movs	r2, #100	@ 0x64
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	1acb      	subs	r3, r1, r3
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003202:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <UART_SetConfig+0x2d4>)
 8003204:	fba3 2302 	umull	r2, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003210:	441c      	add	r4, r3
 8003212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800321c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003224:	4642      	mov	r2, r8
 8003226:	464b      	mov	r3, r9
 8003228:	1891      	adds	r1, r2, r2
 800322a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800322c:	415b      	adcs	r3, r3
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003234:	4641      	mov	r1, r8
 8003236:	1851      	adds	r1, r2, r1
 8003238:	6339      	str	r1, [r7, #48]	@ 0x30
 800323a:	4649      	mov	r1, r9
 800323c:	414b      	adcs	r3, r1
 800323e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800324c:	4659      	mov	r1, fp
 800324e:	00cb      	lsls	r3, r1, #3
 8003250:	4651      	mov	r1, sl
 8003252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003256:	4651      	mov	r1, sl
 8003258:	00ca      	lsls	r2, r1, #3
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	4603      	mov	r3, r0
 8003260:	4642      	mov	r2, r8
 8003262:	189b      	adds	r3, r3, r2
 8003264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003268:	464b      	mov	r3, r9
 800326a:	460a      	mov	r2, r1
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003280:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003288:	460b      	mov	r3, r1
 800328a:	18db      	adds	r3, r3, r3
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800328e:	4613      	mov	r3, r2
 8003290:	eb42 0303 	adc.w	r3, r2, r3
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800329a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800329e:	f7fd f80f 	bl	80002c0 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <UART_SetConfig+0x2d4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	@ 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	3332      	adds	r3, #50	@ 0x32
 80032ba:	4a08      	ldr	r2, [pc, #32]	@ (80032dc <UART_SetConfig+0x2d4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 0207 	and.w	r2, r3, #7
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4422      	add	r2, r4
 80032ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032d0:	e106      	b.n	80034e0 <UART_SetConfig+0x4d8>
 80032d2:	bf00      	nop
 80032d4:	40011000 	.word	0x40011000
 80032d8:	40011400 	.word	0x40011400
 80032dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032f2:	4642      	mov	r2, r8
 80032f4:	464b      	mov	r3, r9
 80032f6:	1891      	adds	r1, r2, r2
 80032f8:	6239      	str	r1, [r7, #32]
 80032fa:	415b      	adcs	r3, r3
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003302:	4641      	mov	r1, r8
 8003304:	1854      	adds	r4, r2, r1
 8003306:	4649      	mov	r1, r9
 8003308:	eb43 0501 	adc.w	r5, r3, r1
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	00eb      	lsls	r3, r5, #3
 8003316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	4614      	mov	r4, r2
 800331e:	461d      	mov	r5, r3
 8003320:	4643      	mov	r3, r8
 8003322:	18e3      	adds	r3, r4, r3
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003328:	464b      	mov	r3, r9
 800332a:	eb45 0303 	adc.w	r3, r5, r3
 800332e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800333e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800334e:	4629      	mov	r1, r5
 8003350:	008b      	lsls	r3, r1, #2
 8003352:	4621      	mov	r1, r4
 8003354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003358:	4621      	mov	r1, r4
 800335a:	008a      	lsls	r2, r1, #2
 800335c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003360:	f7fc ffae 	bl	80002c0 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4b60      	ldr	r3, [pc, #384]	@ (80034ec <UART_SetConfig+0x4e4>)
 800336a:	fba3 2302 	umull	r2, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	011c      	lsls	r4, r3, #4
 8003372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800337c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	1891      	adds	r1, r2, r2
 800338a:	61b9      	str	r1, [r7, #24]
 800338c:	415b      	adcs	r3, r3
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003394:	4641      	mov	r1, r8
 8003396:	1851      	adds	r1, r2, r1
 8003398:	6139      	str	r1, [r7, #16]
 800339a:	4649      	mov	r1, r9
 800339c:	414b      	adcs	r3, r1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033ac:	4659      	mov	r1, fp
 80033ae:	00cb      	lsls	r3, r1, #3
 80033b0:	4651      	mov	r1, sl
 80033b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b6:	4651      	mov	r1, sl
 80033b8:	00ca      	lsls	r2, r1, #3
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	4642      	mov	r2, r8
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033c8:	464b      	mov	r3, r9
 80033ca:	460a      	mov	r2, r1
 80033cc:	eb42 0303 	adc.w	r3, r2, r3
 80033d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033ec:	4649      	mov	r1, r9
 80033ee:	008b      	lsls	r3, r1, #2
 80033f0:	4641      	mov	r1, r8
 80033f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f6:	4641      	mov	r1, r8
 80033f8:	008a      	lsls	r2, r1, #2
 80033fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033fe:	f7fc ff5f 	bl	80002c0 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4611      	mov	r1, r2
 8003408:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <UART_SetConfig+0x4e4>)
 800340a:	fba3 2301 	umull	r2, r3, r3, r1
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2264      	movs	r2, #100	@ 0x64
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	1acb      	subs	r3, r1, r3
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	3332      	adds	r3, #50	@ 0x32
 800341c:	4a33      	ldr	r2, [pc, #204]	@ (80034ec <UART_SetConfig+0x4e4>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003428:	441c      	add	r4, r3
 800342a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800342e:	2200      	movs	r2, #0
 8003430:	673b      	str	r3, [r7, #112]	@ 0x70
 8003432:	677a      	str	r2, [r7, #116]	@ 0x74
 8003434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	415b      	adcs	r3, r3
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003448:	4641      	mov	r1, r8
 800344a:	1851      	adds	r1, r2, r1
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	4649      	mov	r1, r9
 8003450:	414b      	adcs	r3, r1
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003460:	4659      	mov	r1, fp
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4651      	mov	r1, sl
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4651      	mov	r1, sl
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4642      	mov	r2, r8
 8003476:	189b      	adds	r3, r3, r2
 8003478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800347a:	464b      	mov	r3, r9
 800347c:	460a      	mov	r2, r1
 800347e:	eb42 0303 	adc.w	r3, r2, r3
 8003482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	663b      	str	r3, [r7, #96]	@ 0x60
 800348e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800349c:	4649      	mov	r1, r9
 800349e:	008b      	lsls	r3, r1, #2
 80034a0:	4641      	mov	r1, r8
 80034a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a6:	4641      	mov	r1, r8
 80034a8:	008a      	lsls	r2, r1, #2
 80034aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034ae:	f7fc ff07 	bl	80002c0 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <UART_SetConfig+0x4e4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	@ 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	3332      	adds	r3, #50	@ 0x32
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <UART_SetConfig+0x4e4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 020f 	and.w	r2, r3, #15
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4422      	add	r2, r4
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ec:	51eb851f 	.word	0x51eb851f

080034f0 <siprintf>:
 80034f0:	b40e      	push	{r1, r2, r3}
 80034f2:	b500      	push	{lr}
 80034f4:	b09c      	sub	sp, #112	@ 0x70
 80034f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80034f8:	9002      	str	r0, [sp, #8]
 80034fa:	9006      	str	r0, [sp, #24]
 80034fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003500:	4809      	ldr	r0, [pc, #36]	@ (8003528 <siprintf+0x38>)
 8003502:	9107      	str	r1, [sp, #28]
 8003504:	9104      	str	r1, [sp, #16]
 8003506:	4909      	ldr	r1, [pc, #36]	@ (800352c <siprintf+0x3c>)
 8003508:	f853 2b04 	ldr.w	r2, [r3], #4
 800350c:	9105      	str	r1, [sp, #20]
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	a902      	add	r1, sp, #8
 8003514:	f000 f9a2 	bl	800385c <_svfiprintf_r>
 8003518:	9b02      	ldr	r3, [sp, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	b01c      	add	sp, #112	@ 0x70
 8003520:	f85d eb04 	ldr.w	lr, [sp], #4
 8003524:	b003      	add	sp, #12
 8003526:	4770      	bx	lr
 8003528:	2000004c 	.word	0x2000004c
 800352c:	ffff0208 	.word	0xffff0208

08003530 <memset>:
 8003530:	4402      	add	r2, r0
 8003532:	4603      	mov	r3, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <__errno>:
 8003540:	4b01      	ldr	r3, [pc, #4]	@ (8003548 <__errno+0x8>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000004c 	.word	0x2000004c

0800354c <__libc_init_array>:
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	4d0d      	ldr	r5, [pc, #52]	@ (8003584 <__libc_init_array+0x38>)
 8003550:	4c0d      	ldr	r4, [pc, #52]	@ (8003588 <__libc_init_array+0x3c>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	2600      	movs	r6, #0
 8003558:	42a6      	cmp	r6, r4
 800355a:	d109      	bne.n	8003570 <__libc_init_array+0x24>
 800355c:	4d0b      	ldr	r5, [pc, #44]	@ (800358c <__libc_init_array+0x40>)
 800355e:	4c0c      	ldr	r4, [pc, #48]	@ (8003590 <__libc_init_array+0x44>)
 8003560:	f000 fc66 	bl	8003e30 <_init>
 8003564:	1b64      	subs	r4, r4, r5
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	2600      	movs	r6, #0
 800356a:	42a6      	cmp	r6, r4
 800356c:	d105      	bne.n	800357a <__libc_init_array+0x2e>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	f855 3b04 	ldr.w	r3, [r5], #4
 8003574:	4798      	blx	r3
 8003576:	3601      	adds	r6, #1
 8003578:	e7ee      	b.n	8003558 <__libc_init_array+0xc>
 800357a:	f855 3b04 	ldr.w	r3, [r5], #4
 800357e:	4798      	blx	r3
 8003580:	3601      	adds	r6, #1
 8003582:	e7f2      	b.n	800356a <__libc_init_array+0x1e>
 8003584:	08004114 	.word	0x08004114
 8003588:	08004114 	.word	0x08004114
 800358c:	08004114 	.word	0x08004114
 8003590:	08004118 	.word	0x08004118

08003594 <__retarget_lock_acquire_recursive>:
 8003594:	4770      	bx	lr

08003596 <__retarget_lock_release_recursive>:
 8003596:	4770      	bx	lr

08003598 <memcpy>:
 8003598:	440a      	add	r2, r1
 800359a:	4291      	cmp	r1, r2
 800359c:	f100 33ff 	add.w	r3, r0, #4294967295
 80035a0:	d100      	bne.n	80035a4 <memcpy+0xc>
 80035a2:	4770      	bx	lr
 80035a4:	b510      	push	{r4, lr}
 80035a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035ae:	4291      	cmp	r1, r2
 80035b0:	d1f9      	bne.n	80035a6 <memcpy+0xe>
 80035b2:	bd10      	pop	{r4, pc}

080035b4 <_free_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4605      	mov	r5, r0
 80035b8:	2900      	cmp	r1, #0
 80035ba:	d041      	beq.n	8003640 <_free_r+0x8c>
 80035bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c0:	1f0c      	subs	r4, r1, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bfb8      	it	lt
 80035c6:	18e4      	addlt	r4, r4, r3
 80035c8:	f000 f8e0 	bl	800378c <__malloc_lock>
 80035cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003644 <_free_r+0x90>)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	b933      	cbnz	r3, 80035e0 <_free_r+0x2c>
 80035d2:	6063      	str	r3, [r4, #4]
 80035d4:	6014      	str	r4, [r2, #0]
 80035d6:	4628      	mov	r0, r5
 80035d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035dc:	f000 b8dc 	b.w	8003798 <__malloc_unlock>
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	d908      	bls.n	80035f6 <_free_r+0x42>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	1821      	adds	r1, r4, r0
 80035e8:	428b      	cmp	r3, r1
 80035ea:	bf01      	itttt	eq
 80035ec:	6819      	ldreq	r1, [r3, #0]
 80035ee:	685b      	ldreq	r3, [r3, #4]
 80035f0:	1809      	addeq	r1, r1, r0
 80035f2:	6021      	streq	r1, [r4, #0]
 80035f4:	e7ed      	b.n	80035d2 <_free_r+0x1e>
 80035f6:	461a      	mov	r2, r3
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b10b      	cbz	r3, 8003600 <_free_r+0x4c>
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d9fa      	bls.n	80035f6 <_free_r+0x42>
 8003600:	6811      	ldr	r1, [r2, #0]
 8003602:	1850      	adds	r0, r2, r1
 8003604:	42a0      	cmp	r0, r4
 8003606:	d10b      	bne.n	8003620 <_free_r+0x6c>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	4401      	add	r1, r0
 800360c:	1850      	adds	r0, r2, r1
 800360e:	4283      	cmp	r3, r0
 8003610:	6011      	str	r1, [r2, #0]
 8003612:	d1e0      	bne.n	80035d6 <_free_r+0x22>
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	6053      	str	r3, [r2, #4]
 800361a:	4408      	add	r0, r1
 800361c:	6010      	str	r0, [r2, #0]
 800361e:	e7da      	b.n	80035d6 <_free_r+0x22>
 8003620:	d902      	bls.n	8003628 <_free_r+0x74>
 8003622:	230c      	movs	r3, #12
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	e7d6      	b.n	80035d6 <_free_r+0x22>
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	1821      	adds	r1, r4, r0
 800362c:	428b      	cmp	r3, r1
 800362e:	bf04      	itt	eq
 8003630:	6819      	ldreq	r1, [r3, #0]
 8003632:	685b      	ldreq	r3, [r3, #4]
 8003634:	6063      	str	r3, [r4, #4]
 8003636:	bf04      	itt	eq
 8003638:	1809      	addeq	r1, r1, r0
 800363a:	6021      	streq	r1, [r4, #0]
 800363c:	6054      	str	r4, [r2, #4]
 800363e:	e7ca      	b.n	80035d6 <_free_r+0x22>
 8003640:	bd38      	pop	{r3, r4, r5, pc}
 8003642:	bf00      	nop
 8003644:	20000314 	.word	0x20000314

08003648 <sbrk_aligned>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	4e0f      	ldr	r6, [pc, #60]	@ (8003688 <sbrk_aligned+0x40>)
 800364c:	460c      	mov	r4, r1
 800364e:	6831      	ldr	r1, [r6, #0]
 8003650:	4605      	mov	r5, r0
 8003652:	b911      	cbnz	r1, 800365a <sbrk_aligned+0x12>
 8003654:	f000 fba6 	bl	8003da4 <_sbrk_r>
 8003658:	6030      	str	r0, [r6, #0]
 800365a:	4621      	mov	r1, r4
 800365c:	4628      	mov	r0, r5
 800365e:	f000 fba1 	bl	8003da4 <_sbrk_r>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	d103      	bne.n	800366e <sbrk_aligned+0x26>
 8003666:	f04f 34ff 	mov.w	r4, #4294967295
 800366a:	4620      	mov	r0, r4
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	1cc4      	adds	r4, r0, #3
 8003670:	f024 0403 	bic.w	r4, r4, #3
 8003674:	42a0      	cmp	r0, r4
 8003676:	d0f8      	beq.n	800366a <sbrk_aligned+0x22>
 8003678:	1a21      	subs	r1, r4, r0
 800367a:	4628      	mov	r0, r5
 800367c:	f000 fb92 	bl	8003da4 <_sbrk_r>
 8003680:	3001      	adds	r0, #1
 8003682:	d1f2      	bne.n	800366a <sbrk_aligned+0x22>
 8003684:	e7ef      	b.n	8003666 <sbrk_aligned+0x1e>
 8003686:	bf00      	nop
 8003688:	20000310 	.word	0x20000310

0800368c <_malloc_r>:
 800368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003690:	1ccd      	adds	r5, r1, #3
 8003692:	f025 0503 	bic.w	r5, r5, #3
 8003696:	3508      	adds	r5, #8
 8003698:	2d0c      	cmp	r5, #12
 800369a:	bf38      	it	cc
 800369c:	250c      	movcc	r5, #12
 800369e:	2d00      	cmp	r5, #0
 80036a0:	4606      	mov	r6, r0
 80036a2:	db01      	blt.n	80036a8 <_malloc_r+0x1c>
 80036a4:	42a9      	cmp	r1, r5
 80036a6:	d904      	bls.n	80036b2 <_malloc_r+0x26>
 80036a8:	230c      	movs	r3, #12
 80036aa:	6033      	str	r3, [r6, #0]
 80036ac:	2000      	movs	r0, #0
 80036ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003788 <_malloc_r+0xfc>
 80036b6:	f000 f869 	bl	800378c <__malloc_lock>
 80036ba:	f8d8 3000 	ldr.w	r3, [r8]
 80036be:	461c      	mov	r4, r3
 80036c0:	bb44      	cbnz	r4, 8003714 <_malloc_r+0x88>
 80036c2:	4629      	mov	r1, r5
 80036c4:	4630      	mov	r0, r6
 80036c6:	f7ff ffbf 	bl	8003648 <sbrk_aligned>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	4604      	mov	r4, r0
 80036ce:	d158      	bne.n	8003782 <_malloc_r+0xf6>
 80036d0:	f8d8 4000 	ldr.w	r4, [r8]
 80036d4:	4627      	mov	r7, r4
 80036d6:	2f00      	cmp	r7, #0
 80036d8:	d143      	bne.n	8003762 <_malloc_r+0xd6>
 80036da:	2c00      	cmp	r4, #0
 80036dc:	d04b      	beq.n	8003776 <_malloc_r+0xea>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	4639      	mov	r1, r7
 80036e2:	4630      	mov	r0, r6
 80036e4:	eb04 0903 	add.w	r9, r4, r3
 80036e8:	f000 fb5c 	bl	8003da4 <_sbrk_r>
 80036ec:	4581      	cmp	r9, r0
 80036ee:	d142      	bne.n	8003776 <_malloc_r+0xea>
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	1a6d      	subs	r5, r5, r1
 80036f4:	4629      	mov	r1, r5
 80036f6:	4630      	mov	r0, r6
 80036f8:	f7ff ffa6 	bl	8003648 <sbrk_aligned>
 80036fc:	3001      	adds	r0, #1
 80036fe:	d03a      	beq.n	8003776 <_malloc_r+0xea>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	442b      	add	r3, r5
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	f8d8 3000 	ldr.w	r3, [r8]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	bb62      	cbnz	r2, 8003768 <_malloc_r+0xdc>
 800370e:	f8c8 7000 	str.w	r7, [r8]
 8003712:	e00f      	b.n	8003734 <_malloc_r+0xa8>
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	1b52      	subs	r2, r2, r5
 8003718:	d420      	bmi.n	800375c <_malloc_r+0xd0>
 800371a:	2a0b      	cmp	r2, #11
 800371c:	d917      	bls.n	800374e <_malloc_r+0xc2>
 800371e:	1961      	adds	r1, r4, r5
 8003720:	42a3      	cmp	r3, r4
 8003722:	6025      	str	r5, [r4, #0]
 8003724:	bf18      	it	ne
 8003726:	6059      	strne	r1, [r3, #4]
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	bf08      	it	eq
 800372c:	f8c8 1000 	streq.w	r1, [r8]
 8003730:	5162      	str	r2, [r4, r5]
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	4630      	mov	r0, r6
 8003736:	f000 f82f 	bl	8003798 <__malloc_unlock>
 800373a:	f104 000b 	add.w	r0, r4, #11
 800373e:	1d23      	adds	r3, r4, #4
 8003740:	f020 0007 	bic.w	r0, r0, #7
 8003744:	1ac2      	subs	r2, r0, r3
 8003746:	bf1c      	itt	ne
 8003748:	1a1b      	subne	r3, r3, r0
 800374a:	50a3      	strne	r3, [r4, r2]
 800374c:	e7af      	b.n	80036ae <_malloc_r+0x22>
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	42a3      	cmp	r3, r4
 8003752:	bf0c      	ite	eq
 8003754:	f8c8 2000 	streq.w	r2, [r8]
 8003758:	605a      	strne	r2, [r3, #4]
 800375a:	e7eb      	b.n	8003734 <_malloc_r+0xa8>
 800375c:	4623      	mov	r3, r4
 800375e:	6864      	ldr	r4, [r4, #4]
 8003760:	e7ae      	b.n	80036c0 <_malloc_r+0x34>
 8003762:	463c      	mov	r4, r7
 8003764:	687f      	ldr	r7, [r7, #4]
 8003766:	e7b6      	b.n	80036d6 <_malloc_r+0x4a>
 8003768:	461a      	mov	r2, r3
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	42a3      	cmp	r3, r4
 800376e:	d1fb      	bne.n	8003768 <_malloc_r+0xdc>
 8003770:	2300      	movs	r3, #0
 8003772:	6053      	str	r3, [r2, #4]
 8003774:	e7de      	b.n	8003734 <_malloc_r+0xa8>
 8003776:	230c      	movs	r3, #12
 8003778:	6033      	str	r3, [r6, #0]
 800377a:	4630      	mov	r0, r6
 800377c:	f000 f80c 	bl	8003798 <__malloc_unlock>
 8003780:	e794      	b.n	80036ac <_malloc_r+0x20>
 8003782:	6005      	str	r5, [r0, #0]
 8003784:	e7d6      	b.n	8003734 <_malloc_r+0xa8>
 8003786:	bf00      	nop
 8003788:	20000314 	.word	0x20000314

0800378c <__malloc_lock>:
 800378c:	4801      	ldr	r0, [pc, #4]	@ (8003794 <__malloc_lock+0x8>)
 800378e:	f7ff bf01 	b.w	8003594 <__retarget_lock_acquire_recursive>
 8003792:	bf00      	nop
 8003794:	2000030c 	.word	0x2000030c

08003798 <__malloc_unlock>:
 8003798:	4801      	ldr	r0, [pc, #4]	@ (80037a0 <__malloc_unlock+0x8>)
 800379a:	f7ff befc 	b.w	8003596 <__retarget_lock_release_recursive>
 800379e:	bf00      	nop
 80037a0:	2000030c 	.word	0x2000030c

080037a4 <__ssputs_r>:
 80037a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	688e      	ldr	r6, [r1, #8]
 80037aa:	461f      	mov	r7, r3
 80037ac:	42be      	cmp	r6, r7
 80037ae:	680b      	ldr	r3, [r1, #0]
 80037b0:	4682      	mov	sl, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	4690      	mov	r8, r2
 80037b6:	d82d      	bhi.n	8003814 <__ssputs_r+0x70>
 80037b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80037c0:	d026      	beq.n	8003810 <__ssputs_r+0x6c>
 80037c2:	6965      	ldr	r5, [r4, #20]
 80037c4:	6909      	ldr	r1, [r1, #16]
 80037c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037ca:	eba3 0901 	sub.w	r9, r3, r1
 80037ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037d2:	1c7b      	adds	r3, r7, #1
 80037d4:	444b      	add	r3, r9
 80037d6:	106d      	asrs	r5, r5, #1
 80037d8:	429d      	cmp	r5, r3
 80037da:	bf38      	it	cc
 80037dc:	461d      	movcc	r5, r3
 80037de:	0553      	lsls	r3, r2, #21
 80037e0:	d527      	bpl.n	8003832 <__ssputs_r+0x8e>
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7ff ff52 	bl	800368c <_malloc_r>
 80037e8:	4606      	mov	r6, r0
 80037ea:	b360      	cbz	r0, 8003846 <__ssputs_r+0xa2>
 80037ec:	6921      	ldr	r1, [r4, #16]
 80037ee:	464a      	mov	r2, r9
 80037f0:	f7ff fed2 	bl	8003598 <memcpy>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	6126      	str	r6, [r4, #16]
 8003802:	6165      	str	r5, [r4, #20]
 8003804:	444e      	add	r6, r9
 8003806:	eba5 0509 	sub.w	r5, r5, r9
 800380a:	6026      	str	r6, [r4, #0]
 800380c:	60a5      	str	r5, [r4, #8]
 800380e:	463e      	mov	r6, r7
 8003810:	42be      	cmp	r6, r7
 8003812:	d900      	bls.n	8003816 <__ssputs_r+0x72>
 8003814:	463e      	mov	r6, r7
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	4632      	mov	r2, r6
 800381a:	4641      	mov	r1, r8
 800381c:	f000 faa8 	bl	8003d70 <memmove>
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	1b9b      	subs	r3, r3, r6
 8003824:	60a3      	str	r3, [r4, #8]
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	4433      	add	r3, r6
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	2000      	movs	r0, #0
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003832:	462a      	mov	r2, r5
 8003834:	f000 fac6 	bl	8003dc4 <_realloc_r>
 8003838:	4606      	mov	r6, r0
 800383a:	2800      	cmp	r0, #0
 800383c:	d1e0      	bne.n	8003800 <__ssputs_r+0x5c>
 800383e:	6921      	ldr	r1, [r4, #16]
 8003840:	4650      	mov	r0, sl
 8003842:	f7ff feb7 	bl	80035b4 <_free_r>
 8003846:	230c      	movs	r3, #12
 8003848:	f8ca 3000 	str.w	r3, [sl]
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	e7e9      	b.n	800382e <__ssputs_r+0x8a>
	...

0800385c <_svfiprintf_r>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	4698      	mov	r8, r3
 8003862:	898b      	ldrh	r3, [r1, #12]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	b09d      	sub	sp, #116	@ 0x74
 8003868:	4607      	mov	r7, r0
 800386a:	460d      	mov	r5, r1
 800386c:	4614      	mov	r4, r2
 800386e:	d510      	bpl.n	8003892 <_svfiprintf_r+0x36>
 8003870:	690b      	ldr	r3, [r1, #16]
 8003872:	b973      	cbnz	r3, 8003892 <_svfiprintf_r+0x36>
 8003874:	2140      	movs	r1, #64	@ 0x40
 8003876:	f7ff ff09 	bl	800368c <_malloc_r>
 800387a:	6028      	str	r0, [r5, #0]
 800387c:	6128      	str	r0, [r5, #16]
 800387e:	b930      	cbnz	r0, 800388e <_svfiprintf_r+0x32>
 8003880:	230c      	movs	r3, #12
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	b01d      	add	sp, #116	@ 0x74
 800388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388e:	2340      	movs	r3, #64	@ 0x40
 8003890:	616b      	str	r3, [r5, #20]
 8003892:	2300      	movs	r3, #0
 8003894:	9309      	str	r3, [sp, #36]	@ 0x24
 8003896:	2320      	movs	r3, #32
 8003898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800389c:	f8cd 800c 	str.w	r8, [sp, #12]
 80038a0:	2330      	movs	r3, #48	@ 0x30
 80038a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a40 <_svfiprintf_r+0x1e4>
 80038a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038aa:	f04f 0901 	mov.w	r9, #1
 80038ae:	4623      	mov	r3, r4
 80038b0:	469a      	mov	sl, r3
 80038b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038b6:	b10a      	cbz	r2, 80038bc <_svfiprintf_r+0x60>
 80038b8:	2a25      	cmp	r2, #37	@ 0x25
 80038ba:	d1f9      	bne.n	80038b0 <_svfiprintf_r+0x54>
 80038bc:	ebba 0b04 	subs.w	fp, sl, r4
 80038c0:	d00b      	beq.n	80038da <_svfiprintf_r+0x7e>
 80038c2:	465b      	mov	r3, fp
 80038c4:	4622      	mov	r2, r4
 80038c6:	4629      	mov	r1, r5
 80038c8:	4638      	mov	r0, r7
 80038ca:	f7ff ff6b 	bl	80037a4 <__ssputs_r>
 80038ce:	3001      	adds	r0, #1
 80038d0:	f000 80a7 	beq.w	8003a22 <_svfiprintf_r+0x1c6>
 80038d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038d6:	445a      	add	r2, fp
 80038d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80038da:	f89a 3000 	ldrb.w	r3, [sl]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 809f 	beq.w	8003a22 <_svfiprintf_r+0x1c6>
 80038e4:	2300      	movs	r3, #0
 80038e6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038ee:	f10a 0a01 	add.w	sl, sl, #1
 80038f2:	9304      	str	r3, [sp, #16]
 80038f4:	9307      	str	r3, [sp, #28]
 80038f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80038fc:	4654      	mov	r4, sl
 80038fe:	2205      	movs	r2, #5
 8003900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003904:	484e      	ldr	r0, [pc, #312]	@ (8003a40 <_svfiprintf_r+0x1e4>)
 8003906:	f7fc fc8b 	bl	8000220 <memchr>
 800390a:	9a04      	ldr	r2, [sp, #16]
 800390c:	b9d8      	cbnz	r0, 8003946 <_svfiprintf_r+0xea>
 800390e:	06d0      	lsls	r0, r2, #27
 8003910:	bf44      	itt	mi
 8003912:	2320      	movmi	r3, #32
 8003914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003918:	0711      	lsls	r1, r2, #28
 800391a:	bf44      	itt	mi
 800391c:	232b      	movmi	r3, #43	@ 0x2b
 800391e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003922:	f89a 3000 	ldrb.w	r3, [sl]
 8003926:	2b2a      	cmp	r3, #42	@ 0x2a
 8003928:	d015      	beq.n	8003956 <_svfiprintf_r+0xfa>
 800392a:	9a07      	ldr	r2, [sp, #28]
 800392c:	4654      	mov	r4, sl
 800392e:	2000      	movs	r0, #0
 8003930:	f04f 0c0a 	mov.w	ip, #10
 8003934:	4621      	mov	r1, r4
 8003936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800393a:	3b30      	subs	r3, #48	@ 0x30
 800393c:	2b09      	cmp	r3, #9
 800393e:	d94b      	bls.n	80039d8 <_svfiprintf_r+0x17c>
 8003940:	b1b0      	cbz	r0, 8003970 <_svfiprintf_r+0x114>
 8003942:	9207      	str	r2, [sp, #28]
 8003944:	e014      	b.n	8003970 <_svfiprintf_r+0x114>
 8003946:	eba0 0308 	sub.w	r3, r0, r8
 800394a:	fa09 f303 	lsl.w	r3, r9, r3
 800394e:	4313      	orrs	r3, r2
 8003950:	9304      	str	r3, [sp, #16]
 8003952:	46a2      	mov	sl, r4
 8003954:	e7d2      	b.n	80038fc <_svfiprintf_r+0xa0>
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	1d19      	adds	r1, r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	9103      	str	r1, [sp, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfbb      	ittet	lt
 8003962:	425b      	neglt	r3, r3
 8003964:	f042 0202 	orrlt.w	r2, r2, #2
 8003968:	9307      	strge	r3, [sp, #28]
 800396a:	9307      	strlt	r3, [sp, #28]
 800396c:	bfb8      	it	lt
 800396e:	9204      	strlt	r2, [sp, #16]
 8003970:	7823      	ldrb	r3, [r4, #0]
 8003972:	2b2e      	cmp	r3, #46	@ 0x2e
 8003974:	d10a      	bne.n	800398c <_svfiprintf_r+0x130>
 8003976:	7863      	ldrb	r3, [r4, #1]
 8003978:	2b2a      	cmp	r3, #42	@ 0x2a
 800397a:	d132      	bne.n	80039e2 <_svfiprintf_r+0x186>
 800397c:	9b03      	ldr	r3, [sp, #12]
 800397e:	1d1a      	adds	r2, r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	9203      	str	r2, [sp, #12]
 8003984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003988:	3402      	adds	r4, #2
 800398a:	9305      	str	r3, [sp, #20]
 800398c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003a50 <_svfiprintf_r+0x1f4>
 8003990:	7821      	ldrb	r1, [r4, #0]
 8003992:	2203      	movs	r2, #3
 8003994:	4650      	mov	r0, sl
 8003996:	f7fc fc43 	bl	8000220 <memchr>
 800399a:	b138      	cbz	r0, 80039ac <_svfiprintf_r+0x150>
 800399c:	9b04      	ldr	r3, [sp, #16]
 800399e:	eba0 000a 	sub.w	r0, r0, sl
 80039a2:	2240      	movs	r2, #64	@ 0x40
 80039a4:	4082      	lsls	r2, r0
 80039a6:	4313      	orrs	r3, r2
 80039a8:	3401      	adds	r4, #1
 80039aa:	9304      	str	r3, [sp, #16]
 80039ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b0:	4824      	ldr	r0, [pc, #144]	@ (8003a44 <_svfiprintf_r+0x1e8>)
 80039b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80039b6:	2206      	movs	r2, #6
 80039b8:	f7fc fc32 	bl	8000220 <memchr>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d036      	beq.n	8003a2e <_svfiprintf_r+0x1d2>
 80039c0:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <_svfiprintf_r+0x1ec>)
 80039c2:	bb1b      	cbnz	r3, 8003a0c <_svfiprintf_r+0x1b0>
 80039c4:	9b03      	ldr	r3, [sp, #12]
 80039c6:	3307      	adds	r3, #7
 80039c8:	f023 0307 	bic.w	r3, r3, #7
 80039cc:	3308      	adds	r3, #8
 80039ce:	9303      	str	r3, [sp, #12]
 80039d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039d2:	4433      	add	r3, r6
 80039d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80039d6:	e76a      	b.n	80038ae <_svfiprintf_r+0x52>
 80039d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80039dc:	460c      	mov	r4, r1
 80039de:	2001      	movs	r0, #1
 80039e0:	e7a8      	b.n	8003934 <_svfiprintf_r+0xd8>
 80039e2:	2300      	movs	r3, #0
 80039e4:	3401      	adds	r4, #1
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	4619      	mov	r1, r3
 80039ea:	f04f 0c0a 	mov.w	ip, #10
 80039ee:	4620      	mov	r0, r4
 80039f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039f4:	3a30      	subs	r2, #48	@ 0x30
 80039f6:	2a09      	cmp	r2, #9
 80039f8:	d903      	bls.n	8003a02 <_svfiprintf_r+0x1a6>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0c6      	beq.n	800398c <_svfiprintf_r+0x130>
 80039fe:	9105      	str	r1, [sp, #20]
 8003a00:	e7c4      	b.n	800398c <_svfiprintf_r+0x130>
 8003a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a06:	4604      	mov	r4, r0
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e7f0      	b.n	80039ee <_svfiprintf_r+0x192>
 8003a0c:	ab03      	add	r3, sp, #12
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	462a      	mov	r2, r5
 8003a12:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <_svfiprintf_r+0x1f0>)
 8003a14:	a904      	add	r1, sp, #16
 8003a16:	4638      	mov	r0, r7
 8003a18:	f3af 8000 	nop.w
 8003a1c:	1c42      	adds	r2, r0, #1
 8003a1e:	4606      	mov	r6, r0
 8003a20:	d1d6      	bne.n	80039d0 <_svfiprintf_r+0x174>
 8003a22:	89ab      	ldrh	r3, [r5, #12]
 8003a24:	065b      	lsls	r3, r3, #25
 8003a26:	f53f af2d 	bmi.w	8003884 <_svfiprintf_r+0x28>
 8003a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a2c:	e72c      	b.n	8003888 <_svfiprintf_r+0x2c>
 8003a2e:	ab03      	add	r3, sp, #12
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	462a      	mov	r2, r5
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <_svfiprintf_r+0x1f0>)
 8003a36:	a904      	add	r1, sp, #16
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f000 f879 	bl	8003b30 <_printf_i>
 8003a3e:	e7ed      	b.n	8003a1c <_svfiprintf_r+0x1c0>
 8003a40:	080040d8 	.word	0x080040d8
 8003a44:	080040e2 	.word	0x080040e2
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	080037a5 	.word	0x080037a5
 8003a50:	080040de 	.word	0x080040de

08003a54 <_printf_common>:
 8003a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	4616      	mov	r6, r2
 8003a5a:	4698      	mov	r8, r3
 8003a5c:	688a      	ldr	r2, [r1, #8]
 8003a5e:	690b      	ldr	r3, [r1, #16]
 8003a60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a64:	4293      	cmp	r3, r2
 8003a66:	bfb8      	it	lt
 8003a68:	4613      	movlt	r3, r2
 8003a6a:	6033      	str	r3, [r6, #0]
 8003a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a70:	4607      	mov	r7, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	b10a      	cbz	r2, 8003a7a <_printf_common+0x26>
 8003a76:	3301      	adds	r3, #1
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	0699      	lsls	r1, r3, #26
 8003a7e:	bf42      	ittt	mi
 8003a80:	6833      	ldrmi	r3, [r6, #0]
 8003a82:	3302      	addmi	r3, #2
 8003a84:	6033      	strmi	r3, [r6, #0]
 8003a86:	6825      	ldr	r5, [r4, #0]
 8003a88:	f015 0506 	ands.w	r5, r5, #6
 8003a8c:	d106      	bne.n	8003a9c <_printf_common+0x48>
 8003a8e:	f104 0a19 	add.w	sl, r4, #25
 8003a92:	68e3      	ldr	r3, [r4, #12]
 8003a94:	6832      	ldr	r2, [r6, #0]
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	42ab      	cmp	r3, r5
 8003a9a:	dc26      	bgt.n	8003aea <_printf_common+0x96>
 8003a9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	3b00      	subs	r3, #0
 8003aa4:	bf18      	it	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	0692      	lsls	r2, r2, #26
 8003aaa:	d42b      	bmi.n	8003b04 <_printf_common+0xb0>
 8003aac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	47c8      	blx	r9
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d01e      	beq.n	8003af8 <_printf_common+0xa4>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	6922      	ldr	r2, [r4, #16]
 8003abe:	f003 0306 	and.w	r3, r3, #6
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	bf02      	ittt	eq
 8003ac6:	68e5      	ldreq	r5, [r4, #12]
 8003ac8:	6833      	ldreq	r3, [r6, #0]
 8003aca:	1aed      	subeq	r5, r5, r3
 8003acc:	68a3      	ldr	r3, [r4, #8]
 8003ace:	bf0c      	ite	eq
 8003ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad4:	2500      	movne	r5, #0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	bfc4      	itt	gt
 8003ada:	1a9b      	subgt	r3, r3, r2
 8003adc:	18ed      	addgt	r5, r5, r3
 8003ade:	2600      	movs	r6, #0
 8003ae0:	341a      	adds	r4, #26
 8003ae2:	42b5      	cmp	r5, r6
 8003ae4:	d11a      	bne.n	8003b1c <_printf_common+0xc8>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e008      	b.n	8003afc <_printf_common+0xa8>
 8003aea:	2301      	movs	r3, #1
 8003aec:	4652      	mov	r2, sl
 8003aee:	4641      	mov	r1, r8
 8003af0:	4638      	mov	r0, r7
 8003af2:	47c8      	blx	r9
 8003af4:	3001      	adds	r0, #1
 8003af6:	d103      	bne.n	8003b00 <_printf_common+0xac>
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7c6      	b.n	8003a92 <_printf_common+0x3e>
 8003b04:	18e1      	adds	r1, r4, r3
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	2030      	movs	r0, #48	@ 0x30
 8003b0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b0e:	4422      	add	r2, r4
 8003b10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b18:	3302      	adds	r3, #2
 8003b1a:	e7c7      	b.n	8003aac <_printf_common+0x58>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4622      	mov	r2, r4
 8003b20:	4641      	mov	r1, r8
 8003b22:	4638      	mov	r0, r7
 8003b24:	47c8      	blx	r9
 8003b26:	3001      	adds	r0, #1
 8003b28:	d0e6      	beq.n	8003af8 <_printf_common+0xa4>
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7d9      	b.n	8003ae2 <_printf_common+0x8e>
	...

08003b30 <_printf_i>:
 8003b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	7e0f      	ldrb	r7, [r1, #24]
 8003b36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b38:	2f78      	cmp	r7, #120	@ 0x78
 8003b3a:	4691      	mov	r9, r2
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	469a      	mov	sl, r3
 8003b42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b46:	d807      	bhi.n	8003b58 <_printf_i+0x28>
 8003b48:	2f62      	cmp	r7, #98	@ 0x62
 8003b4a:	d80a      	bhi.n	8003b62 <_printf_i+0x32>
 8003b4c:	2f00      	cmp	r7, #0
 8003b4e:	f000 80d2 	beq.w	8003cf6 <_printf_i+0x1c6>
 8003b52:	2f58      	cmp	r7, #88	@ 0x58
 8003b54:	f000 80b9 	beq.w	8003cca <_printf_i+0x19a>
 8003b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b60:	e03a      	b.n	8003bd8 <_printf_i+0xa8>
 8003b62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b66:	2b15      	cmp	r3, #21
 8003b68:	d8f6      	bhi.n	8003b58 <_printf_i+0x28>
 8003b6a:	a101      	add	r1, pc, #4	@ (adr r1, 8003b70 <_printf_i+0x40>)
 8003b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b70:	08003bc9 	.word	0x08003bc9
 8003b74:	08003bdd 	.word	0x08003bdd
 8003b78:	08003b59 	.word	0x08003b59
 8003b7c:	08003b59 	.word	0x08003b59
 8003b80:	08003b59 	.word	0x08003b59
 8003b84:	08003b59 	.word	0x08003b59
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003b59 	.word	0x08003b59
 8003b90:	08003b59 	.word	0x08003b59
 8003b94:	08003b59 	.word	0x08003b59
 8003b98:	08003b59 	.word	0x08003b59
 8003b9c:	08003cdd 	.word	0x08003cdd
 8003ba0:	08003c07 	.word	0x08003c07
 8003ba4:	08003c97 	.word	0x08003c97
 8003ba8:	08003b59 	.word	0x08003b59
 8003bac:	08003b59 	.word	0x08003b59
 8003bb0:	08003cff 	.word	0x08003cff
 8003bb4:	08003b59 	.word	0x08003b59
 8003bb8:	08003c07 	.word	0x08003c07
 8003bbc:	08003b59 	.word	0x08003b59
 8003bc0:	08003b59 	.word	0x08003b59
 8003bc4:	08003c9f 	.word	0x08003c9f
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6032      	str	r2, [r6, #0]
 8003bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e09d      	b.n	8003d18 <_printf_i+0x1e8>
 8003bdc:	6833      	ldr	r3, [r6, #0]
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	1d19      	adds	r1, r3, #4
 8003be2:	6031      	str	r1, [r6, #0]
 8003be4:	0606      	lsls	r6, r0, #24
 8003be6:	d501      	bpl.n	8003bec <_printf_i+0xbc>
 8003be8:	681d      	ldr	r5, [r3, #0]
 8003bea:	e003      	b.n	8003bf4 <_printf_i+0xc4>
 8003bec:	0645      	lsls	r5, r0, #25
 8003bee:	d5fb      	bpl.n	8003be8 <_printf_i+0xb8>
 8003bf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	da03      	bge.n	8003c00 <_printf_i+0xd0>
 8003bf8:	232d      	movs	r3, #45	@ 0x2d
 8003bfa:	426d      	negs	r5, r5
 8003bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c00:	4859      	ldr	r0, [pc, #356]	@ (8003d68 <_printf_i+0x238>)
 8003c02:	230a      	movs	r3, #10
 8003c04:	e011      	b.n	8003c2a <_printf_i+0xfa>
 8003c06:	6821      	ldr	r1, [r4, #0]
 8003c08:	6833      	ldr	r3, [r6, #0]
 8003c0a:	0608      	lsls	r0, r1, #24
 8003c0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c10:	d402      	bmi.n	8003c18 <_printf_i+0xe8>
 8003c12:	0649      	lsls	r1, r1, #25
 8003c14:	bf48      	it	mi
 8003c16:	b2ad      	uxthmi	r5, r5
 8003c18:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c1a:	4853      	ldr	r0, [pc, #332]	@ (8003d68 <_printf_i+0x238>)
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	bf14      	ite	ne
 8003c20:	230a      	movne	r3, #10
 8003c22:	2308      	moveq	r3, #8
 8003c24:	2100      	movs	r1, #0
 8003c26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c2a:	6866      	ldr	r6, [r4, #4]
 8003c2c:	60a6      	str	r6, [r4, #8]
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	bfa2      	ittt	ge
 8003c32:	6821      	ldrge	r1, [r4, #0]
 8003c34:	f021 0104 	bicge.w	r1, r1, #4
 8003c38:	6021      	strge	r1, [r4, #0]
 8003c3a:	b90d      	cbnz	r5, 8003c40 <_printf_i+0x110>
 8003c3c:	2e00      	cmp	r6, #0
 8003c3e:	d04b      	beq.n	8003cd8 <_printf_i+0x1a8>
 8003c40:	4616      	mov	r6, r2
 8003c42:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c46:	fb03 5711 	mls	r7, r3, r1, r5
 8003c4a:	5dc7      	ldrb	r7, [r0, r7]
 8003c4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c50:	462f      	mov	r7, r5
 8003c52:	42bb      	cmp	r3, r7
 8003c54:	460d      	mov	r5, r1
 8003c56:	d9f4      	bls.n	8003c42 <_printf_i+0x112>
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d10b      	bne.n	8003c74 <_printf_i+0x144>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	07df      	lsls	r7, r3, #31
 8003c60:	d508      	bpl.n	8003c74 <_printf_i+0x144>
 8003c62:	6923      	ldr	r3, [r4, #16]
 8003c64:	6861      	ldr	r1, [r4, #4]
 8003c66:	4299      	cmp	r1, r3
 8003c68:	bfde      	ittt	le
 8003c6a:	2330      	movle	r3, #48	@ 0x30
 8003c6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c74:	1b92      	subs	r2, r2, r6
 8003c76:	6122      	str	r2, [r4, #16]
 8003c78:	f8cd a000 	str.w	sl, [sp]
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	aa03      	add	r2, sp, #12
 8003c80:	4621      	mov	r1, r4
 8003c82:	4640      	mov	r0, r8
 8003c84:	f7ff fee6 	bl	8003a54 <_printf_common>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d14a      	bne.n	8003d22 <_printf_i+0x1f2>
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	b004      	add	sp, #16
 8003c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	f043 0320 	orr.w	r3, r3, #32
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	4833      	ldr	r0, [pc, #204]	@ (8003d6c <_printf_i+0x23c>)
 8003ca0:	2778      	movs	r7, #120	@ 0x78
 8003ca2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	6831      	ldr	r1, [r6, #0]
 8003caa:	061f      	lsls	r7, r3, #24
 8003cac:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cb0:	d402      	bmi.n	8003cb8 <_printf_i+0x188>
 8003cb2:	065f      	lsls	r7, r3, #25
 8003cb4:	bf48      	it	mi
 8003cb6:	b2ad      	uxthmi	r5, r5
 8003cb8:	6031      	str	r1, [r6, #0]
 8003cba:	07d9      	lsls	r1, r3, #31
 8003cbc:	bf44      	itt	mi
 8003cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc2:	6023      	strmi	r3, [r4, #0]
 8003cc4:	b11d      	cbz	r5, 8003cce <_printf_i+0x19e>
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	e7ac      	b.n	8003c24 <_printf_i+0xf4>
 8003cca:	4827      	ldr	r0, [pc, #156]	@ (8003d68 <_printf_i+0x238>)
 8003ccc:	e7e9      	b.n	8003ca2 <_printf_i+0x172>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f023 0320 	bic.w	r3, r3, #32
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	e7f6      	b.n	8003cc6 <_printf_i+0x196>
 8003cd8:	4616      	mov	r6, r2
 8003cda:	e7bd      	b.n	8003c58 <_printf_i+0x128>
 8003cdc:	6833      	ldr	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	6961      	ldr	r1, [r4, #20]
 8003ce2:	1d18      	adds	r0, r3, #4
 8003ce4:	6030      	str	r0, [r6, #0]
 8003ce6:	062e      	lsls	r6, r5, #24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	d501      	bpl.n	8003cf0 <_printf_i+0x1c0>
 8003cec:	6019      	str	r1, [r3, #0]
 8003cee:	e002      	b.n	8003cf6 <_printf_i+0x1c6>
 8003cf0:	0668      	lsls	r0, r5, #25
 8003cf2:	d5fb      	bpl.n	8003cec <_printf_i+0x1bc>
 8003cf4:	8019      	strh	r1, [r3, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	4616      	mov	r6, r2
 8003cfc:	e7bc      	b.n	8003c78 <_printf_i+0x148>
 8003cfe:	6833      	ldr	r3, [r6, #0]
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	6032      	str	r2, [r6, #0]
 8003d04:	681e      	ldr	r6, [r3, #0]
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f7fc fa88 	bl	8000220 <memchr>
 8003d10:	b108      	cbz	r0, 8003d16 <_printf_i+0x1e6>
 8003d12:	1b80      	subs	r0, r0, r6
 8003d14:	6060      	str	r0, [r4, #4]
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	6123      	str	r3, [r4, #16]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d20:	e7aa      	b.n	8003c78 <_printf_i+0x148>
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	4632      	mov	r2, r6
 8003d26:	4649      	mov	r1, r9
 8003d28:	4640      	mov	r0, r8
 8003d2a:	47d0      	blx	sl
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d0ad      	beq.n	8003c8c <_printf_i+0x15c>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	079b      	lsls	r3, r3, #30
 8003d34:	d413      	bmi.n	8003d5e <_printf_i+0x22e>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	4298      	cmp	r0, r3
 8003d3c:	bfb8      	it	lt
 8003d3e:	4618      	movlt	r0, r3
 8003d40:	e7a6      	b.n	8003c90 <_printf_i+0x160>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4632      	mov	r2, r6
 8003d46:	4649      	mov	r1, r9
 8003d48:	4640      	mov	r0, r8
 8003d4a:	47d0      	blx	sl
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d09d      	beq.n	8003c8c <_printf_i+0x15c>
 8003d50:	3501      	adds	r5, #1
 8003d52:	68e3      	ldr	r3, [r4, #12]
 8003d54:	9903      	ldr	r1, [sp, #12]
 8003d56:	1a5b      	subs	r3, r3, r1
 8003d58:	42ab      	cmp	r3, r5
 8003d5a:	dcf2      	bgt.n	8003d42 <_printf_i+0x212>
 8003d5c:	e7eb      	b.n	8003d36 <_printf_i+0x206>
 8003d5e:	2500      	movs	r5, #0
 8003d60:	f104 0619 	add.w	r6, r4, #25
 8003d64:	e7f5      	b.n	8003d52 <_printf_i+0x222>
 8003d66:	bf00      	nop
 8003d68:	080040e9 	.word	0x080040e9
 8003d6c:	080040fa 	.word	0x080040fa

08003d70 <memmove>:
 8003d70:	4288      	cmp	r0, r1
 8003d72:	b510      	push	{r4, lr}
 8003d74:	eb01 0402 	add.w	r4, r1, r2
 8003d78:	d902      	bls.n	8003d80 <memmove+0x10>
 8003d7a:	4284      	cmp	r4, r0
 8003d7c:	4623      	mov	r3, r4
 8003d7e:	d807      	bhi.n	8003d90 <memmove+0x20>
 8003d80:	1e43      	subs	r3, r0, #1
 8003d82:	42a1      	cmp	r1, r4
 8003d84:	d008      	beq.n	8003d98 <memmove+0x28>
 8003d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d8e:	e7f8      	b.n	8003d82 <memmove+0x12>
 8003d90:	4402      	add	r2, r0
 8003d92:	4601      	mov	r1, r0
 8003d94:	428a      	cmp	r2, r1
 8003d96:	d100      	bne.n	8003d9a <memmove+0x2a>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003da2:	e7f7      	b.n	8003d94 <memmove+0x24>

08003da4 <_sbrk_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4d06      	ldr	r5, [pc, #24]	@ (8003dc0 <_sbrk_r+0x1c>)
 8003da8:	2300      	movs	r3, #0
 8003daa:	4604      	mov	r4, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	f7fd fdc6 	bl	8001940 <_sbrk>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d102      	bne.n	8003dbe <_sbrk_r+0x1a>
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	b103      	cbz	r3, 8003dbe <_sbrk_r+0x1a>
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
 8003dc0:	20000308 	.word	0x20000308

08003dc4 <_realloc_r>:
 8003dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc8:	4680      	mov	r8, r0
 8003dca:	4615      	mov	r5, r2
 8003dcc:	460c      	mov	r4, r1
 8003dce:	b921      	cbnz	r1, 8003dda <_realloc_r+0x16>
 8003dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	f7ff bc59 	b.w	800368c <_malloc_r>
 8003dda:	b92a      	cbnz	r2, 8003de8 <_realloc_r+0x24>
 8003ddc:	f7ff fbea 	bl	80035b4 <_free_r>
 8003de0:	2400      	movs	r4, #0
 8003de2:	4620      	mov	r0, r4
 8003de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de8:	f000 f81a 	bl	8003e20 <_malloc_usable_size_r>
 8003dec:	4285      	cmp	r5, r0
 8003dee:	4606      	mov	r6, r0
 8003df0:	d802      	bhi.n	8003df8 <_realloc_r+0x34>
 8003df2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003df6:	d8f4      	bhi.n	8003de2 <_realloc_r+0x1e>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff fc46 	bl	800368c <_malloc_r>
 8003e00:	4607      	mov	r7, r0
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d0ec      	beq.n	8003de0 <_realloc_r+0x1c>
 8003e06:	42b5      	cmp	r5, r6
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	bf28      	it	cs
 8003e0e:	4632      	movcs	r2, r6
 8003e10:	f7ff fbc2 	bl	8003598 <memcpy>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4640      	mov	r0, r8
 8003e18:	f7ff fbcc 	bl	80035b4 <_free_r>
 8003e1c:	463c      	mov	r4, r7
 8003e1e:	e7e0      	b.n	8003de2 <_realloc_r+0x1e>

08003e20 <_malloc_usable_size_r>:
 8003e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e24:	1f18      	subs	r0, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bfbc      	itt	lt
 8003e2a:	580b      	ldrlt	r3, [r1, r0]
 8003e2c:	18c0      	addlt	r0, r0, r3
 8003e2e:	4770      	bx	lr

08003e30 <_init>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr

08003e3c <_fini>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr
