
crypto-benchmark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005498  08005498  00006498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c0  080055c0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080055c0  080055c0  000065c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c8  080055c8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080055d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000005c  0800562c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800562c  00007430  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000954e  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d86  00000000  00000000  000105d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00012360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e4  00000000  00000000  00012b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222fc  00000000  00000000  0001311c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3cc  00000000  00000000  00035418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafd1  00000000  00000000  000427e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0010d7b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  0010d87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0010fb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005480 	.word	0x08005480

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005480 	.word	0x08005480

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_CRC_Init+0x20>)
 80005b6:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <MX_CRC_Init+0x24>)
 80005b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <MX_CRC_Init+0x20>)
 80005bc:	f000 fcef 	bl	8000f9e <HAL_CRC_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005c6:	f000 fa67 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000078 	.word	0x20000078
 80005d4:	40023000 	.word	0x40023000

080005d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <HAL_CRC_MspInit+0x38>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10d      	bne.n	8000606 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_CRC_MspInit+0x3c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <HAL_CRC_MspInit+0x3c>)
 80005f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_CRC_MspInit+0x3c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40023000 	.word	0x40023000
 8000614:	40023800 	.word	0x40023800

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	@ 0x28
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a2c      	ldr	r2, [pc, #176]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a25      	ldr	r2, [pc, #148]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_GPIO_Init+0xd0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2120      	movs	r1, #32
 80006a2:	4812      	ldr	r0, [pc, #72]	@ (80006ec <MX_GPIO_Init+0xd4>)
 80006a4:	f000 fe2a 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_GPIO_Init+0xd8>)
 80006c0:	f000 fc8a 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c4:	2320      	movs	r3, #32
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_GPIO_Init+0xd4>)
 80006dc:	f000 fc7c 	bl	8000fd8 <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020800 	.word	0x40020800

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	@ 0x58
 80006f8:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  int32_t status = AES_SUCCESS;
 80006fa:	2300      	movs	r3, #0
 80006fc:	643b      	str	r3, [r7, #64]	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fafd 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f891 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f7ff ff87 	bl	8000618 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800070a:	f000 fa5b 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800070e:	f7ff ff4f 	bl	80005b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"Piotr Slawecki & Jan Chyczynski - Crypto Alg test for STM32F446:\n\r", strlen("Piotr Slawecki & Jan Chyczynski - Crypto Alg test for STM32F446:\n\r"), 100);
 8000712:	2364      	movs	r3, #100	@ 0x64
 8000714:	2242      	movs	r2, #66	@ 0x42
 8000716:	4938      	ldr	r1, [pc, #224]	@ (80007f8 <main+0x104>)
 8000718:	4838      	ldr	r0, [pc, #224]	@ (80007fc <main+0x108>)
 800071a:	f001 fc97 	bl	800204c <HAL_UART_Transmit>
  HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
#endif

#ifdef USE_CHACHA
  status = CHACHA20POLY1305_SUCCESS; /* Status */
 800071e:	2300      	movs	r3, #0
 8000720:	643b      	str	r3, [r7, #64]	@ 0x40
  start_millis = HAL_GetTick();
 8000722:	f000 fb4f 	bl	8000dc4 <HAL_GetTick>
 8000726:	63f8      	str	r0, [r7, #60]	@ 0x3c
  for(int i = 0; i < 50000; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
 800072c:	e03f      	b.n	80007ae <main+0xba>
  	status = STM32_ChaChaPoly_Encrypt(aad, sizeof(aad), input, sizeof(input), key, nonce, outputBuffer_enc);
 800072e:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <main+0x10c>)
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <main+0x110>)
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <main+0x114>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2310      	movs	r3, #16
 800073c:	4a33      	ldr	r2, [pc, #204]	@ (800080c <main+0x118>)
 800073e:	210c      	movs	r1, #12
 8000740:	4833      	ldr	r0, [pc, #204]	@ (8000810 <main+0x11c>)
 8000742:	f000 f8e3 	bl	800090c <STM32_ChaChaPoly_Encrypt>
 8000746:	6438      	str	r0, [r7, #64]	@ 0x40

    if (status == CHACHA20POLY1305_SUCCESS)
 8000748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800074a:	2b00      	cmp	r3, #0
 800074c:	d007      	beq.n	800075e <main+0x6a>
//        Error_Handler();
//      }
    }
    else
    {
      HAL_UART_Transmit(&huart2, (uint8_t *)"Error\n\r", strlen("Error\n\r"), 100);
 800074e:	2364      	movs	r3, #100	@ 0x64
 8000750:	2207      	movs	r2, #7
 8000752:	4930      	ldr	r1, [pc, #192]	@ (8000814 <main+0x120>)
 8000754:	4829      	ldr	r0, [pc, #164]	@ (80007fc <main+0x108>)
 8000756:	f001 fc79 	bl	800204c <HAL_UART_Transmit>
      Error_Handler();
 800075a:	f000 f99d 	bl	8000a98 <Error_Handler>

    }


    status = STM32_ChaChaPoly_Decrypt(aad, sizeof(aad), outputBuffer_enc, sizeof(outputBuffer_enc), key, nonce, outputBuffer_dec, rfc_tag);
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <main+0x124>)
 8000760:	9303      	str	r3, [sp, #12]
 8000762:	4b2e      	ldr	r3, [pc, #184]	@ (800081c <main+0x128>)
 8000764:	9302      	str	r3, [sp, #8]
 8000766:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <main+0x110>)
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <main+0x114>)
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	f240 1309 	movw	r3, #265	@ 0x109
 8000772:	4a23      	ldr	r2, [pc, #140]	@ (8000800 <main+0x10c>)
 8000774:	210c      	movs	r1, #12
 8000776:	4826      	ldr	r0, [pc, #152]	@ (8000810 <main+0x11c>)
 8000778:	f000 f91b 	bl	80009b2 <STM32_ChaChaPoly_Decrypt>
 800077c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (status == AUTHENTICATION_SUCCESSFUL)
 800077e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000780:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8000784:	4293      	cmp	r3, r2
 8000786:	d10f      	bne.n	80007a8 <main+0xb4>
    {

      /* Function returned AUTHENTICATION_SUCCESSFUL */
      /* Checking Decrypted text with expected value */
      if (Buffercmp(input, outputBuffer_dec, sizeof(input)) == PASSED)
 8000788:	2210      	movs	r2, #16
 800078a:	4924      	ldr	r1, [pc, #144]	@ (800081c <main+0x128>)
 800078c:	481f      	ldr	r0, [pc, #124]	@ (800080c <main+0x118>)
 800078e:	f000 f962 	bl	8000a56 <Buffercmp>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d007      	beq.n	80007a8 <main+0xb4>
      {
        /* add application traitment in case of CHACHA20-POLY1305 success */
      }
      else
      {
    	HAL_UART_Transmit(&huart2, (uint8_t *)"Error\n\r", strlen("Error\n\r"), 100);
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	2207      	movs	r2, #7
 800079c:	491d      	ldr	r1, [pc, #116]	@ (8000814 <main+0x120>)
 800079e:	4817      	ldr	r0, [pc, #92]	@ (80007fc <main+0x108>)
 80007a0:	f001 fc54 	bl	800204c <HAL_UART_Transmit>
        Error_Handler();
 80007a4:	f000 f978 	bl	8000a98 <Error_Handler>
  for(int i = 0; i < 50000; i++) {
 80007a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007aa:	3301      	adds	r3, #1
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80007ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007b0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80007b4:	4293      	cmp	r3, r2
 80007b6:	ddba      	ble.n	800072e <main+0x3a>
    {

      //Error_Handler();
    }
  }
  stop_millis = HAL_GetTick();
 80007b8:	f000 fb04 	bl	8000dc4 <HAL_GetTick>
 80007bc:	63b8      	str	r0, [r7, #56]	@ 0x38
  result = stop_millis - start_millis;
 80007be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80007c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sprintf(buff, "Elapsed (CryptoLib ChaCha20-Poly1305 50k ops): %ld\n\r", result);
 80007c6:	463b      	mov	r3, r7
 80007c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ca:	4915      	ldr	r1, [pc, #84]	@ (8000820 <main+0x12c>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 f9b7 	bl	8004b40 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 100);
 80007d2:	463b      	mov	r3, r7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd1b 	bl	8000210 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4639      	mov	r1, r7
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <main+0x108>)
 80007e4:	f001 fc32 	bl	800204c <HAL_UART_Transmit>
    /* Turn on the green led in case of ARC4 operations are successful*/
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2120      	movs	r1, #32
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <main+0x130>)
 80007ee:	f000 fd85 	bl	80012fc <HAL_GPIO_WritePin>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <main+0xfe>
 80007f6:	bf00      	nop
 80007f8:	08005498 	.word	0x08005498
 80007fc:	2000029c 	.word	0x2000029c
 8000800:	20000080 	.word	0x20000080
 8000804:	0800553c 	.word	0x0800553c
 8000808:	0800551c 	.word	0x0800551c
 800080c:	08005548 	.word	0x08005548
 8000810:	08005558 	.word	0x08005558
 8000814:	080054dc 	.word	0x080054dc
 8000818:	08005564 	.word	0x08005564
 800081c:	2000018c 	.word	0x2000018c
 8000820:	080054e4 	.word	0x080054e4
 8000824:	40020000 	.word	0x40020000

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	@ 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2234      	movs	r2, #52	@ 0x34
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 f9bc 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <SystemClock_Config+0xdc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a2b      	ldr	r2, [pc, #172]	@ (8000904 <SystemClock_Config+0xdc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
 800085c:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <SystemClock_Config+0xdc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <SystemClock_Config+0xe0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a25      	ldr	r2, [pc, #148]	@ (8000908 <SystemClock_Config+0xe0>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <SystemClock_Config+0xe0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000896:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800089c:	23b4      	movs	r3, #180	@ 0xb4
 800089e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f8dd 	bl	8001a70 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008bc:	f000 f8ec 	bl	8000a98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c0:	f000 fd34 	bl	800132c <HAL_PWREx_EnableOverDrive>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ca:	f000 f8e5 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2302      	movs	r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2105      	movs	r1, #5
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fd6d 	bl	80013cc <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f8:	f000 f8ce 	bl	8000a98 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3750      	adds	r7, #80	@ 0x50
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <STM32_ChaChaPoly_Encrypt>:
                                 const uint8_t *InputMessage,
                                 int32_t      InputMessageSize,
                                 const uint8_t  *Key,
                                 const uint8_t  *Nonce,
                                 uint8_t     *Output)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ae      	sub	sp, #184	@ 0xb8
 8000910:	af02      	add	r7, sp, #8
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	603b      	str	r3, [r7, #0]
  /* ChaCha20Poly1305, error status and output length */
  ChaCha20Poly1305ctx_stt ctx;
  /* Default value for error status */
  uint32_t error_status = CHACHA20POLY1305_SUCCESS;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* Integer to store size of written data */
  int32_t outputLength = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  /* Set flag field to default value */
  ctx.mFlags = E_SK_DEFAULT;
 8000924:	2300      	movs	r3, #0
 8000926:	773b      	strb	r3, [r7, #28]

  /* Call the Init */
  error_status = ChaCha20Poly1305_Encrypt_Init(&ctx, Key, Nonce);
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8000930:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8000934:	4618      	mov	r0, r3
 8000936:	f003 f9b3 	bl	8003ca0 <ChaCha20Poly1305_Encrypt_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (error_status == CHACHA20POLY1305_SUCCESS)
 8000940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000944:	2b00      	cmp	r3, #0
 8000946:	d12e      	bne.n	80009a6 <STM32_ChaChaPoly_Encrypt+0x9a>
  {
    /* Process the AAD */
    error_status = ChaCha20Poly1305_Header_Append(&ctx, AAD, AADSize);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fb39 	bl	8003fc8 <ChaCha20Poly1305_Header_Append>
 8000956:	4603      	mov	r3, r0
 8000958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (error_status == CHACHA20POLY1305_SUCCESS)
 800095c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000960:	2b00      	cmp	r3, #0
 8000962:	d120      	bne.n	80009a6 <STM32_ChaChaPoly_Encrypt+0x9a>
    {
      /* Encrypt Message */
      error_status = ChaCha20Poly1305_Encrypt_Append(&ctx, InputMessage, InputMessageSize, Output, &outputLength);
 8000964:	f107 0018 	add.w	r0, r7, #24
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	f003 fb0d 	bl	8003f94 <ChaCha20Poly1305_Encrypt_Append>
 800097a:	4603      	mov	r3, r0
 800097c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (error_status == CHACHA20POLY1305_SUCCESS)
 8000980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10e      	bne.n	80009a6 <STM32_ChaChaPoly_Encrypt+0x9a>
      {
        /* Generate authentication tag */
        error_status = ChaCha20Poly1305_Encrypt_Finish(&ctx, Output + outputLength, &outputLength);
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	461a      	mov	r2, r3
 800098c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000990:	1899      	adds	r1, r3, r2
 8000992:	f107 0214 	add.w	r2, r7, #20
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fe10 	bl	80045c0 <ChaCha20Poly1305_Encrypt_Finish>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      }
    }
  }

  return error_status;
 80009a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	37b0      	adds	r7, #176	@ 0xb0
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <STM32_ChaChaPoly_Decrypt>:
                                 int32_t      InputMessageSize,
                                 const uint8_t  *Key,
                                 const uint8_t  *Nonce,
                                 uint8_t     *Output,
                                 const uint8_t  *Tag)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b0ae      	sub	sp, #184	@ 0xb8
 80009b6:	af02      	add	r7, sp, #8
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	603b      	str	r3, [r7, #0]
  /* ChaCha20Poly1305, error status and output length */
  ChaCha20Poly1305ctx_stt ctx;
  /* Default value for error status */
  uint32_t error_status = AUTHENTICATION_FAILED;
 80009c0:	f44f 737b 	mov.w	r3, #1004	@ 0x3ec
 80009c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* Integer to store size of written data */
  int32_t outputLength = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  /* Set flag field to default value */
  ctx.mFlags = E_SK_DEFAULT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	773b      	strb	r3, [r7, #28]
  /* Set the tag that will be verified */
  ctx.pmTag = Tag;
 80009d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Call the Init */
  error_status = ChaCha20Poly1305_Decrypt_Init(&ctx, Key, Nonce);
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80009de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fe6a 	bl	80046bc <ChaCha20Poly1305_Decrypt_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (error_status == CHACHA20POLY1305_SUCCESS)
 80009ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d129      	bne.n	8000a4a <STM32_ChaChaPoly_Decrypt+0x98>
  {
    /* Process the AAD */
    error_status = ChaCha20Poly1305_Header_Append(&ctx, AAD, AADSize);
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	68f9      	ldr	r1, [r7, #12]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fae2 	bl	8003fc8 <ChaCha20Poly1305_Header_Append>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (error_status == CHACHA20POLY1305_SUCCESS)
 8000a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11b      	bne.n	8000a4a <STM32_ChaChaPoly_Decrypt+0x98>
    {
      /* Decrypt Message */
      error_status = ChaCha20Poly1305_Decrypt_Append(&ctx, InputMessage, InputMessageSize, Output, &outputLength);
 8000a12:	f107 0018 	add.w	r0, r7, #24
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f003 ffc4 	bl	80049b0 <ChaCha20Poly1305_Decrypt_Append>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (error_status == CHACHA20POLY1305_SUCCESS)
 8000a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d109      	bne.n	8000a4a <STM32_ChaChaPoly_Decrypt+0x98>
      {
        /* Verify authentication tag */
        error_status = ChaCha20Poly1305_Decrypt_Finish(&ctx, NULL, 0);
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 ffd0 	bl	80049e4 <ChaCha20Poly1305_Decrypt_Finish>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      }
    }
  }

  return error_status;
 8000a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	37b0      	adds	r7, #176	@ 0xb0
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer identical to pBuffer1
  *         FAILED: pBuffer differs from pBuffer1
  */
TestStatus Buffercmp(const uint8_t* pBuffer, uint8_t* pBuffer1, uint16_t BufferLength)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	4613      	mov	r3, r2
 8000a62:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000a64:	e00d      	b.n	8000a82 <Buffercmp+0x2c>
  {
    if (*pBuffer != *pBuffer1)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d001      	beq.n	8000a76 <Buffercmp+0x20>
    {
      return FAILED;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e00b      	b.n	8000a8e <Buffercmp+0x38>
    }

    pBuffer++;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
    pBuffer1++;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	80fa      	strh	r2, [r7, #6]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1ec      	bne.n	8000a66 <Buffercmp+0x10>
  }

  return PASSED;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fa28 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <NMI_Handler+0x4>

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f92c 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f004 f822 	bl	8004bc4 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000298 	.word	0x20000298
 8000bb4:	20000430 	.word	0x20000430

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <MX_USART2_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f001 f9d6 	bl	8001fac <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f7ff ff47 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000029c 	.word	0x2000029c
 8000c14:	40004400 	.word	0x40004400

08000c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_UART_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_UART_MspInit+0x8c>)
 8000c8e:	f000 f9a3 	bl	8000fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ff84 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f003 ff7b 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fd0b 	bl	80006f4 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cec:	080055d0 	.word	0x080055d0
  ldr r2, =_sbss
 8000cf0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cf4:	20000430 	.word	0x20000430

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f907 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff feb8 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f911 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f8e7 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_IncTick+0x1c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a03      	ldr	r2, [pc, #12]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200002e4 	.word	0x200002e4

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	@ (8000dd4 <HAL_GetTick+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	200002e4 	.word	0x200002e4

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff90 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff49 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff5e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffb0 	bl	8000ef4 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e00e      	b.n	8000fce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	795b      	ldrb	r3, [r3, #5]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d105      	bne.n	8000fc6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fb09 	bl	80005d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e165      	b.n	80012c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8154 	bne.w	80012ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80ae 	beq.w	80012ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5c      	ldr	r3, [pc, #368]	@ (80012d4 <HAL_GPIO_Init+0x2fc>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a5b      	ldr	r2, [pc, #364]	@ (80012d4 <HAL_GPIO_Init+0x2fc>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b59      	ldr	r3, [pc, #356]	@ (80012d4 <HAL_GPIO_Init+0x2fc>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4e      	ldr	r2, [pc, #312]	@ (80012dc <HAL_GPIO_Init+0x304>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4d      	ldr	r2, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x308>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x216>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x30c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x212>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4b      	ldr	r2, [pc, #300]	@ (80012e8 <HAL_GPIO_Init+0x310>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x20e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <HAL_GPIO_Init+0x314>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x20a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a49      	ldr	r2, [pc, #292]	@ (80012f0 <HAL_GPIO_Init+0x318>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x206>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <HAL_GPIO_Init+0x31c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x202>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4934      	ldr	r1, [pc, #208]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b39      	ldr	r3, [pc, #228]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a30      	ldr	r2, [pc, #192]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a10      	ldr	r2, [pc, #64]	@ (80012f8 <HAL_GPIO_Init+0x320>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae96 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_PWREx_EnableOverDrive+0x90>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_PWREx_EnableOverDrive+0x90>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_PWREx_EnableOverDrive+0x90>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001358:	f7ff fd34 	bl	8000dc4 <HAL_GetTick>
 800135c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800135e:	e009      	b.n	8001374 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001360:	f7ff fd30 	bl	8000dc4 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800136e:	d901      	bls.n	8001374 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e01f      	b.n	80013b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001380:	d1ee      	bne.n	8001360 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff fd1c 	bl	8000dc4 <HAL_GetTick>
 800138c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800138e:	e009      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001390:	f7ff fd18 	bl	8000dc4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800139e:	d901      	bls.n	80013a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e007      	b.n	80013b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013b0:	d1ee      	bne.n	8001390 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	420e0040 	.word	0x420e0040
 80013c4:	40007000 	.word	0x40007000
 80013c8:	420e0044 	.word	0x420e0044

080013cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0cc      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b68      	ldr	r3, [pc, #416]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d90c      	bls.n	8001408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b65      	ldr	r3, [pc, #404]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b63      	ldr	r3, [pc, #396]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0b8      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001420:	4b59      	ldr	r3, [pc, #356]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a58      	ldr	r2, [pc, #352]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800142a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001438:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a52      	ldr	r2, [pc, #328]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	4b50      	ldr	r3, [pc, #320]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	494d      	ldr	r1, [pc, #308]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	4313      	orrs	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d044      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b47      	ldr	r3, [pc, #284]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e07f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d003      	beq.n	800148a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001486:	2b03      	cmp	r3, #3
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b3f      	ldr	r3, [pc, #252]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e067      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4934      	ldr	r1, [pc, #208]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fc82 	bl	8000dc4 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fc7e 	bl	8000dc4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e04f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d20c      	bcs.n	8001514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e032      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4916      	ldr	r1, [pc, #88]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	490e      	ldr	r1, [pc, #56]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001552:	f000 f853 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 8001556:	4602      	mov	r2, r0
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	490a      	ldr	r1, [pc, #40]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	5ccb      	ldrb	r3, [r1, r3]
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbe4 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	08005574 	.word	0x08005574
 8001590:	20000000 	.word	0x20000000
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800159c:	4b02      	ldr	r3, [pc, #8]	@ (80015a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015b0:	f7ff fff2 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	0a9b      	lsrs	r3, r3, #10
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4903      	ldr	r1, [pc, #12]	@ (80015d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	08005584 	.word	0x08005584

080015d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015d8:	f7ff ffde 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0b5b      	lsrs	r3, r3, #13
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	4903      	ldr	r1, [pc, #12]	@ (80015f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	08005584 	.word	0x08005584

080015fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b0ae      	sub	sp, #184	@ 0xb8
 8001602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001622:	4bcf      	ldr	r3, [pc, #828]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b0c      	cmp	r3, #12
 800162c:	f200 8211 	bhi.w	8001a52 <HAL_RCC_GetSysClockFreq+0x456>
 8001630:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	0800166d 	.word	0x0800166d
 800163c:	08001a53 	.word	0x08001a53
 8001640:	08001a53 	.word	0x08001a53
 8001644:	08001a53 	.word	0x08001a53
 8001648:	08001675 	.word	0x08001675
 800164c:	08001a53 	.word	0x08001a53
 8001650:	08001a53 	.word	0x08001a53
 8001654:	08001a53 	.word	0x08001a53
 8001658:	0800167d 	.word	0x0800167d
 800165c:	08001a53 	.word	0x08001a53
 8001660:	08001a53 	.word	0x08001a53
 8001664:	08001a53 	.word	0x08001a53
 8001668:	08001879 	.word	0x08001879
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4bbd      	ldr	r3, [pc, #756]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x368>)
 800166e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001672:	e1f2      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001674:	4bbc      	ldr	r3, [pc, #752]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x36c>)
 8001676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800167a:	e1ee      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800167c:	4bb8      	ldr	r3, [pc, #736]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001688:	4bb5      	ldr	r3, [pc, #724]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d075      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x184>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001694:	4bb2      	ldr	r3, [pc, #712]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2200      	movs	r2, #0
 800169c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016ba:	4622      	mov	r2, r4
 80016bc:	462b      	mov	r3, r5
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4621      	mov	r1, r4
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80016d8:	4629      	mov	r1, r5
 80016da:	eb63 0301 	sbc.w	r3, r3, r1
 80016de:	647b      	str	r3, [r7, #68]	@ 0x44
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016ec:	4649      	mov	r1, r9
 80016ee:	018b      	lsls	r3, r1, #6
 80016f0:	4641      	mov	r1, r8
 80016f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f6:	4641      	mov	r1, r8
 80016f8:	018a      	lsls	r2, r1, #6
 80016fa:	46c4      	mov	ip, r8
 80016fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8001700:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8001704:	4649      	mov	r1, r9
 8001706:	eb63 0301 	sbc.w	r3, r3, r1
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001718:	4649      	mov	r1, r9
 800171a:	00cb      	lsls	r3, r1, #3
 800171c:	46c4      	mov	ip, r8
 800171e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001722:	4641      	mov	r1, r8
 8001724:	00ca      	lsls	r2, r1, #3
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	4603      	mov	r3, r0
 800172c:	4622      	mov	r2, r4
 800172e:	189b      	adds	r3, r3, r2
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
 8001732:	462b      	mov	r3, r5
 8001734:	460a      	mov	r2, r1
 8001736:	eb42 0303 	adc.w	r3, r2, r3
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001748:	4629      	mov	r1, r5
 800174a:	024b      	lsls	r3, r1, #9
 800174c:	4620      	mov	r0, r4
 800174e:	4629      	mov	r1, r5
 8001750:	4604      	mov	r4, r0
 8001752:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001756:	4601      	mov	r1, r0
 8001758:	024a      	lsls	r2, r1, #9
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001762:	2200      	movs	r2, #0
 8001764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001768:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800176c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001770:	f7fe fda6 	bl	80002c0 <__aeabi_uldivmod>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4613      	mov	r3, r2
 800177a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800177e:	e069      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x258>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001780:	4b77      	ldr	r3, [pc, #476]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	2200      	movs	r2, #0
 8001788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800178c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001798:	67bb      	str	r3, [r7, #120]	@ 0x78
 800179a:	2300      	movs	r3, #0
 800179c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800179e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80017a2:	4622      	mov	r2, r4
 80017a4:	462b      	mov	r3, r5
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	0159      	lsls	r1, r3, #5
 80017b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b4:	0150      	lsls	r0, r2, #5
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4621      	mov	r1, r4
 80017bc:	1a51      	subs	r1, r2, r1
 80017be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017c0:	4629      	mov	r1, r5
 80017c2:	eb63 0301 	sbc.w	r3, r3, r1
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80017d4:	4649      	mov	r1, r9
 80017d6:	018b      	lsls	r3, r1, #6
 80017d8:	4641      	mov	r1, r8
 80017da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017de:	4641      	mov	r1, r8
 80017e0:	018a      	lsls	r2, r1, #6
 80017e2:	46c4      	mov	ip, r8
 80017e4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80017e8:	4649      	mov	r1, r9
 80017ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001802:	4692      	mov	sl, r2
 8001804:	469b      	mov	fp, r3
 8001806:	4623      	mov	r3, r4
 8001808:	eb1a 0303 	adds.w	r3, sl, r3
 800180c:	623b      	str	r3, [r7, #32]
 800180e:	462b      	mov	r3, r5
 8001810:	eb4b 0303 	adc.w	r3, fp, r3
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001822:	4629      	mov	r1, r5
 8001824:	028b      	lsls	r3, r1, #10
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	4604      	mov	r4, r0
 800182c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001830:	4601      	mov	r1, r0
 8001832:	028a      	lsls	r2, r1, #10
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800183c:	2200      	movs	r2, #0
 800183e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001840:	677a      	str	r2, [r7, #116]	@ 0x74
 8001842:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001846:	f7fe fd3b 	bl	80002c0 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001854:	4b42      	ldr	r3, [pc, #264]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800186a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001876:	e0f0      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001878:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001884:	4b36      	ldr	r3, [pc, #216]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d06d      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x370>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001890:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x364>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2200      	movs	r2, #0
 8001898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800189a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800189c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80018a4:	2300      	movs	r3, #0
 80018a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80018a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018ac:	4622      	mov	r2, r4
 80018ae:	462b      	mov	r3, r5
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	0159      	lsls	r1, r3, #5
 80018ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018be:	0150      	lsls	r0, r2, #5
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4621      	mov	r1, r4
 80018c6:	1a51      	subs	r1, r2, r1
 80018c8:	61b9      	str	r1, [r7, #24]
 80018ca:	4629      	mov	r1, r5
 80018cc:	eb63 0301 	sbc.w	r3, r3, r1
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018de:	4659      	mov	r1, fp
 80018e0:	018b      	lsls	r3, r1, #6
 80018e2:	4651      	mov	r1, sl
 80018e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e8:	4651      	mov	r1, sl
 80018ea:	018a      	lsls	r2, r1, #6
 80018ec:	46d4      	mov	ip, sl
 80018ee:	ebb2 080c 	subs.w	r8, r2, ip
 80018f2:	4659      	mov	r1, fp
 80018f4:	eb63 0901 	sbc.w	r9, r3, r1
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001904:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001908:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800190c:	4690      	mov	r8, r2
 800190e:	4699      	mov	r9, r3
 8001910:	4623      	mov	r3, r4
 8001912:	eb18 0303 	adds.w	r3, r8, r3
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	462b      	mov	r3, r5
 800191a:	eb49 0303 	adc.w	r3, r9, r3
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800192c:	4629      	mov	r1, r5
 800192e:	024b      	lsls	r3, r1, #9
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	4604      	mov	r4, r0
 8001936:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800193a:	4601      	mov	r1, r0
 800193c:	024a      	lsls	r2, r1, #9
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001946:	2200      	movs	r2, #0
 8001948:	65bb      	str	r3, [r7, #88]	@ 0x58
 800194a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800194c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001950:	f7fe fcb6 	bl	80002c0 <__aeabi_uldivmod>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4613      	mov	r3, r2
 800195a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800195e:	e068      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x436>
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x46c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	2200      	movs	r2, #0
 8001974:	4618      	mov	r0, r3
 8001976:	4611      	mov	r1, r2
 8001978:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800197c:	653b      	str	r3, [r7, #80]	@ 0x50
 800197e:	2300      	movs	r3, #0
 8001980:	657b      	str	r3, [r7, #84]	@ 0x54
 8001982:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001986:	4642      	mov	r2, r8
 8001988:	464b      	mov	r3, r9
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	0159      	lsls	r1, r3, #5
 8001994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001998:	0150      	lsls	r0, r2, #5
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4641      	mov	r1, r8
 80019a0:	1a51      	subs	r1, r2, r1
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	4649      	mov	r1, r9
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019b8:	4659      	mov	r1, fp
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	4651      	mov	r1, sl
 80019be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c2:	4651      	mov	r1, sl
 80019c4:	018a      	lsls	r2, r1, #6
 80019c6:	46d4      	mov	ip, sl
 80019c8:	ebb2 040c 	subs.w	r4, r2, ip
 80019cc:	4659      	mov	r1, fp
 80019ce:	eb63 0501 	sbc.w	r5, r3, r1
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	00eb      	lsls	r3, r5, #3
 80019dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e0:	00e2      	lsls	r2, r4, #3
 80019e2:	4614      	mov	r4, r2
 80019e4:	461d      	mov	r5, r3
 80019e6:	4643      	mov	r3, r8
 80019e8:	18e3      	adds	r3, r4, r3
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	464b      	mov	r3, r9
 80019ee:	eb45 0303 	adc.w	r3, r5, r3
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a00:	4629      	mov	r1, r5
 8001a02:	028b      	lsls	r3, r1, #10
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	4604      	mov	r4, r0
 8001a0a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a0e:	4601      	mov	r1, r0
 8001a10:	028a      	lsls	r2, r1, #10
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a24:	f7fe fc4c 	bl	80002c0 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x46c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	0f1b      	lsrs	r3, r3, #28
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001a40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a50:	e003      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x45e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x470>)
 8001a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	37b8      	adds	r7, #184	@ 0xb8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400

08001a70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e28d      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8083 	beq.w	8001b96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a90:	4b94      	ldr	r3, [pc, #592]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d019      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a9c:	4b91      	ldr	r3, [pc, #580]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ab4:	d00c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d112      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac2:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	4b84      	ldr	r3, [pc, #528]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d05b      	beq.n	8001b94 <HAL_RCC_OscConfig+0x124>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d157      	bne.n	8001b94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e25a      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x90>
 8001af2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xcc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xb4>
 8001b0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a72      	ldr	r2, [pc, #456]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xcc>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f93e 	bl	8000dc4 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f93a 	bl	8000dc4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e21f      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xdc>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f92a 	bl	8000dc4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f926 	bl	8000dc4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e20b      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x104>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06f      	beq.n	8001c82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ba2:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d017      	beq.n	8001bde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b41      	ldr	r3, [pc, #260]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x186>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1d3      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4937      	ldr	r1, [pc, #220]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <HAL_RCC_OscConfig+0x278>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f8d3 	bl	8000dc4 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff f8cf 	bl	8000dc4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1b4      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4925      	ldr	r1, [pc, #148]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_RCC_OscConfig+0x278>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f8b2 	bl	8000dc4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff f8ae 	bl	8000dc4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e193      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d036      	beq.n	8001cfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_RCC_OscConfig+0x27c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f892 	bl	8000dc4 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f88e 	bl	8000dc4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e173      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x234>
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff f87b 	bl	8000dc4 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e00e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f877 	bl	8000dc4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d907      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e15c      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	42470000 	.word	0x42470000
 8001cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ea      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8097 	beq.w	8001e38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b83      	ldr	r3, [pc, #524]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10f      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a7e      	ldr	r2, [pc, #504]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b79      	ldr	r3, [pc, #484]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b76      	ldr	r3, [pc, #472]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a75      	ldr	r2, [pc, #468]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff f837 	bl	8000dc4 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7ff f833 	bl	8000dc4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e118      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x31e>
 8001d80:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a65      	ldr	r2, [pc, #404]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8c:	e01c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x358>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x340>
 8001d96:	4b61      	ldr	r3, [pc, #388]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	4a60      	ldr	r2, [pc, #384]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x358>
 8001db0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db4:	4a59      	ldr	r2, [pc, #356]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbc:	4b57      	ldr	r3, [pc, #348]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc0:	4a56      	ldr	r2, [pc, #344]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	f023 0304 	bic.w	r3, r3, #4
 8001dc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d015      	beq.n	8001dfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7fe fff8 	bl	8000dc4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe fff4 	bl	8000dc4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0d7      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dee:	4b4b      	ldr	r3, [pc, #300]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0ee      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x368>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ffe2 	bl	8000dc4 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7fe ffde 	bl	8000dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0c1      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1a:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ee      	bne.n	8001e04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	4a3a      	ldr	r2, [pc, #232]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80ad 	beq.w	8001f9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e42:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d060      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d145      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <HAL_RCC_OscConfig+0x4b4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe ffb2 	bl	8000dc4 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe ffae 	bl	8000dc4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e093      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e76:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	019b      	lsls	r3, r3, #6
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	071b      	lsls	r3, r3, #28
 8001eae:	491b      	ldr	r1, [pc, #108]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4b4>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe ff83 	bl	8000dc4 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe ff7f 	bl	8000dc4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e064      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x452>
 8001ee0:	e05c      	b.n	8001f9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_RCC_OscConfig+0x4b4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe ff6c 	bl	8000dc4 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7fe ff68 	bl	8000dc4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e04d      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x480>
 8001f0e:	e045      	b.n	8001f9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e040      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x538>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d030      	beq.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d129      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d122      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d119      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	3b01      	subs	r3, #1
 8001f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10f      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e042      	b.n	8002044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fe20 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f971 	bl	80022d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	@ 0x28
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b20      	cmp	r3, #32
 800206a:	d175      	bne.n	8002158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_UART_Transmit+0x2c>
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e06e      	b.n	800215a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	@ 0x21
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800208a:	f7fe fe9b 	bl	8000dc4 <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	88fa      	ldrh	r2, [r7, #6]
 8002094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a4:	d108      	bne.n	80020b8 <HAL_UART_Transmit+0x6c>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d104      	bne.n	80020b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	e003      	b.n	80020c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020c0:	e02e      	b.n	8002120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f848 	bl	8002162 <UART_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03a      	b.n	800215a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3302      	adds	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e007      	b.n	8002112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1cb      	bne.n	80020c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	2140      	movs	r1, #64	@ 0x40
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f814 	bl	8002162 <UART_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e006      	b.n	800215a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002172:	e03b      	b.n	80021ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d037      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7fe fe22 	bl	8000dc4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	6a3a      	ldr	r2, [r7, #32]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <UART_WaitOnFlagUntilTimeout+0x30>
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e03a      	b.n	800220c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d023      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b80      	cmp	r3, #128	@ 0x80
 80021a8:	d020      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b40      	cmp	r3, #64	@ 0x40
 80021ae:	d01d      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d116      	bne.n	80021ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f81d 	bl	8002214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2208      	movs	r2, #8
 80021de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00f      	b.n	800220c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	429a      	cmp	r2, r3
 8002208:	d0b4      	beq.n	8002174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002214:	b480      	push	{r7}
 8002216:	b095      	sub	sp, #84	@ 0x54
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002226:	e853 3f00 	ldrex	r3, [r3]
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800222c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800223c:	643a      	str	r2, [r7, #64]	@ 0x40
 800223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002244:	e841 2300 	strex	r3, r2, [r1]
 8002248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e5      	bne.n	800221c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3314      	adds	r3, #20
 8002256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	e853 3f00 	ldrex	r3, [r3]
 800225e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3314      	adds	r3, #20
 800226e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002278:	e841 2300 	strex	r3, r2, [r1]
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e5      	bne.n	8002250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	2b01      	cmp	r3, #1
 800228a:	d119      	bne.n	80022c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	e853 3f00 	ldrex	r3, [r3]
 800229a:	60bb      	str	r3, [r7, #8]
   return(result);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f023 0310 	bic.w	r3, r3, #16
 80022a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022ac:	61ba      	str	r2, [r7, #24]
 80022ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b0:	6979      	ldr	r1, [r7, #20]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	e841 2300 	strex	r3, r2, [r1]
 80022b8:	613b      	str	r3, [r7, #16]
   return(result);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e5      	bne.n	800228c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022ce:	bf00      	nop
 80022d0:	3754      	adds	r7, #84	@ 0x54
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b0c0      	sub	sp, #256	@ 0x100
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f4:	68d9      	ldr	r1, [r3, #12]
 80022f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	ea40 0301 	orr.w	r3, r0, r1
 8002300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	431a      	orrs	r2, r3
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	431a      	orrs	r2, r3
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002330:	f021 010c 	bic.w	r1, r1, #12
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800233e:	430b      	orrs	r3, r1
 8002340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002352:	6999      	ldr	r1, [r3, #24]
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	ea40 0301 	orr.w	r3, r0, r1
 800235e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b91      	ldr	r3, [pc, #580]	@ (80025ac <UART_SetConfig+0x2d4>)
 8002368:	429a      	cmp	r2, r3
 800236a:	d005      	beq.n	8002378 <UART_SetConfig+0xa0>
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b8f      	ldr	r3, [pc, #572]	@ (80025b0 <UART_SetConfig+0x2d8>)
 8002374:	429a      	cmp	r2, r3
 8002376:	d104      	bne.n	8002382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002378:	f7ff f92c 	bl	80015d4 <HAL_RCC_GetPCLK2Freq>
 800237c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002380:	e003      	b.n	800238a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002382:	f7ff f913 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8002386:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002394:	f040 8110 	bne.w	80025b8 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800239c:	2200      	movs	r2, #0
 800239e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023aa:	4622      	mov	r2, r4
 80023ac:	462b      	mov	r3, r5
 80023ae:	1891      	adds	r1, r2, r2
 80023b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023b2:	415b      	adcs	r3, r3
 80023b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023ba:	4620      	mov	r0, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	4604      	mov	r4, r0
 80023c0:	eb12 0804 	adds.w	r8, r2, r4
 80023c4:	460c      	mov	r4, r1
 80023c6:	eb43 0904 	adc.w	r9, r3, r4
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023de:	4690      	mov	r8, r2
 80023e0:	4699      	mov	r9, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	eb18 0303 	adds.w	r3, r8, r3
 80023e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023ec:	460b      	mov	r3, r1
 80023ee:	eb49 0303 	adc.w	r3, r9, r3
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002402:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800240a:	460b      	mov	r3, r1
 800240c:	18db      	adds	r3, r3, r3
 800240e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002410:	4613      	mov	r3, r2
 8002412:	eb42 0303 	adc.w	r3, r2, r3
 8002416:	657b      	str	r3, [r7, #84]	@ 0x54
 8002418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800241c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002420:	f7fd ff4e 	bl	80002c0 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4b62      	ldr	r3, [pc, #392]	@ (80025b4 <UART_SetConfig+0x2dc>)
 800242a:	fba3 2302 	umull	r2, r3, r3, r2
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	011c      	lsls	r4, r3, #4
 8002432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002436:	2200      	movs	r2, #0
 8002438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800243c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002444:	4642      	mov	r2, r8
 8002446:	464b      	mov	r3, r9
 8002448:	1891      	adds	r1, r2, r2
 800244a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800244c:	415b      	adcs	r3, r3
 800244e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002454:	4645      	mov	r5, r8
 8002456:	eb12 0a05 	adds.w	sl, r2, r5
 800245a:	4640      	mov	r0, r8
 800245c:	4649      	mov	r1, r9
 800245e:	460d      	mov	r5, r1
 8002460:	eb43 0b05 	adc.w	fp, r3, r5
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002478:	4692      	mov	sl, r2
 800247a:	469b      	mov	fp, r3
 800247c:	4603      	mov	r3, r0
 800247e:	eb1a 0303 	adds.w	r3, sl, r3
 8002482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002486:	460b      	mov	r3, r1
 8002488:	eb4b 0303 	adc.w	r3, fp, r3
 800248c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800249c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024a4:	460b      	mov	r3, r1
 80024a6:	18db      	adds	r3, r3, r3
 80024a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80024aa:	4613      	mov	r3, r2
 80024ac:	eb42 0303 	adc.w	r3, r2, r3
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024ba:	f7fd ff01 	bl	80002c0 <__aeabi_uldivmod>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <UART_SetConfig+0x2dc>)
 80024c6:	fba3 2301 	umull	r2, r3, r3, r1
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2264      	movs	r2, #100	@ 0x64
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	1acb      	subs	r3, r1, r3
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024da:	4b36      	ldr	r3, [pc, #216]	@ (80025b4 <UART_SetConfig+0x2dc>)
 80024dc:	fba3 2302 	umull	r2, r3, r3, r2
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024e8:	441c      	add	r4, r3
 80024ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ee:	2200      	movs	r2, #0
 80024f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024fc:	4642      	mov	r2, r8
 80024fe:	464b      	mov	r3, r9
 8002500:	1891      	adds	r1, r2, r2
 8002502:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002504:	415b      	adcs	r3, r3
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800250c:	4641      	mov	r1, r8
 800250e:	1851      	adds	r1, r2, r1
 8002510:	6339      	str	r1, [r7, #48]	@ 0x30
 8002512:	4649      	mov	r1, r9
 8002514:	414b      	adcs	r3, r1
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002524:	4659      	mov	r1, fp
 8002526:	00cb      	lsls	r3, r1, #3
 8002528:	4655      	mov	r5, sl
 800252a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800252e:	4651      	mov	r1, sl
 8002530:	00ca      	lsls	r2, r1, #3
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	4603      	mov	r3, r0
 8002538:	4642      	mov	r2, r8
 800253a:	189b      	adds	r3, r3, r2
 800253c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002540:	464b      	mov	r3, r9
 8002542:	460a      	mov	r2, r1
 8002544:	eb42 0303 	adc.w	r3, r2, r3
 8002548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002558:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800255c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002560:	460b      	mov	r3, r1
 8002562:	18db      	adds	r3, r3, r3
 8002564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002566:	4613      	mov	r3, r2
 8002568:	eb42 0303 	adc.w	r3, r2, r3
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002576:	f7fd fea3 	bl	80002c0 <__aeabi_uldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <UART_SetConfig+0x2dc>)
 8002580:	fba3 1302 	umull	r1, r3, r3, r2
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	2164      	movs	r1, #100	@ 0x64
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	3332      	adds	r3, #50	@ 0x32
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <UART_SetConfig+0x2dc>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	f003 0207 	and.w	r2, r3, #7
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4422      	add	r2, r4
 80025a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025a8:	e10a      	b.n	80027c0 <UART_SetConfig+0x4e8>
 80025aa:	bf00      	nop
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40011400 	.word	0x40011400
 80025b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025ca:	4642      	mov	r2, r8
 80025cc:	464b      	mov	r3, r9
 80025ce:	1891      	adds	r1, r2, r2
 80025d0:	6239      	str	r1, [r7, #32]
 80025d2:	415b      	adcs	r3, r3
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025da:	4641      	mov	r1, r8
 80025dc:	1854      	adds	r4, r2, r1
 80025de:	46cc      	mov	ip, r9
 80025e0:	eb43 050c 	adc.w	r5, r3, ip
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	00eb      	lsls	r3, r5, #3
 80025ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025f2:	00e2      	lsls	r2, r4, #3
 80025f4:	4614      	mov	r4, r2
 80025f6:	461d      	mov	r5, r3
 80025f8:	4640      	mov	r0, r8
 80025fa:	4649      	mov	r1, r9
 80025fc:	4603      	mov	r3, r0
 80025fe:	18e3      	adds	r3, r4, r3
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002604:	460b      	mov	r3, r1
 8002606:	eb45 0303 	adc.w	r3, r5, r3
 800260a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800261a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800262a:	4629      	mov	r1, r5
 800262c:	008b      	lsls	r3, r1, #2
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	4604      	mov	r4, r0
 8002634:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002638:	4601      	mov	r1, r0
 800263a:	008a      	lsls	r2, r1, #2
 800263c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002640:	f7fd fe3e 	bl	80002c0 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4b60      	ldr	r3, [pc, #384]	@ (80027cc <UART_SetConfig+0x4f4>)
 800264a:	fba3 2302 	umull	r2, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	011c      	lsls	r4, r3, #4
 8002652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800265c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	1891      	adds	r1, r2, r2
 800266a:	61b9      	str	r1, [r7, #24]
 800266c:	415b      	adcs	r3, r3
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002674:	4641      	mov	r1, r8
 8002676:	1851      	adds	r1, r2, r1
 8002678:	6139      	str	r1, [r7, #16]
 800267a:	4649      	mov	r1, r9
 800267c:	414b      	adcs	r3, r1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800268c:	4659      	mov	r1, fp
 800268e:	00cb      	lsls	r3, r1, #3
 8002690:	4655      	mov	r5, sl
 8002692:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002696:	4651      	mov	r1, sl
 8002698:	00ca      	lsls	r2, r1, #3
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	4642      	mov	r2, r8
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026a8:	464b      	mov	r3, r9
 80026aa:	460a      	mov	r2, r1
 80026ac:	eb42 0303 	adc.w	r3, r2, r3
 80026b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026cc:	4649      	mov	r1, r9
 80026ce:	008b      	lsls	r3, r1, #2
 80026d0:	4645      	mov	r5, r8
 80026d2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80026d6:	4641      	mov	r1, r8
 80026d8:	008a      	lsls	r2, r1, #2
 80026da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026de:	f7fd fdef 	bl	80002c0 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <UART_SetConfig+0x4f4>)
 80026ea:	fba3 2301 	umull	r2, r3, r3, r1
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2264      	movs	r2, #100	@ 0x64
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	1acb      	subs	r3, r1, r3
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	3332      	adds	r3, #50	@ 0x32
 80026fc:	4a33      	ldr	r2, [pc, #204]	@ (80027cc <UART_SetConfig+0x4f4>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002708:	441c      	add	r4, r3
 800270a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800270e:	2200      	movs	r2, #0
 8002710:	673b      	str	r3, [r7, #112]	@ 0x70
 8002712:	677a      	str	r2, [r7, #116]	@ 0x74
 8002714:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002718:	4642      	mov	r2, r8
 800271a:	464b      	mov	r3, r9
 800271c:	1891      	adds	r1, r2, r2
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	415b      	adcs	r3, r3
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002728:	4641      	mov	r1, r8
 800272a:	1851      	adds	r1, r2, r1
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	4649      	mov	r1, r9
 8002730:	414b      	adcs	r3, r1
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002740:	4659      	mov	r1, fp
 8002742:	00cb      	lsls	r3, r1, #3
 8002744:	4655      	mov	r5, sl
 8002746:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800274a:	4651      	mov	r1, sl
 800274c:	00ca      	lsls	r2, r1, #3
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	4603      	mov	r3, r0
 8002754:	4642      	mov	r2, r8
 8002756:	189b      	adds	r3, r3, r2
 8002758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800275a:	464b      	mov	r3, r9
 800275c:	460a      	mov	r2, r1
 800275e:	eb42 0303 	adc.w	r3, r2, r3
 8002762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	663b      	str	r3, [r7, #96]	@ 0x60
 800276e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800277c:	4649      	mov	r1, r9
 800277e:	008b      	lsls	r3, r1, #2
 8002780:	4645      	mov	r5, r8
 8002782:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002786:	4641      	mov	r1, r8
 8002788:	008a      	lsls	r2, r1, #2
 800278a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800278e:	f7fd fd97 	bl	80002c0 <__aeabi_uldivmod>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <UART_SetConfig+0x4f4>)
 8002798:	fba3 1302 	umull	r1, r3, r3, r2
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	2164      	movs	r1, #100	@ 0x64
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	3332      	adds	r3, #50	@ 0x32
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <UART_SetConfig+0x4f4>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4422      	add	r2, r4
 80027be:	609a      	str	r2, [r3, #8]
}
 80027c0:	bf00      	nop
 80027c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027c6:	46bd      	mov	sp, r7
 80027c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027cc:	51eb851f 	.word	0x51eb851f

080027d0 <salsa20_wordtobyte>:
 80027d0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027d4:	b09c      	sub	sp, #112	@ 0x70
 80027d6:	2300      	movs	r3, #0
 80027d8:	468a      	mov	sl, r1
 80027da:	9008      	str	r0, [sp, #32]
 80027dc:	460c      	mov	r4, r1
 80027de:	f101 0740 	add.w	r7, r1, #64	@ 0x40
 80027e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80027e4:	ae0c      	add	r6, sp, #48	@ 0x30
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	6861      	ldr	r1, [r4, #4]
 80027ea:	68a2      	ldr	r2, [r4, #8]
 80027ec:	68e3      	ldr	r3, [r4, #12]
 80027ee:	4635      	mov	r5, r6
 80027f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f2:	3410      	adds	r4, #16
 80027f4:	42bc      	cmp	r4, r7
 80027f6:	462e      	mov	r6, r5
 80027f8:	d1f5      	bne.n	80027e6 <salsa20_wordtobyte+0x16>
 80027fa:	200a      	movs	r0, #10
 80027fc:	9006      	str	r0, [sp, #24]
 80027fe:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8002802:	e0d9      	b.n	80029b8 <salsa20_wordtobyte+0x1e8>
 8002804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002806:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8002808:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800280a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800280c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8002810:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8002814:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002816:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8002818:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800281a:	441f      	add	r7, r3
 800281c:	407e      	eors	r6, r7
 800281e:	ea4f 4636 	mov.w	r6, r6, ror #16
 8002822:	4434      	add	r4, r6
 8002824:	ea84 0c03 	eor.w	ip, r4, r3
 8002828:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800282a:	4445      	add	r5, r8
 800282c:	4451      	add	r1, sl
 800282e:	ea81 0203 	eor.w	r2, r1, r3
 8002832:	4068      	eors	r0, r5
 8002834:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8002836:	ea4f 4030 	mov.w	r0, r0, ror #16
 800283a:	4403      	add	r3, r0
 800283c:	ea83 0908 	eor.w	r9, r3, r8
 8002840:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8002844:	ea4f 4232 	mov.w	r2, r2, ror #16
 8002848:	ea4f 5c3c 	mov.w	ip, ip, ror #20
 800284c:	4467      	add	r7, ip
 800284e:	4490      	add	r8, r2
 8002850:	ea4f 5939 	mov.w	r9, r9, ror #20
 8002854:	f8cd 9008 	str.w	r9, [sp, #8]
 8002858:	407e      	eors	r6, r7
 800285a:	ea88 090a 	eor.w	r9, r8, sl
 800285e:	ea4f 5939 	mov.w	r9, r9, ror #20
 8002862:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002866:	ea4f 6636 	mov.w	r6, r6, ror #24
 800286a:	4434      	add	r4, r6
 800286c:	4449      	add	r1, r9
 800286e:	4455      	add	r5, sl
 8002870:	4427      	add	r7, r4
 8002872:	ea81 0a02 	eor.w	sl, r1, r2
 8002876:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002878:	407e      	eors	r6, r7
 800287a:	4068      	eors	r0, r5
 800287c:	4411      	add	r1, r2
 800287e:	ea4f 4b36 	mov.w	fp, r6, ror #16
 8002882:	ea4f 623a 	mov.w	r2, sl, ror #24
 8002886:	ea4f 6030 	mov.w	r0, r0, ror #24
 800288a:	eb0b 0a02 	add.w	sl, fp, r2
 800288e:	4403      	add	r3, r0
 8002890:	4490      	add	r8, r2
 8002892:	ea84 0c0c 	eor.w	ip, r4, ip
 8002896:	ea83 0201 	eor.w	r2, r3, r1
 800289a:	ea8a 0404 	eor.w	r4, sl, r4
 800289e:	ea4f 5434 	mov.w	r4, r4, ror #20
 80028a2:	ea4f 4232 	mov.w	r2, r2, ror #16
 80028a6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80028a8:	9404      	str	r4, [sp, #16]
 80028aa:	4427      	add	r7, r4
 80028ac:	eb02 0408 	add.w	r4, r2, r8
 80028b0:	f8cd c01c 	str.w	ip, [sp, #28]
 80028b4:	4066      	eors	r6, r4
 80028b6:	ea4f 5c36 	mov.w	ip, r6, ror #20
 80028ba:	9e07      	ldr	r6, [sp, #28]
 80028bc:	f8cd c014 	str.w	ip, [sp, #20]
 80028c0:	ea4f 6c76 	mov.w	ip, r6, ror #25
 80028c4:	9e05      	ldr	r6, [sp, #20]
 80028c6:	ea87 0b0b 	eor.w	fp, r7, fp
 80028ca:	440e      	add	r6, r1
 80028cc:	4467      	add	r7, ip
 80028ce:	ea4f 6b3b 	mov.w	fp, fp, ror #24
 80028d2:	4072      	eors	r2, r6
 80028d4:	ea4f 6232 	mov.w	r2, r2, ror #24
 80028d8:	ea8b 0107 	eor.w	r1, fp, r7
 80028dc:	4414      	add	r4, r2
 80028de:	ea4f 4131 	mov.w	r1, r1, ror #16
 80028e2:	ea88 0809 	eor.w	r8, r8, r9
 80028e6:	eb01 0904 	add.w	r9, r1, r4
 80028ea:	ea89 0c0c 	eor.w	ip, r9, ip
 80028ee:	9218      	str	r2, [sp, #96]	@ 0x60
 80028f0:	ea4f 523c 	mov.w	r2, ip, ror #20
 80028f4:	4417      	add	r7, r2
 80028f6:	960d      	str	r6, [sp, #52]	@ 0x34
 80028f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80028fa:	970e      	str	r7, [sp, #56]	@ 0x38
 80028fc:	44d3      	add	fp, sl
 80028fe:	4079      	eors	r1, r7
 8002900:	ea4f 6878 	mov.w	r8, r8, ror #25
 8002904:	eb06 0c08 	add.w	ip, r6, r8
 8002908:	f8cd b00c 	str.w	fp, [sp, #12]
 800290c:	ea4f 6131 	mov.w	r1, r1, ror #24
 8002910:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002914:	9119      	str	r1, [sp, #100]	@ 0x64
 8002916:	4489      	add	r9, r1
 8002918:	ea8c 0000 	eor.w	r0, ip, r0
 800291c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800291e:	9e03      	ldr	r6, [sp, #12]
 8002920:	444d      	add	r5, r9
 8002922:	ea83 0a0b 	eor.w	sl, r3, fp
 8002926:	ea4f 4030 	mov.w	r0, r0, ror #16
 800292a:	eb00 637a 	add.w	r3, r0, sl, ror #25
 800292e:	4069      	eors	r1, r5
 8002930:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002934:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002938:	ea4f 4131 	mov.w	r1, r1, ror #16
 800293c:	ea83 0808 	eor.w	r8, r3, r8
 8002940:	448b      	add	fp, r1
 8002942:	ea4f 5838 	mov.w	r8, r8, ror #20
 8002946:	eb08 070c 	add.w	r7, r8, ip
 800294a:	ea8b 0c09 	eor.w	ip, fp, r9
 800294e:	ea4f 5c3c 	mov.w	ip, ip, ror #20
 8002952:	4465      	add	r5, ip
 8002954:	ea86 060a 	eor.w	r6, r6, sl
 8002958:	4069      	eors	r1, r5
 800295a:	9602      	str	r6, [sp, #8]
 800295c:	ea4f 6131 	mov.w	r1, r1, ror #24
 8002960:	9e05      	ldr	r6, [sp, #20]
 8002962:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002966:	4078      	eors	r0, r7
 8002968:	448b      	add	fp, r1
 800296a:	ea4f 6030 	mov.w	r0, r0, ror #24
 800296e:	4074      	eors	r4, r6
 8002970:	ea89 0902 	eor.w	r9, r9, r2
 8002974:	4403      	add	r3, r0
 8002976:	ea8b 0c0c 	eor.w	ip, fp, ip
 800297a:	ea83 0808 	eor.w	r8, r3, r8
 800297e:	ea4f 627a 	mov.w	r2, sl, ror #25
 8002982:	ea4f 6679 	mov.w	r6, r9, ror #25
 8002986:	ea4f 6474 	mov.w	r4, r4, ror #25
 800298a:	ea4f 6c7c 	mov.w	ip, ip, ror #25
 800298e:	9215      	str	r2, [sp, #84]	@ 0x54
 8002990:	ea4f 6878 	mov.w	r8, r8, ror #25
 8002994:	9610      	str	r6, [sp, #64]	@ 0x40
 8002996:	9412      	str	r4, [sp, #72]	@ 0x48
 8002998:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800299c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 80029a0:	911a      	str	r1, [sp, #104]	@ 0x68
 80029a2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80029a4:	9806      	ldr	r0, [sp, #24]
 80029a6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80029a8:	3801      	subs	r0, #1
 80029aa:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80029ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80029b0:	970c      	str	r7, [sp, #48]	@ 0x30
 80029b2:	9006      	str	r0, [sp, #24]
 80029b4:	f000 8106 	beq.w	8002bc4 <salsa20_wordtobyte+0x3f4>
 80029b8:	4a94      	ldr	r2, [pc, #592]	@ (8002c0c <salsa20_wordtobyte+0x43c>)
 80029ba:	4c95      	ldr	r4, [pc, #596]	@ (8002c10 <salsa20_wordtobyte+0x440>)
 80029bc:	2101      	movs	r1, #1
 80029be:	6011      	str	r1, [r2, #0]
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80029c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80029ca:	3301      	adds	r3, #1
 80029cc:	f47f af1a 	bne.w	8002804 <salsa20_wordtobyte+0x34>
 80029d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80029d2:	6023      	str	r3, [r4, #0]
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80029d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 811a 	bne.w	8002c14 <salsa20_wordtobyte+0x444>
 80029e0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80029e2:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 80029e6:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80029ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80029ec:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80029ee:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80029f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 80029f4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80029f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80029f8:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80029fc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80029fe:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8002a00:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8002a04:	44a4      	add	ip, r4
 8002a06:	4456      	add	r6, sl
 8002a08:	ea8c 0403 	eor.w	r4, ip, r3
 8002a0c:	ea4f 4334 	mov.w	r3, r4, ror #16
 8002a10:	4071      	eors	r1, r6
 8002a12:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8002a14:	f8cd c004 	str.w	ip, [sp, #4]
 8002a18:	ea4f 4131 	mov.w	r1, r1, ror #16
 8002a1c:	444d      	add	r5, r9
 8002a1e:	440c      	add	r4, r1
 8002a20:	9405      	str	r4, [sp, #20]
 8002a22:	406a      	eors	r2, r5
 8002a24:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8002a26:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002a2a:	ea4f 4232 	mov.w	r2, r2, ror #16
 8002a2e:	4414      	add	r4, r2
 8002a30:	9402      	str	r4, [sp, #8]
 8002a32:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8002a34:	441c      	add	r4, r3
 8002a36:	9404      	str	r4, [sp, #16]
 8002a38:	9c02      	ldr	r4, [sp, #8]
 8002a3a:	445f      	add	r7, fp
 8002a3c:	4078      	eors	r0, r7
 8002a3e:	ea84 0909 	eor.w	r9, r4, r9
 8002a42:	ea4f 4030 	mov.w	r0, r0, ror #16
 8002a46:	ea4f 5939 	mov.w	r9, r9, ror #20
 8002a4a:	4480      	add	r8, r0
 8002a4c:	444d      	add	r5, r9
 8002a4e:	ea88 0b0b 	eor.w	fp, r8, fp
 8002a52:	ea8c 0a0a 	eor.w	sl, ip, sl
 8002a56:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8002a58:	f8dd c010 	ldr.w	ip, [sp, #16]
 8002a5c:	406a      	eors	r2, r5
 8002a5e:	ea4f 5b3b 	mov.w	fp, fp, ror #20
 8002a62:	ea4f 6232 	mov.w	r2, r2, ror #24
 8002a66:	445f      	add	r7, fp
 8002a68:	ea4f 5a3a 	mov.w	sl, sl, ror #20
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	ea8c 0404 	eor.w	r4, ip, r4
 8002a72:	f8cd a01c 	str.w	sl, [sp, #28]
 8002a76:	ea4f 5c34 	mov.w	ip, r4, ror #20
 8002a7a:	4456      	add	r6, sl
 8002a7c:	9703      	str	r7, [sp, #12]
 8002a7e:	f8dd a000 	ldr.w	sl, [sp]
 8002a82:	9c01      	ldr	r4, [sp, #4]
 8002a84:	9a05      	ldr	r2, [sp, #20]
 8002a86:	4078      	eors	r0, r7
 8002a88:	9f02      	ldr	r7, [sp, #8]
 8002a8a:	4071      	eors	r1, r6
 8002a8c:	ea4f 6030 	mov.w	r0, r0, ror #24
 8002a90:	4464      	add	r4, ip
 8002a92:	4480      	add	r8, r0
 8002a94:	4457      	add	r7, sl
 8002a96:	ea4f 6131 	mov.w	r1, r1, ror #24
 8002a9a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8002a9e:	9702      	str	r7, [sp, #8]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	4063      	eors	r3, r4
 8002aa4:	9f04      	ldr	r7, [sp, #16]
 8002aa6:	9205      	str	r2, [sp, #20]
 8002aa8:	ea88 0b0b 	eor.w	fp, r8, fp
 8002aac:	ea82 020a 	eor.w	r2, r2, sl
 8002ab0:	ea4f 6333 	mov.w	r3, r3, ror #24
 8002ab4:	ea4f 6b7b 	mov.w	fp, fp, ror #25
 8002ab8:	9204      	str	r2, [sp, #16]
 8002aba:	441f      	add	r7, r3
 8002abc:	9a02      	ldr	r2, [sp, #8]
 8002abe:	445e      	add	r6, fp
 8002ac0:	9607      	str	r6, [sp, #28]
 8002ac2:	ea87 0c0c 	eor.w	ip, r7, ip
 8002ac6:	9e03      	ldr	r6, [sp, #12]
 8002ac8:	ea82 0909 	eor.w	r9, r2, r9
 8002acc:	ea4f 6c7c 	mov.w	ip, ip, ror #25
 8002ad0:	9a04      	ldr	r2, [sp, #16]
 8002ad2:	4466      	add	r6, ip
 8002ad4:	9601      	str	r6, [sp, #4]
 8002ad6:	ea4f 6a72 	mov.w	sl, r2, ror #25
 8002ada:	9e00      	ldr	r6, [sp, #0]
 8002adc:	9a07      	ldr	r2, [sp, #28]
 8002ade:	4072      	eors	r2, r6
 8002ae0:	9203      	str	r2, [sp, #12]
 8002ae2:	9e03      	ldr	r6, [sp, #12]
 8002ae4:	9a01      	ldr	r2, [sp, #4]
 8002ae6:	ea4f 6979 	mov.w	r9, r9, ror #25
 8002aea:	444c      	add	r4, r9
 8002aec:	4060      	eors	r0, r4
 8002aee:	4051      	eors	r1, r2
 8002af0:	ea4f 4236 	mov.w	r2, r6, ror #16
 8002af4:	9e05      	ldr	r6, [sp, #20]
 8002af6:	ea4f 4030 	mov.w	r0, r0, ror #16
 8002afa:	4406      	add	r6, r0
 8002afc:	9604      	str	r6, [sp, #16]
 8002afe:	9e02      	ldr	r6, [sp, #8]
 8002b00:	ea4f 4131 	mov.w	r1, r1, ror #16
 8002b04:	440e      	add	r6, r1
 8002b06:	9603      	str	r6, [sp, #12]
 8002b08:	9e04      	ldr	r6, [sp, #16]
 8002b0a:	ea86 0909 	eor.w	r9, r6, r9
 8002b0e:	4455      	add	r5, sl
 8002b10:	ea4f 5939 	mov.w	r9, r9, ror #20
 8002b14:	4417      	add	r7, r2
 8002b16:	444c      	add	r4, r9
 8002b18:	406b      	eors	r3, r5
 8002b1a:	940d      	str	r4, [sp, #52]	@ 0x34
 8002b1c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002b20:	ea87 0b0b 	eor.w	fp, r7, fp
 8002b24:	9c07      	ldr	r4, [sp, #28]
 8002b26:	9e03      	ldr	r6, [sp, #12]
 8002b28:	4498      	add	r8, r3
 8002b2a:	ea4f 5b3b 	mov.w	fp, fp, ror #20
 8002b2e:	445c      	add	r4, fp
 8002b30:	ea88 0a0a 	eor.w	sl, r8, sl
 8002b34:	940f      	str	r4, [sp, #60]	@ 0x3c
 8002b36:	ea4f 5a3a 	mov.w	sl, sl, ror #20
 8002b3a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8002b3c:	4455      	add	r5, sl
 8002b3e:	ea86 0c0c 	eor.w	ip, r6, ip
 8002b42:	9e01      	ldr	r6, [sp, #4]
 8002b44:	950e      	str	r5, [sp, #56]	@ 0x38
 8002b46:	ea4f 5c3c 	mov.w	ip, ip, ror #20
 8002b4a:	406b      	eors	r3, r5
 8002b4c:	4060      	eors	r0, r4
 8002b4e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8002b50:	9d04      	ldr	r5, [sp, #16]
 8002b52:	4466      	add	r6, ip
 8002b54:	ea4f 6333 	mov.w	r3, r3, ror #24
 8002b58:	4062      	eors	r2, r4
 8002b5a:	4071      	eors	r1, r6
 8002b5c:	eb03 0408 	add.w	r4, r3, r8
 8002b60:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002b64:	9414      	str	r4, [sp, #80]	@ 0x50
 8002b66:	ea4f 6030 	mov.w	r0, r0, ror #24
 8002b6a:	ea4f 6232 	mov.w	r2, r2, ror #24
 8002b6e:	ea4f 6131 	mov.w	r1, r1, ror #24
 8002b72:	4405      	add	r5, r0
 8002b74:	4417      	add	r7, r2
 8002b76:	4488      	add	r8, r1
 8002b78:	ea84 0a0a 	eor.w	sl, r4, sl
 8002b7c:	ea85 0909 	eor.w	r9, r5, r9
 8002b80:	ea87 0b0b 	eor.w	fp, r7, fp
 8002b84:	ea88 0c0c 	eor.w	ip, r8, ip
 8002b88:	ea4f 6a7a 	mov.w	sl, sl, ror #25
 8002b8c:	ea4f 6979 	mov.w	r9, r9, ror #25
 8002b90:	ea4f 6b7b 	mov.w	fp, fp, ror #25
 8002b94:	ea4f 6c7c 	mov.w	ip, ip, ror #25
 8002b98:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 8002b9c:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
 8002ba0:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8002ba4:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8002ba8:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 8002bac:	9517      	str	r5, [sp, #92]	@ 0x5c
 8002bae:	9715      	str	r7, [sp, #84]	@ 0x54
 8002bb0:	911b      	str	r1, [sp, #108]	@ 0x6c
 8002bb2:	9018      	str	r0, [sp, #96]	@ 0x60
 8002bb4:	9806      	ldr	r0, [sp, #24]
 8002bb6:	9319      	str	r3, [sp, #100]	@ 0x64
 8002bb8:	3801      	subs	r0, #1
 8002bba:	921a      	str	r2, [sp, #104]	@ 0x68
 8002bbc:	960c      	str	r6, [sp, #48]	@ 0x30
 8002bbe:	9006      	str	r0, [sp, #24]
 8002bc0:	f47f aefa 	bne.w	80029b8 <salsa20_wordtobyte+0x1e8>
 8002bc4:	9a08      	ldr	r2, [sp, #32]
 8002bc6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4614      	mov	r4, r2
 8002bce:	ae0c      	add	r6, sp, #48	@ 0x30
 8002bd0:	f85a 0003 	ldr.w	r0, [sl, r3]
 8002bd4:	58f1      	ldr	r1, [r6, r3]
 8002bd6:	4408      	add	r0, r1
 8002bd8:	54e0      	strb	r0, [r4, r3]
 8002bda:	f85a 0003 	ldr.w	r0, [sl, r3]
 8002bde:	4408      	add	r0, r1
 8002be0:	0a00      	lsrs	r0, r0, #8
 8002be2:	7050      	strb	r0, [r2, #1]
 8002be4:	f85a 0003 	ldr.w	r0, [sl, r3]
 8002be8:	4408      	add	r0, r1
 8002bea:	0c00      	lsrs	r0, r0, #16
 8002bec:	7090      	strb	r0, [r2, #2]
 8002bee:	f85a 0003 	ldr.w	r0, [sl, r3]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4401      	add	r1, r0
 8002bf6:	0e09      	lsrs	r1, r1, #24
 8002bf8:	2b40      	cmp	r3, #64	@ 0x40
 8002bfa:	70d1      	strb	r1, [r2, #3]
 8002bfc:	f102 0204 	add.w	r2, r2, #4
 8002c00:	d1e5      	bne.n	8002bce <salsa20_wordtobyte+0x3fe>
 8002c02:	b01c      	add	sp, #112	@ 0x70
 8002c04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023008 	.word	0x40023008
 8002c10:	40023000 	.word	0x40023000
 8002c14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002c16:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8002c18:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8002c1a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8002c1c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8002c20:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8002c24:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002c26:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8002c28:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8002c2a:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 8002c2e:	441f      	add	r7, r3
 8002c30:	407e      	eors	r6, r7
 8002c32:	ea4f 4636 	mov.w	r6, r6, ror #16
 8002c36:	4434      	add	r4, r6
 8002c38:	ea84 0c03 	eor.w	ip, r4, r3
 8002c3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002c3e:	4445      	add	r5, r8
 8002c40:	4451      	add	r1, sl
 8002c42:	ea81 0203 	eor.w	r2, r1, r3
 8002c46:	4068      	eors	r0, r5
 8002c48:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8002c4a:	ea4f 4030 	mov.w	r0, r0, ror #16
 8002c4e:	4403      	add	r3, r0
 8002c50:	ea83 0908 	eor.w	r9, r3, r8
 8002c54:	ea4f 5c3c 	mov.w	ip, ip, ror #20
 8002c58:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8002c5c:	4467      	add	r7, ip
 8002c5e:	ea4f 4232 	mov.w	r2, r2, ror #16
 8002c62:	ea4f 5939 	mov.w	r9, r9, ror #20
 8002c66:	f8cd 9008 	str.w	r9, [sp, #8]
 8002c6a:	4490      	add	r8, r2
 8002c6c:	407e      	eors	r6, r7
 8002c6e:	ea88 090a 	eor.w	r9, r8, sl
 8002c72:	ea4f 6636 	mov.w	r6, r6, ror #24
 8002c76:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002c7a:	4434      	add	r4, r6
 8002c7c:	ea4f 5939 	mov.w	r9, r9, ror #20
 8002c80:	4455      	add	r5, sl
 8002c82:	4427      	add	r7, r4
 8002c84:	4449      	add	r1, r9
 8002c86:	4068      	eors	r0, r5
 8002c88:	407e      	eors	r6, r7
 8002c8a:	404a      	eors	r2, r1
 8002c8c:	ea4f 4636 	mov.w	r6, r6, ror #16
 8002c90:	ea4f 6030 	mov.w	r0, r0, ror #24
 8002c94:	ea4f 6232 	mov.w	r2, r2, ror #24
 8002c98:	4459      	add	r1, fp
 8002c9a:	4403      	add	r3, r0
 8002c9c:	4490      	add	r8, r2
 8002c9e:	4432      	add	r2, r6
 8002ca0:	ea83 0a01 	eor.w	sl, r3, r1
 8002ca4:	ea84 0c0c 	eor.w	ip, r4, ip
 8002ca8:	4054      	eors	r4, r2
 8002caa:	ea4f 5434 	mov.w	r4, r4, ror #20
 8002cae:	ea4f 4a3a 	mov.w	sl, sl, ror #16
 8002cb2:	9404      	str	r4, [sp, #16]
 8002cb4:	4427      	add	r7, r4
 8002cb6:	eb0a 0408 	add.w	r4, sl, r8
 8002cba:	ea84 0b0b 	eor.w	fp, r4, fp
 8002cbe:	ea4f 5b3b 	mov.w	fp, fp, ror #20
 8002cc2:	f8cd b014 	str.w	fp, [sp, #20]
 8002cc6:	ea87 0b06 	eor.w	fp, r7, r6
 8002cca:	9e05      	ldr	r6, [sp, #20]
 8002ccc:	440e      	add	r6, r1
 8002cce:	960d      	str	r6, [sp, #52]	@ 0x34
 8002cd0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002cd2:	ea4f 6c7c 	mov.w	ip, ip, ror #25
 8002cd6:	ea4f 663b 	mov.w	r6, fp, ror #24
 8002cda:	4467      	add	r7, ip
 8002cdc:	ea81 0a0a 	eor.w	sl, r1, sl
 8002ce0:	ea4f 613a 	mov.w	r1, sl, ror #24
 8002ce4:	ea86 0a07 	eor.w	sl, r6, r7
 8002ce8:	440c      	add	r4, r1
 8002cea:	ea4f 4a3a 	mov.w	sl, sl, ror #16
 8002cee:	9118      	str	r1, [sp, #96]	@ 0x60
 8002cf0:	eb0a 0104 	add.w	r1, sl, r4
 8002cf4:	ea81 0c0c 	eor.w	ip, r1, ip
 8002cf8:	ea4f 5c3c 	mov.w	ip, ip, ror #20
 8002cfc:	4467      	add	r7, ip
 8002cfe:	1996      	adds	r6, r2, r6
 8002d00:	9603      	str	r6, [sp, #12]
 8002d02:	ea88 0809 	eor.w	r8, r8, r9
 8002d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d08:	9a02      	ldr	r2, [sp, #8]
 8002d0a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002d0e:	970e      	str	r7, [sp, #56]	@ 0x38
 8002d10:	ea87 0a0a 	eor.w	sl, r7, sl
 8002d14:	ea4f 6a3a 	mov.w	sl, sl, ror #24
 8002d18:	ea4f 6878 	mov.w	r8, r8, ror #25
 8002d1c:	4451      	add	r1, sl
 8002d1e:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
 8002d22:	eb08 0a06 	add.w	sl, r8, r6
 8002d26:	ea8a 0000 	eor.w	r0, sl, r0
 8002d2a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8002d2c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002d30:	440d      	add	r5, r1
 8002d32:	4053      	eors	r3, r2
 8002d34:	ea4f 4030 	mov.w	r0, r0, ror #16
 8002d38:	eb00 6373 	add.w	r3, r0, r3, ror #25
 8002d3c:	406e      	eors	r6, r5
 8002d3e:	ea4f 4636 	mov.w	r6, r6, ror #16
 8002d42:	ea83 0808 	eor.w	r8, r3, r8
 8002d46:	44b1      	add	r9, r6
 8002d48:	ea4f 5838 	mov.w	r8, r8, ror #20
 8002d4c:	eb08 070a 	add.w	r7, r8, sl
 8002d50:	ea89 0a01 	eor.w	sl, r9, r1
 8002d54:	9a04      	ldr	r2, [sp, #16]
 8002d56:	ea4f 5a3a 	mov.w	sl, sl, ror #20
 8002d5a:	4455      	add	r5, sl
 8002d5c:	ea8b 0b02 	eor.w	fp, fp, r2
 8002d60:	406e      	eors	r6, r5
 8002d62:	f8cd b008 	str.w	fp, [sp, #8]
 8002d66:	ea4f 6636 	mov.w	r6, r6, ror #24
 8002d6a:	f8dd b014 	ldr.w	fp, [sp, #20]
 8002d6e:	4078      	eors	r0, r7
 8002d70:	44b1      	add	r9, r6
 8002d72:	ea81 010c 	eor.w	r1, r1, ip
 8002d76:	ea4f 6030 	mov.w	r0, r0, ror #24
 8002d7a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002d7e:	4403      	add	r3, r0
 8002d80:	ea84 040b 	eor.w	r4, r4, fp
 8002d84:	ea89 0a0a 	eor.w	sl, r9, sl
 8002d88:	ea83 0808 	eor.w	r8, r3, r8
 8002d8c:	ea4f 627c 	mov.w	r2, ip, ror #25
 8002d90:	ea4f 6171 	mov.w	r1, r1, ror #25
 8002d94:	ea4f 6474 	mov.w	r4, r4, ror #25
 8002d98:	ea4f 6a7a 	mov.w	sl, sl, ror #25
 8002d9c:	9215      	str	r2, [sp, #84]	@ 0x54
 8002d9e:	ea4f 6878 	mov.w	r8, r8, ror #25
 8002da2:	9110      	str	r1, [sp, #64]	@ 0x40
 8002da4:	9412      	str	r4, [sp, #72]	@ 0x48
 8002da6:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8002daa:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
 8002dae:	961a      	str	r6, [sp, #104]	@ 0x68
 8002db0:	e5f7      	b.n	80029a2 <salsa20_wordtobyte+0x1d2>
 8002db2:	bf00      	nop

08002db4 <Poly1305_Core_Update>:
 8002db4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002db8:	f892 9002 	ldrb.w	r9, [r2, #2]
 8002dbc:	f892 a003 	ldrb.w	sl, [r2, #3]
 8002dc0:	f892 8000 	ldrb.w	r8, [r2]
 8002dc4:	f892 c001 	ldrb.w	ip, [r2, #1]
 8002dc8:	6806      	ldr	r6, [r0, #0]
 8002dca:	6847      	ldr	r7, [r0, #4]
 8002dcc:	4c9a      	ldr	r4, [pc, #616]	@ (8003038 <Poly1305_Core_Update+0x284>)
 8002dce:	4d9b      	ldr	r5, [pc, #620]	@ (800303c <Poly1305_Core_Update+0x288>)
 8002dd0:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8002dd4:	ea49 690a 	orr.w	r9, r9, sl, lsl #24
 8002dd8:	ea49 0908 	orr.w	r9, r9, r8
 8002ddc:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
 8002de0:	b09e      	sub	sp, #120	@ 0x78
 8002de2:	f02c 4c7c 	bic.w	ip, ip, #4227858432	@ 0xfc000000
 8002de6:	4466      	add	r6, ip
 8002de8:	9608      	str	r6, [sp, #32]
 8002dea:	680e      	ldr	r6, [r1, #0]
 8002dec:	9610      	str	r6, [sp, #64]	@ 0x40
 8002dee:	688e      	ldr	r6, [r1, #8]
 8002df0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002df4:	960e      	str	r6, [sp, #56]	@ 0x38
 8002df6:	68ce      	ldr	r6, [r1, #12]
 8002df8:	6909      	ldr	r1, [r1, #16]
 8002dfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002dfc:	9908      	ldr	r1, [sp, #32]
 8002dfe:	6001      	str	r1, [r0, #0]
 8002e00:	f892 9005 	ldrb.w	r9, [r2, #5]
 8002e04:	7991      	ldrb	r1, [r2, #6]
 8002e06:	f892 c003 	ldrb.w	ip, [r2, #3]
 8002e0a:	9612      	str	r6, [sp, #72]	@ 0x48
 8002e0c:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8002e10:	ea49 6901 	orr.w	r9, r9, r1, lsl #24
 8002e14:	7911      	ldrb	r1, [r2, #4]
 8002e16:	6886      	ldr	r6, [r0, #8]
 8002e18:	ea49 090c 	orr.w	r9, r9, ip
 8002e1c:	ea49 2901 	orr.w	r9, r9, r1, lsl #8
 8002e20:	f3c9 0999 	ubfx	r9, r9, #2, #26
 8002e24:	44b9      	add	r9, r7
 8002e26:	f8c0 9004 	str.w	r9, [r0, #4]
 8002e2a:	f892 c008 	ldrb.w	ip, [r2, #8]
 8002e2e:	7a57      	ldrb	r7, [r2, #9]
 8002e30:	7991      	ldrb	r1, [r2, #6]
 8002e32:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8002e36:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 8002e3a:	79d7      	ldrb	r7, [r2, #7]
 8002e3c:	ea4c 0101 	orr.w	r1, ip, r1
 8002e40:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002e44:	f3c1 1119 	ubfx	r1, r1, #4, #26
 8002e48:	4431      	add	r1, r6
 8002e4a:	6081      	str	r1, [r0, #8]
 8002e4c:	f892 800b 	ldrb.w	r8, [r2, #11]
 8002e50:	7b16      	ldrb	r6, [r2, #12]
 8002e52:	7a57      	ldrb	r7, [r2, #9]
 8002e54:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8002e58:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 8002e5c:	7a96      	ldrb	r6, [r2, #10]
 8002e5e:	ea48 0807 	orr.w	r8, r8, r7
 8002e62:	68c7      	ldr	r7, [r0, #12]
 8002e64:	ea48 2806 	orr.w	r8, r8, r6, lsl #8
 8002e68:	eb07 1898 	add.w	r8, r7, r8, lsr #6
 8002e6c:	f8c0 800c 	str.w	r8, [r0, #12]
 8002e70:	7b97      	ldrb	r7, [r2, #14]
 8002e72:	7bd6      	ldrb	r6, [r2, #15]
 8002e74:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8002e78:	7b52      	ldrb	r2, [r2, #13]
 8002e7a:	043f      	lsls	r7, r7, #16
 8002e7c:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 8002e80:	ea47 070c 	orr.w	r7, r7, ip
 8002e84:	f013 0f01 	tst.w	r3, #1
 8002e88:	bf14      	ite	ne
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8002e90:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8002e94:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8002e96:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
 8002e9a:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8002e9e:	4494      	add	ip, r2
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	921d      	str	r2, [sp, #116]	@ 0x74
 8002ea6:	f8c0 c010 	str.w	ip, [r0, #16]
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	931d      	str	r3, [sp, #116]	@ 0x74
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	931d      	str	r3, [sp, #116]	@ 0x74
 8002eb4:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8002eb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002eb8:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8002eba:	eb0a 0b8a 	add.w	fp, sl, sl, lsl #2
 8002ebe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ec2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002ec6:	3401      	adds	r4, #1
 8002ec8:	f8cd b014 	str.w	fp, [sp, #20]
 8002ecc:	9218      	str	r2, [sp, #96]	@ 0x60
 8002ece:	9604      	str	r6, [sp, #16]
 8002ed0:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
 8002ed4:	f000 80b4 	beq.w	8003040 <Poly1305_Core_Update+0x28c>
 8002ed8:	9f08      	ldr	r7, [sp, #32]
 8002eda:	9d05      	ldr	r5, [sp, #20]
 8002edc:	9c08      	ldr	r4, [sp, #32]
 8002ede:	4633      	mov	r3, r6
 8002ee0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002ee2:	fba7 6706 	umull	r6, r7, r7, r6
 8002ee6:	fbe2 6708 	umlal	r6, r7, r2, r8
 8002eea:	fbeb 6709 	umlal	r6, r7, fp, r9
 8002eee:	fbe3 6701 	umlal	r6, r7, r3, r1
 8002ef2:	fbe5 670c 	umlal	r6, r7, r5, ip
 8002ef6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002efa:	9e04      	ldr	r6, [sp, #16]
 8002efc:	9f06      	ldr	r7, [sp, #24]
 8002efe:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8002f00:	fba4 230a 	umull	r2, r3, r4, sl
 8002f04:	fbe6 2308 	umlal	r2, r3, r6, r8
 8002f08:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002f0a:	0ebc      	lsrs	r4, r7, #26
 8002f0c:	fbe6 2309 	umlal	r2, r3, r6, r9
 8002f10:	9f07      	ldr	r7, [sp, #28]
 8002f12:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8002f14:	fbeb 2301 	umlal	r2, r3, fp, r1
 8002f18:	fbe6 230c 	umlal	r2, r3, r6, ip
 8002f1c:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
 8002f20:	1916      	adds	r6, r2, r4
 8002f22:	f143 0700 	adc.w	r7, r3, #0
 8002f26:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
 8002f2a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8002f2c:	9f08      	ldr	r7, [sp, #32]
 8002f2e:	fba7 2304 	umull	r2, r3, r7, r4
 8002f32:	0f34      	lsrs	r4, r6, #28
 8002f34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8002f36:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8002f38:	fbeb 2308 	umlal	r2, r3, fp, r8
 8002f3c:	fbea 2309 	umlal	r2, r3, sl, r9
 8002f40:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8002f44:	9e04      	ldr	r6, [sp, #16]
 8002f46:	fbe7 2301 	umlal	r2, r3, r7, r1
 8002f4a:	fbe6 230c 	umlal	r2, r3, r6, ip
 8002f4e:	1916      	adds	r6, r2, r4
 8002f50:	9a08      	ldr	r2, [sp, #32]
 8002f52:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8002f54:	f143 0700 	adc.w	r7, r3, #0
 8002f58:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
 8002f5c:	fba2 6704 	umull	r6, r7, r2, r4
 8002f60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002f62:	9c08      	ldr	r4, [sp, #32]
 8002f64:	fbe5 6708 	umlal	r6, r7, r5, r8
 8002f68:	fbe2 6709 	umlal	r6, r7, r2, r9
 8002f6c:	fbea 6701 	umlal	r6, r7, sl, r1
 8002f70:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8002f72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002f74:	fbeb 670c 	umlal	r6, r7, fp, ip
 8002f78:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8002f7c:	0f2d      	lsrs	r5, r5, #28
 8002f7e:	ea45 1b0b 	orr.w	fp, r5, fp, lsl #4
 8002f82:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8002f84:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 8002f88:	0f12      	lsrs	r2, r2, #28
 8002f8a:	9215      	str	r2, [sp, #84]	@ 0x54
 8002f8c:	fba4 2305 	umull	r2, r3, r4, r5
 8002f90:	eb16 040b 	adds.w	r4, r6, fp
 8002f94:	f147 0500 	adc.w	r5, r7, #0
 8002f98:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8002f9e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8002fa0:	9e08      	ldr	r6, [sp, #32]
 8002fa2:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8002fa6:	fbea 2308 	umlal	r2, r3, sl, r8
 8002faa:	fbe4 2309 	umlal	r2, r3, r4, r9
 8002fae:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8002fb2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fb6:	fbe7 2301 	umlal	r2, r3, r7, r1
 8002fba:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8002fbc:	0f34      	lsrs	r4, r6, #28
 8002fbe:	fbe1 230c 	umlal	r2, r3, r1, ip
 8002fc2:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
 8002fc6:	1912      	adds	r2, r2, r4
 8002fc8:	9e06      	ldr	r6, [sp, #24]
 8002fca:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8002fce:	f143 0300 	adc.w	r3, r3, #0
 8002fd2:	0f14      	lsrs	r4, r2, #28
 8002fd4:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8002fd8:	f026 477c 	bic.w	r7, r6, #4227858432	@ 0xfc000000
 8002fdc:	f048 714c 	orr.w	r1, r8, #53477376	@ 0x3300000
 8002fe0:	f089 767f 	eor.w	r6, r9, #66846720	@ 0x3fc0000
 8002fe4:	f042 727f 	orr.w	r2, r2, #66846720	@ 0x3fc0000
 8002fe8:	f08b 437c 	eor.w	r3, fp, #4227858432	@ 0xfc000000
 8002fec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002ff0:	f427 6740 	bic.w	r7, r7, #3072	@ 0xc00
 8002ff4:	f441 317f 	orr.w	r1, r1, #261120	@ 0x3fc00
 8002ff8:	f486 364f 	eor.w	r6, r6, #211968	@ 0x33c00
 8002ffc:	f442 324f 	orr.w	r2, r2, #211968	@ 0x33c00
 8003000:	4427      	add	r7, r4
 8003002:	43db      	mvns	r3, r3
 8003004:	f441 717f 	orr.w	r1, r1, #1020	@ 0x3fc
 8003008:	f486 764f 	eor.w	r6, r6, #828	@ 0x33c
 800300c:	f442 724f 	orr.w	r2, r2, #828	@ 0x33c
 8003010:	eb03 6397 	add.w	r3, r3, r7, lsr #26
 8003014:	f041 0103 	orr.w	r1, r1, #3
 8003018:	f086 0603 	eor.w	r6, r6, #3
 800301c:	f027 477c 	bic.w	r7, r7, #4227858432	@ 0xfc000000
 8003020:	f042 0203 	orr.w	r2, r2, #3
 8003024:	6081      	str	r1, [r0, #8]
 8003026:	60c6      	str	r6, [r0, #12]
 8003028:	6043      	str	r3, [r0, #4]
 800302a:	6007      	str	r7, [r0, #0]
 800302c:	6102      	str	r2, [r0, #16]
 800302e:	b01e      	add	sp, #120	@ 0x78
 8003030:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023008 	.word	0x40023008
 800303c:	40023000 	.word	0x40023000
 8003040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	931d      	str	r3, [sp, #116]	@ 0x74
 8003048:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80a1 	bne.w	8003192 <Poly1305_Core_Update+0x3de>
 8003050:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8003054:	6841      	ldr	r1, [r0, #4]
 8003056:	6803      	ldr	r3, [r0, #0]
 8003058:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800305a:	6884      	ldr	r4, [r0, #8]
 800305c:	6905      	ldr	r5, [r0, #16]
 800305e:	fba2 890c 	umull	r8, r9, r2, ip
 8003062:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8003064:	fbe1 890b 	umlal	r8, r9, r1, fp
 8003068:	fbe3 8902 	umlal	r8, r9, r3, r2
 800306c:	fbaa 2303 	umull	r2, r3, sl, r3
 8003070:	fbe1 2307 	umlal	r2, r3, r1, r7
 8003074:	9904      	ldr	r1, [sp, #16]
 8003076:	6847      	ldr	r7, [r0, #4]
 8003078:	fbe4 8906 	umlal	r8, r9, r4, r6
 800307c:	9e05      	ldr	r6, [sp, #20]
 800307e:	fbec 2301 	umlal	r2, r3, ip, r1
 8003082:	fbe5 8906 	umlal	r8, r9, r5, r6
 8003086:	fbe4 230b 	umlal	r2, r3, r4, fp
 800308a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800308c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800308e:	ea4f 6698 	mov.w	r6, r8, lsr #26
 8003092:	ea46 1689 	orr.w	r6, r6, r9, lsl #6
 8003096:	fbe5 2304 	umlal	r2, r3, r5, r4
 800309a:	1994      	adds	r4, r2, r6
 800309c:	f143 0500 	adc.w	r5, r3, #0
 80030a0:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 80030a4:	6806      	ldr	r6, [r0, #0]
 80030a6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80030a8:	6884      	ldr	r4, [r0, #8]
 80030aa:	fba5 2306 	umull	r2, r3, r5, r6
 80030ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030b0:	6845      	ldr	r5, [r0, #4]
 80030b2:	fbe7 230a 	umlal	r2, r3, r7, sl
 80030b6:	fbe4 2301 	umlal	r2, r3, r4, r1
 80030ba:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80030bc:	6901      	ldr	r1, [r0, #16]
 80030be:	0eb4      	lsrs	r4, r6, #26
 80030c0:	9e04      	ldr	r6, [sp, #16]
 80030c2:	fbec 230b 	umlal	r2, r3, ip, fp
 80030c6:	fbe1 2306 	umlal	r2, r3, r1, r6
 80030ca:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
 80030ce:	1916      	adds	r6, r2, r4
 80030d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80030d2:	6802      	ldr	r2, [r0, #0]
 80030d4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80030d6:	f143 0700 	adc.w	r7, r3, #0
 80030da:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
 80030de:	fba1 6702 	umull	r6, r7, r1, r2
 80030e2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80030e4:	6882      	ldr	r2, [r0, #8]
 80030e6:	6903      	ldr	r3, [r0, #16]
 80030e8:	fbe5 6704 	umlal	r6, r7, r5, r4
 80030ec:	fbec 6701 	umlal	r6, r7, ip, r1
 80030f0:	fbe2 670a 	umlal	r6, r7, r2, sl
 80030f4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80030f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80030f8:	6804      	ldr	r4, [r0, #0]
 80030fa:	fbe3 670b 	umlal	r6, r7, r3, fp
 80030fe:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
 8003102:	0ead      	lsrs	r5, r5, #26
 8003104:	ea45 1b8b 	orr.w	fp, r5, fp, lsl #6
 8003108:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800310a:	f8cd b020 	str.w	fp, [sp, #32]
 800310e:	0ead      	lsrs	r5, r5, #26
 8003110:	9509      	str	r5, [sp, #36]	@ 0x24
 8003112:	fba1 2304 	umull	r2, r3, r1, r4
 8003116:	6844      	ldr	r4, [r0, #4]
 8003118:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800311a:	fbe4 2301 	umlal	r2, r3, r4, r1
 800311e:	eb16 040b 	adds.w	r4, r6, fp
 8003122:	f147 0500 	adc.w	r5, r7, #0
 8003126:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800312a:	6886      	ldr	r6, [r0, #8]
 800312c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800312e:	9f07      	ldr	r7, [sp, #28]
 8003130:	fbec 230a 	umlal	r2, r3, ip, sl
 8003134:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003138:	fbe6 2301 	umlal	r2, r3, r6, r1
 800313c:	6906      	ldr	r6, [r0, #16]
 800313e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003140:	ea4f 649c 	mov.w	r4, ip, lsr #26
 8003144:	fbe6 2301 	umlal	r2, r3, r6, r1
 8003148:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
 800314c:	1912      	adds	r2, r2, r4
 800314e:	f143 0300 	adc.w	r3, r3, #0
 8003152:	0e94      	lsrs	r4, r2, #26
 8003154:	ea44 1483 	orr.w	r4, r4, r3, lsl #6
 8003158:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800315a:	f028 417c 	bic.w	r1, r8, #4227858432	@ 0xfc000000
 800315e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003162:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003166:	440c      	add	r4, r1
 8003168:	f027 437c 	bic.w	r3, r7, #4227858432	@ 0xfc000000
 800316c:	eb03 6394 	add.w	r3, r3, r4, lsr #26
 8003170:	f028 417c 	bic.w	r1, r8, #4227858432	@ 0xfc000000
 8003174:	f02c 467c 	bic.w	r6, ip, #4227858432	@ 0xfc000000
 8003178:	f024 447c 	bic.w	r4, r4, #4227858432	@ 0xfc000000
 800317c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003180:	6081      	str	r1, [r0, #8]
 8003182:	60c6      	str	r6, [r0, #12]
 8003184:	6043      	str	r3, [r0, #4]
 8003186:	6004      	str	r4, [r0, #0]
 8003188:	6102      	str	r2, [r0, #16]
 800318a:	b01e      	add	sp, #120	@ 0x78
 800318c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003190:	4770      	bx	lr
 8003192:	6803      	ldr	r3, [r0, #0]
 8003194:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8003198:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800319c:	68c5      	ldr	r5, [r0, #12]
 800319e:	6904      	ldr	r4, [r0, #16]
 80031a0:	6881      	ldr	r1, [r0, #8]
 80031a2:	461e      	mov	r6, r3
 80031a4:	2700      	movs	r7, #0
 80031a6:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
 80031aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80031ae:	f04f 0900 	mov.w	r9, #0
 80031b2:	eb18 0602 	adds.w	r6, r8, r2
 80031b6:	eb49 0703 	adc.w	r7, r9, r3
 80031ba:	fba4 2305 	umull	r2, r3, r4, r5
 80031be:	4664      	mov	r4, ip
 80031c0:	2500      	movs	r5, #0
 80031c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80031c6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80031c8:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 80031cc:	fba6 890b 	umull	r8, r9, r6, fp
 80031d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031d4:	fb0b 9907 	mla	r9, fp, r7, r9
 80031d8:	fba2 6705 	umull	r6, r7, r2, r5
 80031dc:	9a02      	ldr	r2, [sp, #8]
 80031de:	2300      	movs	r3, #0
 80031e0:	fba8 4502 	umull	r4, r5, r8, r2
 80031e4:	460a      	mov	r2, r1
 80031e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80031ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80031ec:	9b07      	ldr	r3, [sp, #28]
 80031ee:	4652      	mov	r2, sl
 80031f0:	fb01 7703 	mla	r7, r1, r3, r7
 80031f4:	2300      	movs	r3, #0
 80031f6:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 80031fa:	9b02      	ldr	r3, [sp, #8]
 80031fc:	9904      	ldr	r1, [sp, #16]
 80031fe:	fb03 5509 	mla	r5, r3, r9, r5
 8003202:	9b05      	ldr	r3, [sp, #20]
 8003204:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	@ 0x30
 8003208:	fba6 2303 	umull	r2, r3, r6, r3
 800320c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003210:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003212:	eb18 0801 	adds.w	r8, r8, r1
 8003216:	fba3 230c 	umull	r2, r3, r3, ip
 800321a:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 800321e:	f149 0900 	adc.w	r9, r9, #0
 8003222:	eb14 0208 	adds.w	r2, r4, r8
 8003226:	eb45 0309 	adc.w	r3, r5, r9
 800322a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800322e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	@ 0x28
 8003232:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	@ 0x68
 8003236:	1912      	adds	r2, r2, r4
 8003238:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800323c:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8003240:	eb43 0305 	adc.w	r3, r3, r5
 8003244:	9d05      	ldr	r5, [sp, #20]
 8003246:	fb05 8507 	mla	r5, r5, r7, r8
 800324a:	9503      	str	r5, [sp, #12]
 800324c:	fb09 f303 	mul.w	r3, r9, r3
 8003250:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	@ 0x40
 8003254:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003258:	eb14 0408 	adds.w	r4, r4, r8
 800325c:	eb45 0509 	adc.w	r5, r5, r9
 8003260:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8003264:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 8003268:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800326a:	fb02 3109 	mla	r1, r2, r9, r3
 800326e:	fba5 4502 	umull	r4, r5, r5, r2
 8003272:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8003276:	440d      	add	r5, r1
 8003278:	9519      	str	r5, [sp, #100]	@ 0x64
 800327a:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	@ 0x30
 800327e:	eb14 040b 	adds.w	r4, r4, fp
 8003282:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8003284:	9b04      	ldr	r3, [sp, #16]
 8003286:	9907      	ldr	r1, [sp, #28]
 8003288:	f145 0500 	adc.w	r5, r5, #0
 800328c:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 8003290:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8003292:	ea4f 6892 	mov.w	r8, r2, lsr #26
 8003296:	fba6 2303 	umull	r2, r3, r6, r3
 800329a:	e9cd 2300 	strd	r2, r3, [sp]
 800329e:	ea48 1884 	orr.w	r8, r8, r4, lsl #6
 80032a2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80032a6:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
 80032aa:	1912      	adds	r2, r2, r4
 80032ac:	eb43 0305 	adc.w	r3, r3, r5
 80032b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80032b6:	9c01      	ldr	r4, [sp, #4]
 80032b8:	2300      	movs	r3, #0
 80032ba:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 80032be:	9b04      	ldr	r3, [sp, #16]
 80032c0:	fb03 4307 	mla	r3, r3, r7, r4
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80032ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032ce:	1912      	adds	r2, r2, r4
 80032d0:	eb43 0305 	adc.w	r3, r3, r5
 80032d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80032d8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	@ 0x28
 80032dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80032e0:	1912      	adds	r2, r2, r4
 80032e2:	eb43 0305 	adc.w	r3, r3, r5
 80032e6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80032ea:	fbaa 670c 	umull	r6, r7, sl, ip
 80032ee:	eb14 0408 	adds.w	r4, r4, r8
 80032f2:	fba6 8902 	umull	r8, r9, r6, r2
 80032f6:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 80032fa:	fb06 f303 	mul.w	r3, r6, r3
 80032fe:	fb02 3307 	mla	r3, r2, r7, r3
 8003302:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003304:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003308:	f145 0500 	adc.w	r5, r5, #0
 800330c:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8003310:	441a      	add	r2, r3
 8003312:	9215      	str	r2, [sp, #84]	@ 0x54
 8003314:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003318:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
 800331c:	ea48 2805 	orr.w	r8, r8, r5, lsl #8
 8003320:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	@ 0x30
 8003324:	1912      	adds	r2, r2, r4
 8003326:	eb43 0305 	adc.w	r3, r3, r5
 800332a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
 800332e:	18a4      	adds	r4, r4, r2
 8003330:	eb45 0503 	adc.w	r5, r5, r3
 8003334:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 8003338:	9d04      	ldr	r5, [sp, #16]
 800333a:	fbab 6709 	umull	r6, r7, fp, r9
 800333e:	fba6 2305 	umull	r2, r3, r6, r5
 8003342:	fb0b 7701 	mla	r7, fp, r1, r7
 8003346:	fb05 3307 	mla	r3, r5, r7, r3
 800334a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
 800334e:	18a4      	adds	r4, r4, r2
 8003350:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003352:	f8dd 9058 	ldr.w	r9, [sp, #88]	@ 0x58
 8003356:	eb45 0503 	adc.w	r5, r5, r3
 800335a:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 800335e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	@ 0x28
 8003362:	fba1 670c 	umull	r6, r7, r1, ip
 8003366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800336a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800336c:	1864      	adds	r4, r4, r1
 800336e:	f145 0500 	adc.w	r5, r5, #0
 8003372:	eb12 0208 	adds.w	r2, r2, r8
 8003376:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800337a:	fb06 f105 	mul.w	r1, r6, r5
 800337e:	f143 0300 	adc.w	r3, r3, #0
 8003382:	fba9 8908 	umull	r8, r9, r9, r8
 8003386:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 800338a:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 800338e:	fba6 8904 	umull	r8, r9, r6, r4
 8003392:	fb04 1307 	mla	r3, r4, r7, r1
 8003396:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	@ 0x30
 800339a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	@ 0x68
 800339e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80033a2:	19a4      	adds	r4, r4, r6
 80033a4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80033a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80033a8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80033ac:	eb45 0507 	adc.w	r5, r5, r7
 80033b0:	9f03      	ldr	r7, [sp, #12]
 80033b2:	fb01 2909 	mla	r9, r1, r9, r2
 80033b6:	441f      	add	r7, r3
 80033b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80033bc:	e9cd 4516 	strd	r4, r5, [sp, #88]	@ 0x58
 80033c0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80033c2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80033c4:	9703      	str	r7, [sp, #12]
 80033c6:	1912      	adds	r2, r2, r4
 80033c8:	f143 0300 	adc.w	r3, r3, #0
 80033cc:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 80033d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80033d4:	fba5 670c 	umull	r6, r7, r5, ip
 80033d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033dc:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	@ 0x58
 80033e0:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 80033e4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80033e6:	fba9 890b 	umull	r8, r9, r9, fp
 80033ea:	e9cd 8900 	strd	r8, r9, [sp]
 80033ee:	1912      	adds	r2, r2, r4
 80033f0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80033f4:	9c06      	ldr	r4, [sp, #24]
 80033f6:	eb43 0305 	adc.w	r3, r3, r5
 80033fa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80033fc:	fb0b cb05 	mla	fp, fp, r5, ip
 8003400:	f8cd b004 	str.w	fp, [sp, #4]
 8003404:	4692      	mov	sl, r2
 8003406:	469b      	mov	fp, r3
 8003408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800340c:	ea4f 6851 	mov.w	r8, r1, lsr #25
 8003410:	eb1a 0a02 	adds.w	sl, sl, r2
 8003414:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8003416:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 800341a:	eb4b 0b03 	adc.w	fp, fp, r3
 800341e:	9b07      	ldr	r3, [sp, #28]
 8003420:	ea48 18c1 	orr.w	r8, r8, r1, lsl #7
 8003424:	eb1a 0a08 	adds.w	sl, sl, r8
 8003428:	fb06 f103 	mul.w	r1, r6, r3
 800342c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	@ 0x60
 8003430:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003434:	f14b 0b00 	adc.w	fp, fp, #0
 8003438:	eb18 0802 	adds.w	r8, r8, r2
 800343c:	fb04 1107 	mla	r1, r4, r7, r1
 8003440:	eb49 0903 	adc.w	r9, r9, r3
 8003444:	fba6 6704 	umull	r6, r7, r6, r4
 8003448:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800344a:	440f      	add	r7, r1
 800344c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800344e:	fba3 450c 	umull	r4, r5, r3, ip
 8003452:	eb16 0608 	adds.w	r6, r6, r8
 8003456:	ea4f 629a 	mov.w	r2, sl, lsr #26
 800345a:	fb03 5501 	mla	r5, r3, r1, r5
 800345e:	eb47 0709 	adc.w	r7, r7, r9
 8003462:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 8003466:	1936      	adds	r6, r6, r4
 8003468:	eb47 0705 	adc.w	r7, r7, r5
 800346c:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8003470:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003474:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8003476:	18b6      	adds	r6, r6, r2
 8003478:	f147 0700 	adc.w	r7, r7, #0
 800347c:	0ef2      	lsrs	r2, r6, #27
 800347e:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
 8003482:	f029 487c 	bic.w	r8, r9, #4227858432	@ 0xfc000000
 8003486:	f08c 447c 	eor.w	r4, ip, #4227858432	@ 0xfc000000
 800348a:	f045 717c 	orr.w	r1, r5, #66060288	@ 0x3f00000
 800348e:	f046 767f 	orr.w	r6, r6, #66846720	@ 0x3fc0000
 8003492:	f08a 437c 	eor.w	r3, sl, #4227858432	@ 0xfc000000
 8003496:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800349a:	f428 6840 	bic.w	r8, r8, #3072	@ 0xc00
 800349e:	f484 0440 	eor.w	r4, r4, #12582912	@ 0xc00000
 80034a2:	f441 317f 	orr.w	r1, r1, #261120	@ 0x3fc00
 80034a6:	f446 364f 	orr.w	r6, r6, #211968	@ 0x33c00
 80034aa:	4490      	add	r8, r2
 80034ac:	43e4      	mvns	r4, r4
 80034ae:	f441 717f 	orr.w	r1, r1, #1020	@ 0x3fc
 80034b2:	f483 4340 	eor.w	r3, r3, #49152	@ 0xc000
 80034b6:	f446 767f 	orr.w	r6, r6, #1020	@ 0x3fc
 80034ba:	f041 0103 	orr.w	r1, r1, #3
 80034be:	43db      	mvns	r3, r3
 80034c0:	eb04 6498 	add.w	r4, r4, r8, lsr #26
 80034c4:	f028 427c 	bic.w	r2, r8, #4227858432	@ 0xfc000000
 80034c8:	f046 0603 	orr.w	r6, r6, #3
 80034cc:	6081      	str	r1, [r0, #8]
 80034ce:	60c3      	str	r3, [r0, #12]
 80034d0:	e880 0014 	stmia.w	r0, {r2, r4}
 80034d4:	6106      	str	r6, [r0, #16]
 80034d6:	b01e      	add	sp, #120	@ 0x78
 80034d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <ChaCha20Poly1305_Append.part.30>:
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e4:	b09d      	sub	sp, #116	@ 0x74
 80034e6:	2a3f      	cmp	r2, #63	@ 0x3f
 80034e8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80034ea:	9005      	str	r0, [sp, #20]
 80034ec:	468b      	mov	fp, r1
 80034ee:	461e      	mov	r6, r3
 80034f0:	f340 82c0 	ble.w	8003a74 <ChaCha20Poly1305_Append.part.30+0x594>
 80034f4:	f1a2 0340 	sub.w	r3, r2, #64	@ 0x40
 80034f8:	f100 0754 	add.w	r7, r0, #84	@ 0x54
 80034fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003500:	3340      	adds	r3, #64	@ 0x40
 8003502:	970a      	str	r7, [sp, #40]	@ 0x28
 8003504:	f04f 0800 	mov.w	r8, #0
 8003508:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800350c:	f10d 0c73 	add.w	ip, sp, #115	@ 0x73
 8003510:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 8003514:	9308      	str	r3, [sp, #32]
 8003516:	f8cd 8010 	str.w	r8, [sp, #16]
 800351a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800351e:	f8cd c004 	str.w	ip, [sp, #4]
 8003522:	9707      	str	r7, [sp, #28]
 8003524:	46b2      	mov	sl, r6
 8003526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003528:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800352a:	f7ff f951 	bl	80027d0 <salsa20_wordtobyte>
 800352e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003532:	9d04      	ldr	r5, [sp, #16]
 8003534:	f8d8 3084 	ldr.w	r3, [r8, #132]	@ 0x84
 8003538:	46a9      	mov	r9, r5
 800353a:	3301      	adds	r3, #1
 800353c:	44d9      	add	r9, fp
 800353e:	f108 0c1c 	add.w	ip, r8, #28
 8003542:	f8c8 3084 	str.w	r3, [r8, #132]	@ 0x84
 8003546:	f10d 0433 	add.w	r4, sp, #51	@ 0x33
 800354a:	f8cd 9008 	str.w	r9, [sp, #8]
 800354e:	f8cd c018 	str.w	ip, [sp, #24]
 8003552:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8003554:	2e01      	cmp	r6, #1
 8003556:	f000 8193 	beq.w	8003880 <ChaCha20Poly1305_Append.part.30+0x3a0>
 800355a:	9f02      	ldr	r7, [sp, #8]
 800355c:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 8003560:	783b      	ldrb	r3, [r7, #0]
 8003562:	f814 8c01 	ldrb.w	r8, [r4, #-1]
 8003566:	f894 9000 	ldrb.w	r9, [r4]
 800356a:	f894 c003 	ldrb.w	ip, [r4, #3]
 800356e:	f8cd c00c 	str.w	ip, [sp, #12]
 8003572:	4043      	eors	r3, r0
 8003574:	f80a 3005 	strb.w	r3, [sl, r5]
 8003578:	1caa      	adds	r2, r5, #2
 800357a:	1ceb      	adds	r3, r5, #3
 800357c:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8003580:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8003584:	f81b c003 	ldrb.w	ip, [fp, r3]
 8003588:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800358c:	7861      	ldrb	r1, [r4, #1]
 800358e:	ea48 6909 	orr.w	r9, r8, r9, lsl #24
 8003592:	ea49 0900 	orr.w	r9, r9, r0
 8003596:	9802      	ldr	r0, [sp, #8]
 8003598:	f105 0801 	add.w	r8, r5, #1
 800359c:	043f      	lsls	r7, r7, #16
 800359e:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 80035a2:	f890 c000 	ldrb.w	ip, [r0]
 80035a6:	f81b 0008 	ldrb.w	r0, [fp, r8]
 80035aa:	ea47 070c 	orr.w	r7, r7, ip
 80035ae:	ea49 2606 	orr.w	r6, r9, r6, lsl #8
 80035b2:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
 80035b6:	4070      	eors	r0, r6
 80035b8:	0a00      	lsrs	r0, r0, #8
 80035ba:	f80a 0008 	strb.w	r0, [sl, r8]
 80035be:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80035c2:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80035c6:	f81b c003 	ldrb.w	ip, [fp, r3]
 80035ca:	f899 0000 	ldrb.w	r0, [r9]
 80035ce:	043f      	lsls	r7, r7, #16
 80035d0:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 80035d4:	4338      	orrs	r0, r7
 80035d6:	f81b 7008 	ldrb.w	r7, [fp, r8]
 80035da:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80035de:	4070      	eors	r0, r6
 80035e0:	0c00      	lsrs	r0, r0, #16
 80035e2:	f80a 0002 	strb.w	r0, [sl, r2]
 80035e6:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80035ea:	f81b 0003 	ldrb.w	r0, [fp, r3]
 80035ee:	f899 2000 	ldrb.w	r2, [r9]
 80035f2:	f81b c008 	ldrb.w	ip, [fp, r8]
 80035f6:	f894 8004 	ldrb.w	r8, [r4, #4]
 80035fa:	043f      	lsls	r7, r7, #16
 80035fc:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
 8003600:	4317      	orrs	r7, r2
 8003602:	ea47 2c0c 	orr.w	ip, r7, ip, lsl #8
 8003606:	ea8c 0606 	eor.w	r6, ip, r6
 800360a:	0e36      	lsrs	r6, r6, #24
 800360c:	f80a 6003 	strb.w	r6, [sl, r3]
 8003610:	1d2b      	adds	r3, r5, #4
 8003612:	1dae      	adds	r6, r5, #6
 8003614:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8003618:	f894 c002 	ldrb.w	ip, [r4, #2]
 800361c:	9f03      	ldr	r7, [sp, #12]
 800361e:	f8cd c000 	str.w	ip, [sp]
 8003622:	404a      	eors	r2, r1
 8003624:	f80a 2003 	strb.w	r2, [sl, r3]
 8003628:	1dea      	adds	r2, r5, #7
 800362a:	f81b c006 	ldrb.w	ip, [fp, r6]
 800362e:	f81b 0002 	ldrb.w	r0, [fp, r2]
 8003632:	ea4f 4907 	mov.w	r9, r7, lsl #16
 8003636:	ea49 6808 	orr.w	r8, r9, r8, lsl #24
 800363a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800363e:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 8003642:	ea48 0101 	orr.w	r1, r8, r1
 8003646:	1d68      	adds	r0, r5, #5
 8003648:	f81b 8003 	ldrb.w	r8, [fp, r3]
 800364c:	f81b 9000 	ldrb.w	r9, [fp, r0]
 8003650:	ea4c 0c08 	orr.w	ip, ip, r8
 8003654:	f8dd 8000 	ldr.w	r8, [sp]
 8003658:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 800365c:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
 8003660:	ea8c 0c01 	eor.w	ip, ip, r1
 8003664:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8003668:	f80a c000 	strb.w	ip, [sl, r0]
 800366c:	f81b 8006 	ldrb.w	r8, [fp, r6]
 8003670:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8003674:	f81b c003 	ldrb.w	ip, [fp, r3]
 8003678:	f894 9008 	ldrb.w	r9, [r4, #8]
 800367c:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8003680:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 8003684:	f81b 7000 	ldrb.w	r7, [fp, r0]
 8003688:	ea48 0c0c 	orr.w	ip, r8, ip
 800368c:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 8003690:	404f      	eors	r7, r1
 8003692:	0c3f      	lsrs	r7, r7, #16
 8003694:	f80a 7006 	strb.w	r7, [sl, r6]
 8003698:	f81b 7006 	ldrb.w	r7, [fp, r6]
 800369c:	f81b 6002 	ldrb.w	r6, [fp, r2]
 80036a0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80036a4:	f81b c000 	ldrb.w	ip, [fp, r0]
 80036a8:	7960      	ldrb	r0, [r4, #5]
 80036aa:	f894 8007 	ldrb.w	r8, [r4, #7]
 80036ae:	043f      	lsls	r7, r7, #16
 80036b0:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 80036b4:	431f      	orrs	r7, r3
 80036b6:	ea47 2c0c 	orr.w	ip, r7, ip, lsl #8
 80036ba:	ea8c 0101 	eor.w	r1, ip, r1
 80036be:	0e09      	lsrs	r1, r1, #24
 80036c0:	f80a 1002 	strb.w	r1, [sl, r2]
 80036c4:	f105 0308 	add.w	r3, r5, #8
 80036c8:	f105 010a 	add.w	r1, r5, #10
 80036cc:	f81b 2003 	ldrb.w	r2, [fp, r3]
 80036d0:	f894 c009 	ldrb.w	ip, [r4, #9]
 80036d4:	f8cd c00c 	str.w	ip, [sp, #12]
 80036d8:	4042      	eors	r2, r0
 80036da:	f80a 2003 	strb.w	r2, [sl, r3]
 80036de:	f105 020b 	add.w	r2, r5, #11
 80036e2:	f81b 7001 	ldrb.w	r7, [fp, r1]
 80036e6:	f81b c002 	ldrb.w	ip, [fp, r2]
 80036ea:	79a6      	ldrb	r6, [r4, #6]
 80036ec:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80036f0:	ea48 6909 	orr.w	r9, r8, r9, lsl #24
 80036f4:	043f      	lsls	r7, r7, #16
 80036f6:	f105 0809 	add.w	r8, r5, #9
 80036fa:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 80036fe:	f81b c003 	ldrb.w	ip, [fp, r3]
 8003702:	ea49 0900 	orr.w	r9, r9, r0
 8003706:	f81b 0008 	ldrb.w	r0, [fp, r8]
 800370a:	ea47 070c 	orr.w	r7, r7, ip
 800370e:	ea49 2606 	orr.w	r6, r9, r6, lsl #8
 8003712:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
 8003716:	4070      	eors	r0, r6
 8003718:	0a00      	lsrs	r0, r0, #8
 800371a:	f80a 0008 	strb.w	r0, [sl, r8]
 800371e:	f81b 7001 	ldrb.w	r7, [fp, r1]
 8003722:	f81b c002 	ldrb.w	ip, [fp, r2]
 8003726:	f81b 0003 	ldrb.w	r0, [fp, r3]
 800372a:	043f      	lsls	r7, r7, #16
 800372c:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 8003730:	4338      	orrs	r0, r7
 8003732:	f81b 7008 	ldrb.w	r7, [fp, r8]
 8003736:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 800373a:	4070      	eors	r0, r6
 800373c:	0c00      	lsrs	r0, r0, #16
 800373e:	f80a 0001 	strb.w	r0, [sl, r1]
 8003742:	f81b 0001 	ldrb.w	r0, [fp, r1]
 8003746:	f81b 1002 	ldrb.w	r1, [fp, r2]
 800374a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 800374e:	f81b 7008 	ldrb.w	r7, [fp, r8]
 8003752:	f894 800b 	ldrb.w	r8, [r4, #11]
 8003756:	0400      	lsls	r0, r0, #16
 8003758:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 800375c:	4318      	orrs	r0, r3
 800375e:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
 8003762:	f105 030c 	add.w	r3, r5, #12
 8003766:	407e      	eors	r6, r7
 8003768:	0e36      	lsrs	r6, r6, #24
 800376a:	f80a 6002 	strb.w	r6, [sl, r2]
 800376e:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8003772:	9903      	ldr	r1, [sp, #12]
 8003774:	7b26      	ldrb	r6, [r4, #12]
 8003776:	7aa7      	ldrb	r7, [r4, #10]
 8003778:	404a      	eors	r2, r1
 800377a:	f80a 2003 	strb.w	r2, [sl, r3]
 800377e:	f105 000e 	add.w	r0, r5, #14
 8003782:	f105 020f 	add.w	r2, r5, #15
 8003786:	f81b c000 	ldrb.w	ip, [fp, r0]
 800378a:	f81b 1002 	ldrb.w	r1, [fp, r2]
 800378e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8003792:	ea48 6606 	orr.w	r6, r8, r6, lsl #24
 8003796:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800379a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800379e:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
 80037a2:	f105 010d 	add.w	r1, r5, #13
 80037a6:	ea46 0608 	orr.w	r6, r6, r8
 80037aa:	f81b 8003 	ldrb.w	r8, [fp, r3]
 80037ae:	f81b 9001 	ldrb.w	r9, [fp, r1]
 80037b2:	ea4c 0c08 	orr.w	ip, ip, r8
 80037b6:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80037ba:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 80037be:	ea8c 0c06 	eor.w	ip, ip, r6
 80037c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80037c6:	f80a c001 	strb.w	ip, [sl, r1]
 80037ca:	f81b 8000 	ldrb.w	r8, [fp, r0]
 80037ce:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80037d2:	f81b c003 	ldrb.w	ip, [fp, r3]
 80037d6:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80037da:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 80037de:	f81b 7001 	ldrb.w	r7, [fp, r1]
 80037e2:	ea48 0c0c 	orr.w	ip, r8, ip
 80037e6:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 80037ea:	4077      	eors	r7, r6
 80037ec:	0c3f      	lsrs	r7, r7, #16
 80037ee:	f80a 7000 	strb.w	r7, [sl, r0]
 80037f2:	f81b c000 	ldrb.w	ip, [fp, r0]
 80037f6:	f81b 0002 	ldrb.w	r0, [fp, r2]
 80037fa:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80037fe:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8003802:	ea4f 470c 	mov.w	r7, ip, lsl #16
 8003806:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
 800380a:	431f      	orrs	r7, r3
 800380c:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
 8003810:	407e      	eors	r6, r7
 8003812:	0e36      	lsrs	r6, r6, #24
 8003814:	f80a 6002 	strb.w	r6, [sl, r2]
 8003818:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 800381a:	eb0a 0205 	add.w	r2, sl, r5
 800381e:	b34e      	cbz	r6, 8003874 <ChaCha20Poly1305_Append.part.30+0x394>
 8003820:	9f02      	ldr	r7, [sp, #8]
 8003822:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003826:	3410      	adds	r4, #16
 8003828:	3710      	adds	r7, #16
 800382a:	4544      	cmp	r4, r8
 800382c:	f105 0510 	add.w	r5, r5, #16
 8003830:	9702      	str	r7, [sp, #8]
 8003832:	f47f ae8e 	bne.w	8003552 <ChaCha20Poly1305_Append.part.30+0x72>
 8003836:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800383a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800383e:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 8003842:	45e1      	cmp	r9, ip
 8003844:	f8cd 9010 	str.w	r9, [sp, #16]
 8003848:	f47f ae6d 	bne.w	8003526 <ChaCha20Poly1305_Append.part.30+0x46>
 800384c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003850:	4656      	mov	r6, sl
 8003852:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8003854:	4547      	cmp	r7, r8
 8003856:	dc1a      	bgt.n	800388e <ChaCha20Poly1305_Append.part.30+0x3ae>
 8003858:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 800385a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800385c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003860:	603e      	str	r6, [r7, #0]
 8003862:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003866:	2000      	movs	r0, #0
 8003868:	4433      	add	r3, r6
 800386a:	f8c8 3018 	str.w	r3, [r8, #24]
 800386e:	b01d      	add	sp, #116	@ 0x74
 8003870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003874:	9807      	ldr	r0, [sp, #28]
 8003876:	9906      	ldr	r1, [sp, #24]
 8003878:	4633      	mov	r3, r6
 800387a:	f7ff fa9b 	bl	8002db4 <Poly1305_Core_Update>
 800387e:	e7cf      	b.n	8003820 <ChaCha20Poly1305_Append.part.30+0x340>
 8003880:	9807      	ldr	r0, [sp, #28]
 8003882:	9906      	ldr	r1, [sp, #24]
 8003884:	9a02      	ldr	r2, [sp, #8]
 8003886:	2300      	movs	r3, #0
 8003888:	f7ff fa94 	bl	8002db4 <Poly1305_Core_Update>
 800388c:	e665      	b.n	800355a <ChaCha20Poly1305_Append.part.30+0x7a>
 800388e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003892:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003896:	4648      	mov	r0, r9
 8003898:	f10c 0154 	add.w	r1, ip, #84	@ 0x54
 800389c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80038a0:	f7fe ff96 	bl	80027d0 <salsa20_wordtobyte>
 80038a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80038a6:	ebc8 0707 	rsb	r7, r8, r7
 80038aa:	2f00      	cmp	r7, #0
 80038ac:	f340 80d0 	ble.w	8003a50 <ChaCha20Poly1305_Append.part.30+0x570>
 80038b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80038b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80038b8:	9d08      	ldr	r5, [sp, #32]
 80038ba:	f8dd a020 	ldr.w	sl, [sp, #32]
 80038be:	f8dd c020 	ldr.w	ip, [sp, #32]
 80038c2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80038c4:	9604      	str	r6, [sp, #16]
 80038c6:	1e7b      	subs	r3, r7, #1
 80038c8:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 80038cc:	f023 030f 	bic.w	r3, r3, #15
 80038d0:	f1a7 0220 	sub.w	r2, r7, #32
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80038da:	f109 091c 	add.w	r9, r9, #28
 80038de:	f1a7 0810 	sub.w	r8, r7, #16
 80038e2:	44b2      	add	sl, r6
 80038e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80038e6:	4646      	mov	r6, r8
 80038e8:	f8cd 901c 	str.w	r9, [sp, #28]
 80038ec:	445d      	add	r5, fp
 80038ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80038f2:	46e0      	mov	r8, ip
 80038f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038f8:	9904      	ldr	r1, [sp, #16]
 80038fa:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80038fc:	ebc9 0c08 	rsb	ip, r9, r8
 8003900:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003904:	2f10      	cmp	r7, #16
 8003906:	bf28      	it	cs
 8003908:	2710      	movcs	r7, #16
 800390a:	2800      	cmp	r0, #0
 800390c:	bf08      	it	eq
 800390e:	4689      	moveq	r9, r1
 8003910:	2f00      	cmp	r7, #0
 8003912:	d07c      	beq.n	8003a0e <ChaCha20Poly1305_Append.part.30+0x52e>
 8003914:	f10a 0304 	add.w	r3, sl, #4
 8003918:	42ab      	cmp	r3, r5
 800391a:	bf8c      	ite	hi
 800391c:	2000      	movhi	r0, #0
 800391e:	2001      	movls	r0, #1
 8003920:	eb09 0108 	add.w	r1, r9, r8
 8003924:	1d2a      	adds	r2, r5, #4
 8003926:	4592      	cmp	sl, r2
 8003928:	bf34      	ite	cc
 800392a:	4602      	movcc	r2, r0
 800392c:	f040 0201 	orrcs.w	r2, r0, #1
 8003930:	4299      	cmp	r1, r3
 8003932:	bf34      	ite	cc
 8003934:	2300      	movcc	r3, #0
 8003936:	2301      	movcs	r3, #1
 8003938:	1d08      	adds	r0, r1, #4
 800393a:	2f05      	cmp	r7, #5
 800393c:	bf94      	ite	ls
 800393e:	2200      	movls	r2, #0
 8003940:	f002 0201 	andhi.w	r2, r2, #1
 8003944:	4550      	cmp	r0, sl
 8003946:	bf98      	it	ls
 8003948:	f043 0301 	orrls.w	r3, r3, #1
 800394c:	421a      	tst	r2, r3
 800394e:	f000 8085 	beq.w	8003a5c <ChaCha20Poly1305_Append.part.30+0x57c>
 8003952:	ea4a 0304 	orr.w	r3, sl, r4
 8003956:	432b      	orrs	r3, r5
 8003958:	430b      	orrs	r3, r1
 800395a:	079b      	lsls	r3, r3, #30
 800395c:	d17e      	bne.n	8003a5c <ChaCha20Poly1305_Append.part.30+0x57c>
 800395e:	ea4f 0e97 	mov.w	lr, r7, lsr #2
 8003962:	2300      	movs	r3, #0
 8003964:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8003968:	461a      	mov	r2, r3
 800396a:	9602      	str	r6, [sp, #8]
 800396c:	58e8      	ldr	r0, [r5, r3]
 800396e:	58e6      	ldr	r6, [r4, r3]
 8003970:	4070      	eors	r0, r6
 8003972:	f84a 0003 	str.w	r0, [sl, r3]
 8003976:	3201      	adds	r2, #1
 8003978:	58c8      	ldr	r0, [r1, r3]
 800397a:	50e0      	str	r0, [r4, r3]
 800397c:	4596      	cmp	lr, r2
 800397e:	f103 0304 	add.w	r3, r3, #4
 8003982:	d8f3      	bhi.n	800396c <ChaCha20Poly1305_Append.part.30+0x48c>
 8003984:	455f      	cmp	r7, fp
 8003986:	9e02      	ldr	r6, [sp, #8]
 8003988:	d03f      	beq.n	8003a0a <ChaCha20Poly1305_Append.part.30+0x52a>
 800398a:	aa1c      	add	r2, sp, #112	@ 0x70
 800398c:	eb0b 030c 	add.w	r3, fp, ip
 8003990:	eb0b 0108 	add.w	r1, fp, r8
 8003994:	4413      	add	r3, r2
 8003996:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800399a:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 800399e:	f81e 0001 	ldrb.w	r0, [lr, r1]
 80039a2:	4042      	eors	r2, r0
 80039a4:	9804      	ldr	r0, [sp, #16]
 80039a6:	5442      	strb	r2, [r0, r1]
 80039a8:	f10b 0201 	add.w	r2, fp, #1
 80039ac:	f819 1001 	ldrb.w	r1, [r9, r1]
 80039b0:	f803 1c40 	strb.w	r1, [r3, #-64]
 80039b4:	42ba      	cmp	r2, r7
 80039b6:	da28      	bge.n	8003a0a <ChaCha20Poly1305_Append.part.30+0x52a>
 80039b8:	eb02 030c 	add.w	r3, r2, ip
 80039bc:	a91c      	add	r1, sp, #112	@ 0x70
 80039be:	4442      	add	r2, r8
 80039c0:	440b      	add	r3, r1
 80039c2:	f81e 0002 	ldrb.w	r0, [lr, r2]
 80039c6:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 80039ca:	f8dd e010 	ldr.w	lr, [sp, #16]
 80039ce:	4041      	eors	r1, r0
 80039d0:	f80e 1002 	strb.w	r1, [lr, r2]
 80039d4:	f10b 0b02 	add.w	fp, fp, #2
 80039d8:	f819 2002 	ldrb.w	r2, [r9, r2]
 80039dc:	f803 2c40 	strb.w	r2, [r3, #-64]
 80039e0:	455f      	cmp	r7, fp
 80039e2:	dd12      	ble.n	8003a0a <ChaCha20Poly1305_Append.part.30+0x52a>
 80039e4:	eb0b 030c 	add.w	r3, fp, ip
 80039e8:	f10d 0e70 	add.w	lr, sp, #112	@ 0x70
 80039ec:	44c3      	add	fp, r8
 80039ee:	4473      	add	r3, lr
 80039f0:	9803      	ldr	r0, [sp, #12]
 80039f2:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 80039f6:	f810 100b 	ldrb.w	r1, [r0, fp]
 80039fa:	404a      	eors	r2, r1
 80039fc:	9904      	ldr	r1, [sp, #16]
 80039fe:	f801 200b 	strb.w	r2, [r1, fp]
 8003a02:	f819 200b 	ldrb.w	r2, [r9, fp]
 8003a06:	f803 2c40 	strb.w	r2, [r3, #-64]
 8003a0a:	2f10      	cmp	r7, #16
 8003a0c:	d00b      	beq.n	8003a26 <ChaCha20Poly1305_Append.part.30+0x546>
 8003a0e:	2f0f      	cmp	r7, #15
 8003a10:	eb07 000c 	add.w	r0, r7, ip
 8003a14:	f1c7 0210 	rsb	r2, r7, #16
 8003a18:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8003a1a:	bfc8      	it	gt
 8003a1c:	2201      	movgt	r2, #1
 8003a1e:	4438      	add	r0, r7
 8003a20:	2100      	movs	r1, #0
 8003a22:	f001 f8c7 	bl	8004bb4 <memset>
 8003a26:	4622      	mov	r2, r4
 8003a28:	9806      	ldr	r0, [sp, #24]
 8003a2a:	9907      	ldr	r1, [sp, #28]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f7ff f9c1 	bl	8002db4 <Poly1305_Core_Update>
 8003a32:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8003a36:	4637      	mov	r7, r6
 8003a38:	3e10      	subs	r6, #16
 8003a3a:	454e      	cmp	r6, r9
 8003a3c:	f105 0510 	add.w	r5, r5, #16
 8003a40:	f10a 0a10 	add.w	sl, sl, #16
 8003a44:	f108 0810 	add.w	r8, r8, #16
 8003a48:	f104 0410 	add.w	r4, r4, #16
 8003a4c:	f47f af52 	bne.w	80038f4 <ChaCha20Poly1305_Append.part.30+0x414>
 8003a50:	9e05      	ldr	r6, [sp, #20]
 8003a52:	7933      	ldrb	r3, [r6, #4]
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	7133      	strb	r3, [r6, #4]
 8003a5a:	e6fd      	b.n	8003858 <ChaCha20Poly1305_Append.part.30+0x378>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	5ce8      	ldrb	r0, [r5, r3]
 8003a60:	5ce2      	ldrb	r2, [r4, r3]
 8003a62:	4042      	eors	r2, r0
 8003a64:	f80a 2003 	strb.w	r2, [sl, r3]
 8003a68:	5cca      	ldrb	r2, [r1, r3]
 8003a6a:	54e2      	strb	r2, [r4, r3]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	429f      	cmp	r7, r3
 8003a70:	d1f5      	bne.n	8003a5e <ChaCha20Poly1305_Append.part.30+0x57e>
 8003a72:	e7ca      	b.n	8003a0a <ChaCha20Poly1305_Append.part.30+0x52a>
 8003a74:	2700      	movs	r7, #0
 8003a76:	9708      	str	r7, [sp, #32]
 8003a78:	46b8      	mov	r8, r7
 8003a7a:	e6ea      	b.n	8003852 <ChaCha20Poly1305_Append.part.30+0x372>

08003a7c <Poly1305_Core_Finish>:
 8003a7c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a80:	4b85      	ldr	r3, [pc, #532]	@ (8003c98 <Poly1305_Core_Finish+0x21c>)
 8003a82:	4c86      	ldr	r4, [pc, #536]	@ (8003c9c <Poly1305_Core_Finish+0x220>)
 8003a84:	b088      	sub	sp, #32
 8003a86:	f04f 0800 	mov.w	r8, #0
 8003a8a:	2501      	movs	r5, #1
 8003a8c:	f8cd 801c 	str.w	r8, [sp, #28]
 8003a90:	601d      	str	r5, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	9307      	str	r3, [sp, #28]
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	9307      	str	r3, [sp, #28]
 8003a9a:	9b07      	ldr	r3, [sp, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	d02a      	beq.n	8003af6 <Poly1305_Core_Finish+0x7a>
 8003aa0:	684e      	ldr	r6, [r1, #4]
 8003aa2:	2700      	movs	r7, #0
 8003aa4:	f116 467c 	adds.w	r6, r6, #4227858432	@ 0xfc000000
 8003aa8:	6016      	str	r6, [r2, #0]
 8003aaa:	68ce      	ldr	r6, [r1, #12]
 8003aac:	f147 0700 	adc.w	r7, r7, #0
 8003ab0:	463c      	mov	r4, r7
 8003ab2:	f116 36ff 	adds.w	r6, r6, #4294967295
 8003ab6:	f04f 0700 	mov.w	r7, #0
 8003aba:	f147 0700 	adc.w	r7, r7, #0
 8003abe:	19a4      	adds	r4, r4, r6
 8003ac0:	60d4      	str	r4, [r2, #12]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	eb48 0507 	adc.w	r5, r8, r7
 8003ac8:	18ee      	adds	r6, r5, r3
 8003aca:	6096      	str	r6, [r2, #8]
 8003acc:	688e      	ldr	r6, [r1, #8]
 8003ace:	f148 0700 	adc.w	r7, r8, #0
 8003ad2:	f116 36ff 	adds.w	r6, r6, #4294967295
 8003ad6:	19bc      	adds	r4, r7, r6
 8003ad8:	6054      	str	r4, [r2, #4]
 8003ada:	f8c0 8000 	str.w	r8, [r0]
 8003ade:	f8c0 8004 	str.w	r8, [r0, #4]
 8003ae2:	f8c0 8008 	str.w	r8, [r0, #8]
 8003ae6:	f8c0 800c 	str.w	r8, [r0, #12]
 8003aea:	f8c0 8010 	str.w	r8, [r0, #16]
 8003aee:	b008      	add	sp, #32
 8003af0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003af4:	4770      	bx	lr
 8003af6:	9b07      	ldr	r3, [sp, #28]
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8003b02:	f1bc 0f00 	cmp.w	ip, #0
 8003b06:	f040 809f 	bne.w	8003c48 <Poly1305_Core_Finish+0x1cc>
 8003b0a:	6843      	ldr	r3, [r0, #4]
 8003b0c:	6887      	ldr	r7, [r0, #8]
 8003b0e:	68c6      	ldr	r6, [r0, #12]
 8003b10:	6905      	ldr	r5, [r0, #16]
 8003b12:	6804      	ldr	r4, [r0, #0]
 8003b14:	eb07 6793 	add.w	r7, r7, r3, lsr #26
 8003b18:	eb06 6697 	add.w	r6, r6, r7, lsr #26
 8003b1c:	eb05 6596 	add.w	r5, r5, r6, lsr #26
 8003b20:	ea4f 6995 	mov.w	r9, r5, lsr #26
 8003b24:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8003b28:	444c      	add	r4, r9
 8003b2a:	f023 487c 	bic.w	r8, r3, #4227858432	@ 0xfc000000
 8003b2e:	f024 4b7c 	bic.w	fp, r4, #4227858432	@ 0xfc000000
 8003b32:	f026 467c 	bic.w	r6, r6, #4227858432	@ 0xfc000000
 8003b36:	9601      	str	r6, [sp, #4]
 8003b38:	eb08 6494 	add.w	r4, r8, r4, lsr #26
 8003b3c:	f10b 0905 	add.w	r9, fp, #5
 8003b40:	f025 457c 	bic.w	r5, r5, #4227858432	@ 0xfc000000
 8003b44:	eb04 6a99 	add.w	sl, r4, r9, lsr #26
 8003b48:	9504      	str	r5, [sp, #16]
 8003b4a:	f027 477c 	bic.w	r7, r7, #4227858432	@ 0xfc000000
 8003b4e:	9d01      	ldr	r5, [sp, #4]
 8003b50:	eb07 669a 	add.w	r6, r7, sl, lsr #26
 8003b54:	eb05 6396 	add.w	r3, r5, r6, lsr #26
 8003b58:	9d04      	ldr	r5, [sp, #16]
 8003b5a:	f105 487c 	add.w	r8, r5, #4227858432	@ 0xfc000000
 8003b5e:	eb08 6893 	add.w	r8, r8, r3, lsr #26
 8003b62:	f8cd 8014 	str.w	r8, [sp, #20]
 8003b66:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8003b6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b6e:	f029 497c 	bic.w	r9, r9, #4227858432	@ 0xfc000000
 8003b72:	ea09 0508 	and.w	r5, r9, r8
 8003b76:	f02a 4a7c 	bic.w	sl, sl, #4227858432	@ 0xfc000000
 8003b7a:	ea6f 0908 	mvn.w	r9, r8
 8003b7e:	ea09 0404 	and.w	r4, r9, r4
 8003b82:	ea0a 0a08 	and.w	sl, sl, r8
 8003b86:	ea09 0b0b 	and.w	fp, r9, fp
 8003b8a:	ea44 0a0a 	orr.w	sl, r4, sl
 8003b8e:	ea4b 0b05 	orr.w	fp, fp, r5
 8003b92:	680c      	ldr	r4, [r1, #0]
 8003b94:	ea4b 6b8a 	orr.w	fp, fp, sl, lsl #26
 8003b98:	eb14 040b 	adds.w	r4, r4, fp
 8003b9c:	f04f 0500 	mov.w	r5, #0
 8003ba0:	f026 467c 	bic.w	r6, r6, #4227858432	@ 0xfc000000
 8003ba4:	f145 0500 	adc.w	r5, r5, #0
 8003ba8:	ea06 0608 	and.w	r6, r6, r8
 8003bac:	ea09 0707 	and.w	r7, r9, r7
 8003bb0:	6014      	str	r4, [r2, #0]
 8003bb2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003bb6:	ea47 0506 	orr.w	r5, r7, r6
 8003bba:	052c      	lsls	r4, r5, #20
 8003bbc:	684e      	ldr	r6, [r1, #4]
 8003bbe:	f8dd b014 	ldr.w	fp, [sp, #20]
 8003bc2:	ea44 149a 	orr.w	r4, r4, sl, lsr #6
 8003bc6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003bca:	1936      	adds	r6, r6, r4
 8003bcc:	f04f 0700 	mov.w	r7, #0
 8003bd0:	f147 0700 	adc.w	r7, r7, #0
 8003bd4:	eb16 060a 	adds.w	r6, r6, sl
 8003bd8:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003bdc:	6056      	str	r6, [r2, #4]
 8003bde:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003be2:	ea09 040a 	and.w	r4, r9, sl
 8003be6:	ea03 0308 	and.w	r3, r3, r8
 8003bea:	ea44 0303 	orr.w	r3, r4, r3
 8003bee:	ea4f 3683 	mov.w	r6, r3, lsl #14
 8003bf2:	688c      	ldr	r4, [r1, #8]
 8003bf4:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8003bf8:	eb47 070c 	adc.w	r7, r7, ip
 8003bfc:	19a4      	adds	r4, r4, r6
 8003bfe:	9e04      	ldr	r6, [sp, #16]
 8003c00:	f04f 0500 	mov.w	r5, #0
 8003c04:	ea09 0906 	and.w	r9, r9, r6
 8003c08:	f145 0500 	adc.w	r5, r5, #0
 8003c0c:	ea08 080b 	and.w	r8, r8, fp
 8003c10:	19e4      	adds	r4, r4, r7
 8003c12:	6094      	str	r4, [r2, #8]
 8003c14:	ea49 0808 	orr.w	r8, r9, r8
 8003c18:	68cc      	ldr	r4, [r1, #12]
 8003c1a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8003c1e:	ea48 4393 	orr.w	r3, r8, r3, lsr #18
 8003c22:	eb45 050c 	adc.w	r5, r5, ip
 8003c26:	18e4      	adds	r4, r4, r3
 8003c28:	192e      	adds	r6, r5, r4
 8003c2a:	60d6      	str	r6, [r2, #12]
 8003c2c:	f8c0 c000 	str.w	ip, [r0]
 8003c30:	f8c0 c004 	str.w	ip, [r0, #4]
 8003c34:	f8c0 c008 	str.w	ip, [r0, #8]
 8003c38:	f8c0 c00c 	str.w	ip, [r0, #12]
 8003c3c:	f8c0 c010 	str.w	ip, [r0, #16]
 8003c40:	b008      	add	sp, #32
 8003c42:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c46:	4770      	bx	lr
 8003c48:	6803      	ldr	r3, [r0, #0]
 8003c4a:	6907      	ldr	r7, [r0, #16]
 8003c4c:	6886      	ldr	r6, [r0, #8]
 8003c4e:	68c5      	ldr	r5, [r0, #12]
 8003c50:	6844      	ldr	r4, [r0, #4]
 8003c52:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003c56:	eb07 6793 	add.w	r7, r7, r3, lsr #26
 8003c5a:	eb06 6697 	add.w	r6, r6, r7, lsr #26
 8003c5e:	eb05 6596 	add.w	r5, r5, r6, lsr #26
 8003c62:	0ead      	lsrs	r5, r5, #26
 8003c64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003c68:	442c      	add	r4, r5
 8003c6a:	f024 4670 	bic.w	r6, r4, #4026531840	@ 0xf0000000
 8003c6e:	f023 457c 	bic.w	r5, r3, #4227858432	@ 0xfc000000
 8003c72:	f425 0540 	bic.w	r5, r5, #12582912	@ 0xc00000
 8003c76:	3605      	adds	r6, #5
 8003c78:	0ef6      	lsrs	r6, r6, #27
 8003c7a:	eb05 6494 	add.w	r4, r5, r4, lsr #26
 8003c7e:	fb04 f406 	mul.w	r4, r4, r6
 8003c82:	f084 447c 	eor.w	r4, r4, #4227858432	@ 0xfc000000
 8003c86:	43e4      	mvns	r4, r4
 8003c88:	06a4      	lsls	r4, r4, #26
 8003c8a:	f04f 0b00 	mov.w	fp, #0
 8003c8e:	465f      	mov	r7, fp
 8003c90:	eb1a 0604 	adds.w	r6, sl, r4
 8003c94:	e708      	b.n	8003aa8 <Poly1305_Core_Finish+0x2c>
 8003c96:	bf00      	nop
 8003c98:	40023008 	.word	0x40023008
 8003c9c:	40023000 	.word	0x40023000

08003ca0 <ChaCha20Poly1305_Encrypt_Init>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	b097      	sub	sp, #92	@ 0x5c
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	f000 8166 	beq.w	8003f7a <ChaCha20Poly1305_Encrypt_Init+0x2da>
 8003cae:	2900      	cmp	r1, #0
 8003cb0:	f000 8163 	beq.w	8003f7a <ChaCha20Poly1305_Encrypt_Init+0x2da>
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	f000 8160 	beq.w	8003f7a <ChaCha20Poly1305_Encrypt_Init+0x2da>
 8003cba:	7903      	ldrb	r3, [r0, #4]
 8003cbc:	6081      	str	r1, [r0, #8]
 8003cbe:	f023 0006 	bic.w	r0, r3, #6
 8003cc2:	07db      	lsls	r3, r3, #31
 8003cc4:	60e2      	str	r2, [r4, #12]
 8003cc6:	7120      	strb	r0, [r4, #4]
 8003cc8:	d460      	bmi.n	8003d8c <ChaCha20Poly1305_Encrypt_Init+0xec>
 8003cca:	4eae      	ldr	r6, [pc, #696]	@ (8003f84 <ChaCha20Poly1305_Encrypt_Init+0x2e4>)
 8003ccc:	4dae      	ldr	r5, [pc, #696]	@ (8003f88 <ChaCha20Poly1305_Encrypt_Init+0x2e8>)
 8003cce:	48af      	ldr	r0, [pc, #700]	@ (8003f8c <ChaCha20Poly1305_Encrypt_Init+0x2ec>)
 8003cd0:	4baf      	ldr	r3, [pc, #700]	@ (8003f90 <ChaCha20Poly1305_Encrypt_Init+0x2f0>)
 8003cd2:	6566      	str	r6, [r4, #84]	@ 0x54
 8003cd4:	65a5      	str	r5, [r4, #88]	@ 0x58
 8003cd6:	65e0      	str	r0, [r4, #92]	@ 0x5c
 8003cd8:	6623      	str	r3, [r4, #96]	@ 0x60
 8003cda:	788b      	ldrb	r3, [r1, #2]
 8003cdc:	784e      	ldrb	r6, [r1, #1]
 8003cde:	780d      	ldrb	r5, [r1, #0]
 8003ce0:	78c8      	ldrb	r0, [r1, #3]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003ce8:	432b      	orrs	r3, r5
 8003cea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003cee:	6663      	str	r3, [r4, #100]	@ 0x64
 8003cf0:	798b      	ldrb	r3, [r1, #6]
 8003cf2:	79ce      	ldrb	r6, [r1, #7]
 8003cf4:	790d      	ldrb	r5, [r1, #4]
 8003cf6:	7948      	ldrb	r0, [r1, #5]
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003cfe:	432b      	orrs	r3, r5
 8003d00:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d04:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003d06:	7a8b      	ldrb	r3, [r1, #10]
 8003d08:	7ace      	ldrb	r6, [r1, #11]
 8003d0a:	7a0d      	ldrb	r5, [r1, #8]
 8003d0c:	7a48      	ldrb	r0, [r1, #9]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003d14:	432b      	orrs	r3, r5
 8003d16:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d1a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8003d1c:	7b8b      	ldrb	r3, [r1, #14]
 8003d1e:	7bce      	ldrb	r6, [r1, #15]
 8003d20:	7b0d      	ldrb	r5, [r1, #12]
 8003d22:	7b48      	ldrb	r0, [r1, #13]
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003d2a:	432b      	orrs	r3, r5
 8003d2c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d30:	6723      	str	r3, [r4, #112]	@ 0x70
 8003d32:	7c8b      	ldrb	r3, [r1, #18]
 8003d34:	7cce      	ldrb	r6, [r1, #19]
 8003d36:	7c0d      	ldrb	r5, [r1, #16]
 8003d38:	7c48      	ldrb	r0, [r1, #17]
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003d40:	432b      	orrs	r3, r5
 8003d42:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d46:	6763      	str	r3, [r4, #116]	@ 0x74
 8003d48:	7d8b      	ldrb	r3, [r1, #22]
 8003d4a:	7dce      	ldrb	r6, [r1, #23]
 8003d4c:	7d0d      	ldrb	r5, [r1, #20]
 8003d4e:	7d48      	ldrb	r0, [r1, #21]
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003d56:	432b      	orrs	r3, r5
 8003d58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d5c:	67a3      	str	r3, [r4, #120]	@ 0x78
 8003d5e:	7e8b      	ldrb	r3, [r1, #26]
 8003d60:	7ece      	ldrb	r6, [r1, #27]
 8003d62:	7e0d      	ldrb	r5, [r1, #24]
 8003d64:	7e48      	ldrb	r0, [r1, #25]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003d6c:	432b      	orrs	r3, r5
 8003d6e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d72:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8003d74:	7f8b      	ldrb	r3, [r1, #30]
 8003d76:	7fcd      	ldrb	r5, [r1, #31]
 8003d78:	7f08      	ldrb	r0, [r1, #28]
 8003d7a:	7f49      	ldrb	r1, [r1, #29]
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003d82:	4303      	orrs	r3, r0
 8003d84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d88:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	6165      	str	r5, [r4, #20]
 8003d90:	61a5      	str	r5, [r4, #24]
 8003d92:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
 8003d96:	7893      	ldrb	r3, [r2, #2]
 8003d98:	78d6      	ldrb	r6, [r2, #3]
 8003d9a:	7810      	ldrb	r0, [r2, #0]
 8003d9c:	7851      	ldrb	r1, [r2, #1]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003da4:	4303      	orrs	r3, r0
 8003da6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003daa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8003dae:	7993      	ldrb	r3, [r2, #6]
 8003db0:	79d6      	ldrb	r6, [r2, #7]
 8003db2:	7910      	ldrb	r0, [r2, #4]
 8003db4:	7951      	ldrb	r1, [r2, #5]
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003dbc:	4303      	orrs	r3, r0
 8003dbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dc2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8003dc6:	7a93      	ldrb	r3, [r2, #10]
 8003dc8:	7ad0      	ldrb	r0, [r2, #11]
 8003dca:	7a11      	ldrb	r1, [r2, #8]
 8003dcc:	7a52      	ldrb	r2, [r2, #9]
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dda:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8003dde:	a806      	add	r0, sp, #24
 8003de0:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8003de4:	f7fe fcf4 	bl	80027d0 <salsa20_wordtobyte>
 8003de8:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8003dec:	f89d b02e 	ldrb.w	fp, [sp, #46]	@ 0x2e
 8003df0:	9002      	str	r0, [sp, #8]
 8003df2:	f8cd b00c 	str.w	fp, [sp, #12]
 8003df6:	f89d 1023 	ldrb.w	r1, [sp, #35]	@ 0x23
 8003dfa:	f89d b032 	ldrb.w	fp, [sp, #50]	@ 0x32
 8003dfe:	f8cd b010 	str.w	fp, [sp, #16]
 8003e02:	f89d a020 	ldrb.w	sl, [sp, #32]
 8003e06:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003e0a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8003e0e:	f89d c01d 	ldrb.w	ip, [sp, #29]
 8003e12:	f89d 901e 	ldrb.w	r9, [sp, #30]
 8003e16:	f89d 701a 	ldrb.w	r7, [sp, #26]
 8003e1a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003e1e:	f89d 8026 	ldrb.w	r8, [sp, #38]	@ 0x26
 8003e22:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
 8003e26:	f89d 602a 	ldrb.w	r6, [sp, #42]	@ 0x2a
 8003e2a:	0409      	lsls	r1, r1, #16
 8003e2c:	ea41 610b 	orr.w	r1, r1, fp, lsl #24
 8003e30:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8003e34:	4319      	orrs	r1, r3
 8003e36:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 8003e3a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	f89d b01f 	ldrb.w	fp, [sp, #31]
 8003e4a:	ea4c 6c09 	orr.w	ip, ip, r9, lsl #24
 8003e4e:	043f      	lsls	r7, r7, #16
 8003e50:	ea4c 0c02 	orr.w	ip, ip, r2
 8003e54:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 8003e58:	041a      	lsls	r2, r3, #16
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	ea4a 0a09 	orr.w	sl, sl, r9
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	f89d 9022 	ldrb.w	r9, [sp, #34]	@ 0x22
 8003e66:	9305      	str	r3, [sp, #20]
 8003e68:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8003e6c:	9b02      	ldr	r3, [sp, #8]
 8003e6e:	ea41 2909 	orr.w	r9, r1, r9, lsl #8
 8003e72:	ea48 6800 	orr.w	r8, r8, r0, lsl #24
 8003e76:	f89d 102f 	ldrb.w	r1, [sp, #47]	@ 0x2f
 8003e7a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8003e7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e82:	ea48 0803 	orr.w	r8, r8, r3
 8003e86:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8003e8a:	f89d 902b 	ldrb.w	r9, [sp, #43]	@ 0x2b
 8003e8e:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
 8003e92:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003e96:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003e9a:	9000      	str	r0, [sp, #0]
 8003e9c:	ea48 2303 	orr.w	r3, r8, r3, lsl #8
 8003ea0:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8003ea4:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
 8003ea8:	0436      	lsls	r6, r6, #16
 8003eaa:	f89d b033 	ldrb.w	fp, [sp, #51]	@ 0x33
 8003eae:	9204      	str	r2, [sp, #16]
 8003eb0:	f89d 8029 	ldrb.w	r8, [sp, #41]	@ 0x29
 8003eb4:	f8cd 8008 	str.w	r8, [sp, #8]
 8003eb8:	ea47 070c 	orr.w	r7, r7, ip
 8003ebc:	f8dd 8000 	ldr.w	r8, [sp]
 8003ec0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 8003eca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003ece:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8003ed2:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8003ed6:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8003eda:	6325      	str	r5, [r4, #48]	@ 0x30
 8003edc:	ea49 6b0b 	orr.w	fp, r9, fp, lsl #24
 8003ee0:	ea4f 199c 	mov.w	r9, ip, lsr #6
 8003ee4:	f3c8 0c99 	ubfx	ip, r8, #2, #26
 8003ee8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003eec:	6365      	str	r5, [r4, #52]	@ 0x34
 8003eee:	ea4b 0b03 	orr.w	fp, fp, r3
 8003ef2:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8003efc:	63a5      	str	r5, [r4, #56]	@ 0x38
 8003efe:	ea48 0101 	orr.w	r1, r8, r1
 8003f02:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003f06:	f3c3 2813 	ubfx	r8, r3, #8, #20
 8003f0a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003f0e:	9b02      	ldr	r3, [sp, #8]
 8003f10:	64a1      	str	r1, [r4, #72]	@ 0x48
 8003f12:	4316      	orrs	r6, r2
 8003f14:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 8003f1e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003f22:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 8003f26:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 8003f2a:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8003f2e:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8003f32:	ea4b 2202 	orr.w	r2, fp, r2, lsl #8
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	64e2      	str	r2, [r4, #76]	@ 0x4c
 8003f3a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003f3e:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 8003f42:	6466      	str	r6, [r4, #68]	@ 0x44
 8003f44:	430b      	orrs	r3, r1
 8003f46:	f3ca 1a19 	ubfx	sl, sl, #4, #26
 8003f4a:	f42a 5a7c 	bic.w	sl, sl, #16128	@ 0x3f00
 8003f4e:	f429 297c 	bic.w	r9, r9, #1032192	@ 0xfc000
 8003f52:	f02c 0cfc 	bic.w	ip, ip, #252	@ 0xfc
 8003f56:	f027 477c 	bic.w	r7, r7, #4227858432	@ 0xfc000000
 8003f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 8003f64:	f8c4 9028 	str.w	r9, [r4, #40]	@ 0x28
 8003f68:	f8c4 c020 	str.w	ip, [r4, #32]
 8003f6c:	61e7      	str	r7, [r4, #28]
 8003f6e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003f70:	6425      	str	r5, [r4, #64]	@ 0x40
 8003f72:	6523      	str	r3, [r4, #80]	@ 0x50
 8003f74:	b017      	add	sp, #92	@ 0x5c
 8003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7a:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8003f7e:	b017      	add	sp, #92	@ 0x5c
 8003f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f84:	61707865 	.word	0x61707865
 8003f88:	3320646e 	.word	0x3320646e
 8003f8c:	79622d32 	.word	0x79622d32
 8003f90:	6b206574 	.word	0x6b206574

08003f94 <ChaCha20Poly1305_Encrypt_Append>:
 8003f94:	b530      	push	{r4, r5, lr}
 8003f96:	b083      	sub	sp, #12
 8003f98:	b188      	cbz	r0, 8003fbe <ChaCha20Poly1305_Encrypt_Append+0x2a>
 8003f9a:	b171      	cbz	r1, 8003fba <ChaCha20Poly1305_Encrypt_Append+0x26>
 8003f9c:	7904      	ldrb	r4, [r0, #4]
 8003f9e:	f014 0406 	ands.w	r4, r4, #6
 8003fa2:	d003      	beq.n	8003fac <ChaCha20Poly1305_Encrypt_Append+0x18>
 8003fa4:	f640 401e 	movw	r0, #3102	@ 0xc1e
 8003fa8:	b003      	add	sp, #12
 8003faa:	bd30      	pop	{r4, r5, pc}
 8003fac:	9d06      	ldr	r5, [sp, #24]
 8003fae:	9500      	str	r5, [sp, #0]
 8003fb0:	9401      	str	r4, [sp, #4]
 8003fb2:	f7ff fa95 	bl	80034e0 <ChaCha20Poly1305_Append.part.30>
 8003fb6:	b003      	add	sp, #12
 8003fb8:	bd30      	pop	{r4, r5, pc}
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	ddee      	ble.n	8003f9c <ChaCha20Poly1305_Encrypt_Append+0x8>
 8003fbe:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8003fc2:	b003      	add	sp, #12
 8003fc4:	bd30      	pop	{r4, r5, pc}
 8003fc6:	bf00      	nop

08003fc8 <ChaCha20Poly1305_Header_Append>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b093      	sub	sp, #76	@ 0x4c
 8003fce:	9009      	str	r0, [sp, #36]	@ 0x24
 8003fd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f000 80c4 	beq.w	8004160 <ChaCha20Poly1305_Header_Append+0x198>
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	f000 80be 	beq.w	800415a <ChaCha20Poly1305_Header_Append+0x192>
 8003fde:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8003fe2:	f898 3004 	ldrb.w	r3, [r8, #4]
 8003fe6:	f013 0312 	ands.w	r3, r3, #18
 8003fea:	d004      	beq.n	8003ff6 <ChaCha20Poly1305_Header_Append+0x2e>
 8003fec:	f640 401e 	movw	r0, #3102	@ 0xc1e
 8003ff0:	b013      	add	sp, #76	@ 0x4c
 8003ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f340 8094 	ble.w	8004126 <ChaCha20Poly1305_Header_Append+0x15e>
 8003ffe:	1e42      	subs	r2, r0, #1
 8004000:	4605      	mov	r5, r0
 8004002:	f022 020f 	bic.w	r2, r2, #15
 8004006:	f101 001f 	add.w	r0, r1, #31
 800400a:	1882      	adds	r2, r0, r2
 800400c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800400e:	f101 0b0f 	add.w	fp, r1, #15
 8004012:	f108 021c 	add.w	r2, r8, #28
 8004016:	f108 0130 	add.w	r1, r8, #48	@ 0x30
 800401a:	461c      	mov	r4, r3
 800401c:	910a      	str	r1, [sp, #40]	@ 0x28
 800401e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004020:	2d10      	cmp	r5, #16
 8004022:	bf34      	ite	cc
 8004024:	462b      	movcc	r3, r5
 8004026:	2310      	movcs	r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 809e 	beq.w	800416a <ChaCha20Poly1305_Header_Append+0x1a2>
 800402e:	f81b 2c0f 	ldrb.w	r2, [fp, #-15]
 8004032:	f88d 2038 	strb.w	r2, [sp, #56]	@ 0x38
 8004036:	2b01      	cmp	r3, #1
 8004038:	f000 811b 	beq.w	8004272 <ChaCha20Poly1305_Header_Append+0x2aa>
 800403c:	f81b 2c0e 	ldrb.w	r2, [fp, #-14]
 8004040:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 8004044:	2b02      	cmp	r3, #2
 8004046:	f000 814e 	beq.w	80042e6 <ChaCha20Poly1305_Header_Append+0x31e>
 800404a:	f81b 2c0d 	ldrb.w	r2, [fp, #-13]
 800404e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8004052:	2b03      	cmp	r3, #3
 8004054:	f000 812b 	beq.w	80042ae <ChaCha20Poly1305_Header_Append+0x2e6>
 8004058:	f81b 2c0c 	ldrb.w	r2, [fp, #-12]
 800405c:	f88d 203b 	strb.w	r2, [sp, #59]	@ 0x3b
 8004060:	2b04      	cmp	r3, #4
 8004062:	f000 81b6 	beq.w	80043d2 <ChaCha20Poly1305_Header_Append+0x40a>
 8004066:	f81b 2c0b 	ldrb.w	r2, [fp, #-11]
 800406a:	f88d 203c 	strb.w	r2, [sp, #60]	@ 0x3c
 800406e:	2b05      	cmp	r3, #5
 8004070:	f000 8191 	beq.w	8004396 <ChaCha20Poly1305_Header_Append+0x3ce>
 8004074:	f81b 2c0a 	ldrb.w	r2, [fp, #-10]
 8004078:	f88d 203d 	strb.w	r2, [sp, #61]	@ 0x3d
 800407c:	2b06      	cmp	r3, #6
 800407e:	f000 816e 	beq.w	800435e <ChaCha20Poly1305_Header_Append+0x396>
 8004082:	f81b 2c09 	ldrb.w	r2, [fp, #-9]
 8004086:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 800408a:	2b07      	cmp	r3, #7
 800408c:	f000 8149 	beq.w	8004322 <ChaCha20Poly1305_Header_Append+0x35a>
 8004090:	f81b 2c08 	ldrb.w	r2, [fp, #-8]
 8004094:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 8004098:	2b08      	cmp	r3, #8
 800409a:	f000 826a 	beq.w	8004572 <ChaCha20Poly1305_Header_Append+0x5aa>
 800409e:	f81b 2c07 	ldrb.w	r2, [fp, #-7]
 80040a2:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 80040a6:	2b09      	cmp	r3, #9
 80040a8:	f000 8246 	beq.w	8004538 <ChaCha20Poly1305_Header_Append+0x570>
 80040ac:	f81b 2c06 	ldrb.w	r2, [fp, #-6]
 80040b0:	f88d 2041 	strb.w	r2, [sp, #65]	@ 0x41
 80040b4:	2b0a      	cmp	r3, #10
 80040b6:	f000 8223 	beq.w	8004500 <ChaCha20Poly1305_Header_Append+0x538>
 80040ba:	f81b 2c05 	ldrb.w	r2, [fp, #-5]
 80040be:	f88d 2042 	strb.w	r2, [sp, #66]	@ 0x42
 80040c2:	2b0b      	cmp	r3, #11
 80040c4:	f000 81fe 	beq.w	80044c4 <ChaCha20Poly1305_Header_Append+0x4fc>
 80040c8:	f81b 2c04 	ldrb.w	r2, [fp, #-4]
 80040cc:	f88d 2043 	strb.w	r2, [sp, #67]	@ 0x43
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	f000 81d9 	beq.w	8004488 <ChaCha20Poly1305_Header_Append+0x4c0>
 80040d6:	f81b 2c03 	ldrb.w	r2, [fp, #-3]
 80040da:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
 80040de:	2b0d      	cmp	r3, #13
 80040e0:	f000 81b6 	beq.w	8004450 <ChaCha20Poly1305_Header_Append+0x488>
 80040e4:	f81b 2c02 	ldrb.w	r2, [fp, #-2]
 80040e8:	f88d 2045 	strb.w	r2, [sp, #69]	@ 0x45
 80040ec:	2b0e      	cmp	r3, #14
 80040ee:	f000 8191 	beq.w	8004414 <ChaCha20Poly1305_Header_Append+0x44c>
 80040f2:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80040f6:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	f040 8187 	bne.w	800440e <ChaCha20Poly1305_Header_Append+0x446>
 8004100:	f89b 3000 	ldrb.w	r3, [fp]
 8004104:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
 8004108:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800410a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800410c:	aa0e      	add	r2, sp, #56	@ 0x38
 800410e:	2300      	movs	r3, #0
 8004110:	f7fe fe50 	bl	8002db4 <Poly1305_Core_Update>
 8004114:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8004118:	f10b 0b10 	add.w	fp, fp, #16
 800411c:	45cb      	cmp	fp, r9
 800411e:	f1a5 0510 	sub.w	r5, r5, #16
 8004122:	f47f af7d 	bne.w	8004020 <ChaCha20Poly1305_Header_Append+0x58>
 8004126:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 800412a:	f018 0f0f 	tst.w	r8, #15
 800412e:	d007      	beq.n	8004140 <ChaCha20Poly1305_Header_Append+0x178>
 8004130:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8004134:	f899 3004 	ldrb.w	r3, [r9, #4]
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	f889 3004 	strb.w	r3, [r9, #4]
 8004140:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8004144:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8004148:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800414c:	2000      	movs	r0, #0
 800414e:	444b      	add	r3, r9
 8004150:	f8c8 3014 	str.w	r3, [r8, #20]
 8004154:	b013      	add	sp, #76	@ 0x4c
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	2a00      	cmp	r2, #0
 800415c:	f340 8227 	ble.w	80045ae <ChaCha20Poly1305_Header_Append+0x5e6>
 8004160:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8004164:	b013      	add	sp, #76	@ 0x4c
 8004166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416a:	220b      	movs	r2, #11
 800416c:	200d      	movs	r0, #13
 800416e:	210c      	movs	r1, #12
 8004170:	9206      	str	r2, [sp, #24]
 8004172:	f04f 080a 	mov.w	r8, #10
 8004176:	2202      	movs	r2, #2
 8004178:	f04f 0907 	mov.w	r9, #7
 800417c:	9004      	str	r0, [sp, #16]
 800417e:	9105      	str	r1, [sp, #20]
 8004180:	9202      	str	r2, [sp, #8]
 8004182:	f04f 0a0e 	mov.w	sl, #14
 8004186:	f8cd 801c 	str.w	r8, [sp, #28]
 800418a:	f04f 0e09 	mov.w	lr, #9
 800418e:	f04f 0c08 	mov.w	ip, #8
 8004192:	f8cd 9004 	str.w	r9, [sp, #4]
 8004196:	2706      	movs	r7, #6
 8004198:	2605      	movs	r6, #5
 800419a:	2004      	movs	r0, #4
 800419c:	2103      	movs	r1, #3
 800419e:	2201      	movs	r2, #1
 80041a0:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
 80041a4:	444a      	add	r2, r9
 80041a6:	4499      	add	r9, r3
 80041a8:	f809 4c10 	strb.w	r4, [r9, #-16]
 80041ac:	f802 4c10 	strb.w	r4, [r2, #-16]
 80041b0:	9a02      	ldr	r2, [sp, #8]
 80041b2:	2a10      	cmp	r2, #16
 80041b4:	d0a8      	beq.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041b6:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
 80041ba:	4490      	add	r8, r2
 80041bc:	290f      	cmp	r1, #15
 80041be:	f808 4c10 	strb.w	r4, [r8, #-16]
 80041c2:	dca1      	bgt.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041c4:	aa12      	add	r2, sp, #72	@ 0x48
 80041c6:	4411      	add	r1, r2
 80041c8:	280f      	cmp	r0, #15
 80041ca:	f801 4c10 	strb.w	r4, [r1, #-16]
 80041ce:	dc9b      	bgt.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041d0:	4410      	add	r0, r2
 80041d2:	2e0f      	cmp	r6, #15
 80041d4:	f800 4c10 	strb.w	r4, [r0, #-16]
 80041d8:	dc96      	bgt.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041da:	4416      	add	r6, r2
 80041dc:	2f0f      	cmp	r7, #15
 80041de:	f806 4c10 	strb.w	r4, [r6, #-16]
 80041e2:	dc91      	bgt.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041e4:	9801      	ldr	r0, [sp, #4]
 80041e6:	4417      	add	r7, r2
 80041e8:	280f      	cmp	r0, #15
 80041ea:	f807 4c10 	strb.w	r4, [r7, #-16]
 80041ee:	dc8b      	bgt.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041f0:	4402      	add	r2, r0
 80041f2:	f1bc 0f0f 	cmp.w	ip, #15
 80041f6:	f802 4c10 	strb.w	r4, [r2, #-16]
 80041fa:	dc85      	bgt.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 80041fc:	a912      	add	r1, sp, #72	@ 0x48
 80041fe:	448c      	add	ip, r1
 8004200:	f1be 0f0f 	cmp.w	lr, #15
 8004204:	f80c 4c10 	strb.w	r4, [ip, #-16]
 8004208:	f73f af7e 	bgt.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800420c:	9a07      	ldr	r2, [sp, #28]
 800420e:	448e      	add	lr, r1
 8004210:	2a0f      	cmp	r2, #15
 8004212:	f80e 4c10 	strb.w	r4, [lr, #-16]
 8004216:	f73f af77 	bgt.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800421a:	4690      	mov	r8, r2
 800421c:	9806      	ldr	r0, [sp, #24]
 800421e:	460a      	mov	r2, r1
 8004220:	4442      	add	r2, r8
 8004222:	280f      	cmp	r0, #15
 8004224:	f802 4c10 	strb.w	r4, [r2, #-16]
 8004228:	f73f af6e 	bgt.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800422c:	460a      	mov	r2, r1
 800422e:	9905      	ldr	r1, [sp, #20]
 8004230:	4402      	add	r2, r0
 8004232:	290f      	cmp	r1, #15
 8004234:	f802 4c10 	strb.w	r4, [r2, #-16]
 8004238:	f73f af66 	bgt.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800423c:	aa12      	add	r2, sp, #72	@ 0x48
 800423e:	440a      	add	r2, r1
 8004240:	f802 4c10 	strb.w	r4, [r2, #-16]
 8004244:	9a04      	ldr	r2, [sp, #16]
 8004246:	2a0f      	cmp	r2, #15
 8004248:	f73f af5e 	bgt.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800424c:	4690      	mov	r8, r2
 800424e:	aa12      	add	r2, sp, #72	@ 0x48
 8004250:	4442      	add	r2, r8
 8004252:	f1ba 0f0f 	cmp.w	sl, #15
 8004256:	f802 4c10 	strb.w	r4, [r2, #-16]
 800425a:	f73f af55 	bgt.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800425e:	aa12      	add	r2, sp, #72	@ 0x48
 8004260:	4452      	add	r2, sl
 8004262:	f802 4c10 	strb.w	r4, [r2, #-16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f47f af4e 	bne.w	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 800426c:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
 8004270:	e74a      	b.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 8004272:	f04f 080e 	mov.w	r8, #14
 8004276:	200c      	movs	r0, #12
 8004278:	210b      	movs	r1, #11
 800427a:	2208      	movs	r2, #8
 800427c:	f8cd 8010 	str.w	r8, [sp, #16]
 8004280:	f04f 090d 	mov.w	r9, #13
 8004284:	f04f 0803 	mov.w	r8, #3
 8004288:	9006      	str	r0, [sp, #24]
 800428a:	9107      	str	r1, [sp, #28]
 800428c:	9201      	str	r2, [sp, #4]
 800428e:	f04f 0a0f 	mov.w	sl, #15
 8004292:	f8cd 9014 	str.w	r9, [sp, #20]
 8004296:	f04f 0e0a 	mov.w	lr, #10
 800429a:	f04f 0c09 	mov.w	ip, #9
 800429e:	2707      	movs	r7, #7
 80042a0:	2606      	movs	r6, #6
 80042a2:	2005      	movs	r0, #5
 80042a4:	2104      	movs	r1, #4
 80042a6:	f8cd 8008 	str.w	r8, [sp, #8]
 80042aa:	2202      	movs	r2, #2
 80042ac:	e778      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 80042ae:	220e      	movs	r2, #14
 80042b0:	2010      	movs	r0, #16
 80042b2:	210f      	movs	r1, #15
 80042b4:	9206      	str	r2, [sp, #24]
 80042b6:	f04f 080d 	mov.w	r8, #13
 80042ba:	2205      	movs	r2, #5
 80042bc:	f04f 090a 	mov.w	r9, #10
 80042c0:	9004      	str	r0, [sp, #16]
 80042c2:	9105      	str	r1, [sp, #20]
 80042c4:	9202      	str	r2, [sp, #8]
 80042c6:	f04f 0a11 	mov.w	sl, #17
 80042ca:	f8cd 801c 	str.w	r8, [sp, #28]
 80042ce:	f04f 0e0c 	mov.w	lr, #12
 80042d2:	f04f 0c0b 	mov.w	ip, #11
 80042d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80042da:	2709      	movs	r7, #9
 80042dc:	2608      	movs	r6, #8
 80042de:	2007      	movs	r0, #7
 80042e0:	2106      	movs	r1, #6
 80042e2:	2204      	movs	r2, #4
 80042e4:	e75c      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 80042e6:	f04f 090f 	mov.w	r9, #15
 80042ea:	200e      	movs	r0, #14
 80042ec:	210d      	movs	r1, #13
 80042ee:	220c      	movs	r2, #12
 80042f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80042f4:	f04f 0809 	mov.w	r8, #9
 80042f8:	f04f 0904 	mov.w	r9, #4
 80042fc:	9005      	str	r0, [sp, #20]
 80042fe:	9106      	str	r1, [sp, #24]
 8004300:	9207      	str	r2, [sp, #28]
 8004302:	f04f 0a10 	mov.w	sl, #16
 8004306:	f04f 0e0b 	mov.w	lr, #11
 800430a:	f04f 0c0a 	mov.w	ip, #10
 800430e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004312:	2708      	movs	r7, #8
 8004314:	2607      	movs	r6, #7
 8004316:	2006      	movs	r0, #6
 8004318:	2105      	movs	r1, #5
 800431a:	f8cd 9008 	str.w	r9, [sp, #8]
 800431e:	2203      	movs	r2, #3
 8004320:	e73e      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004322:	f04f 0814 	mov.w	r8, #20
 8004326:	2012      	movs	r0, #18
 8004328:	2111      	movs	r1, #17
 800432a:	220e      	movs	r2, #14
 800432c:	f8cd 8010 	str.w	r8, [sp, #16]
 8004330:	f04f 0913 	mov.w	r9, #19
 8004334:	f04f 0809 	mov.w	r8, #9
 8004338:	9006      	str	r0, [sp, #24]
 800433a:	9107      	str	r1, [sp, #28]
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	f04f 0a15 	mov.w	sl, #21
 8004342:	f8cd 9014 	str.w	r9, [sp, #20]
 8004346:	f04f 0e10 	mov.w	lr, #16
 800434a:	f04f 0c0f 	mov.w	ip, #15
 800434e:	270d      	movs	r7, #13
 8004350:	260c      	movs	r6, #12
 8004352:	200b      	movs	r0, #11
 8004354:	210a      	movs	r1, #10
 8004356:	f8cd 8008 	str.w	r8, [sp, #8]
 800435a:	2208      	movs	r2, #8
 800435c:	e720      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 800435e:	2211      	movs	r2, #17
 8004360:	2013      	movs	r0, #19
 8004362:	2112      	movs	r1, #18
 8004364:	9206      	str	r2, [sp, #24]
 8004366:	f04f 0810 	mov.w	r8, #16
 800436a:	2208      	movs	r2, #8
 800436c:	f04f 090d 	mov.w	r9, #13
 8004370:	9004      	str	r0, [sp, #16]
 8004372:	9105      	str	r1, [sp, #20]
 8004374:	9202      	str	r2, [sp, #8]
 8004376:	f04f 0a14 	mov.w	sl, #20
 800437a:	f8cd 801c 	str.w	r8, [sp, #28]
 800437e:	f04f 0e0f 	mov.w	lr, #15
 8004382:	f04f 0c0e 	mov.w	ip, #14
 8004386:	f8cd 9004 	str.w	r9, [sp, #4]
 800438a:	270c      	movs	r7, #12
 800438c:	260b      	movs	r6, #11
 800438e:	200a      	movs	r0, #10
 8004390:	2109      	movs	r1, #9
 8004392:	2207      	movs	r2, #7
 8004394:	e704      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004396:	f04f 0912 	mov.w	r9, #18
 800439a:	2011      	movs	r0, #17
 800439c:	2110      	movs	r1, #16
 800439e:	220f      	movs	r2, #15
 80043a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80043a4:	f04f 080c 	mov.w	r8, #12
 80043a8:	f04f 0907 	mov.w	r9, #7
 80043ac:	9005      	str	r0, [sp, #20]
 80043ae:	9106      	str	r1, [sp, #24]
 80043b0:	9207      	str	r2, [sp, #28]
 80043b2:	f04f 0a13 	mov.w	sl, #19
 80043b6:	f04f 0e0e 	mov.w	lr, #14
 80043ba:	f04f 0c0d 	mov.w	ip, #13
 80043be:	f8cd 8004 	str.w	r8, [sp, #4]
 80043c2:	270b      	movs	r7, #11
 80043c4:	260a      	movs	r6, #10
 80043c6:	2009      	movs	r0, #9
 80043c8:	2108      	movs	r1, #8
 80043ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80043ce:	2206      	movs	r2, #6
 80043d0:	e6e6      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 80043d2:	f04f 0811 	mov.w	r8, #17
 80043d6:	200f      	movs	r0, #15
 80043d8:	210e      	movs	r1, #14
 80043da:	220b      	movs	r2, #11
 80043dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80043e0:	f04f 0910 	mov.w	r9, #16
 80043e4:	f04f 0806 	mov.w	r8, #6
 80043e8:	9006      	str	r0, [sp, #24]
 80043ea:	9107      	str	r1, [sp, #28]
 80043ec:	9201      	str	r2, [sp, #4]
 80043ee:	f04f 0a12 	mov.w	sl, #18
 80043f2:	f8cd 9014 	str.w	r9, [sp, #20]
 80043f6:	f04f 0e0d 	mov.w	lr, #13
 80043fa:	f04f 0c0c 	mov.w	ip, #12
 80043fe:	270a      	movs	r7, #10
 8004400:	2609      	movs	r6, #9
 8004402:	2008      	movs	r0, #8
 8004404:	2107      	movs	r1, #7
 8004406:	f8cd 8008 	str.w	r8, [sp, #8]
 800440a:	2205      	movs	r2, #5
 800440c:	e6c8      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 800440e:	f88d 4047 	strb.w	r4, [sp, #71]	@ 0x47
 8004412:	e679      	b.n	8004108 <ChaCha20Poly1305_Header_Append+0x140>
 8004414:	f04f 081b 	mov.w	r8, #27
 8004418:	2019      	movs	r0, #25
 800441a:	2118      	movs	r1, #24
 800441c:	2215      	movs	r2, #21
 800441e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004422:	f04f 091a 	mov.w	r9, #26
 8004426:	f04f 0810 	mov.w	r8, #16
 800442a:	9006      	str	r0, [sp, #24]
 800442c:	9107      	str	r1, [sp, #28]
 800442e:	9201      	str	r2, [sp, #4]
 8004430:	f04f 0a1c 	mov.w	sl, #28
 8004434:	f8cd 9014 	str.w	r9, [sp, #20]
 8004438:	f04f 0e17 	mov.w	lr, #23
 800443c:	f04f 0c16 	mov.w	ip, #22
 8004440:	2714      	movs	r7, #20
 8004442:	2613      	movs	r6, #19
 8004444:	2012      	movs	r0, #18
 8004446:	2111      	movs	r1, #17
 8004448:	f8cd 8008 	str.w	r8, [sp, #8]
 800444c:	220f      	movs	r2, #15
 800444e:	e6a7      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004450:	2218      	movs	r2, #24
 8004452:	201a      	movs	r0, #26
 8004454:	2119      	movs	r1, #25
 8004456:	9206      	str	r2, [sp, #24]
 8004458:	f04f 0817 	mov.w	r8, #23
 800445c:	220f      	movs	r2, #15
 800445e:	f04f 0914 	mov.w	r9, #20
 8004462:	9004      	str	r0, [sp, #16]
 8004464:	9105      	str	r1, [sp, #20]
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	f04f 0a1b 	mov.w	sl, #27
 800446c:	f8cd 801c 	str.w	r8, [sp, #28]
 8004470:	f04f 0e16 	mov.w	lr, #22
 8004474:	f04f 0c15 	mov.w	ip, #21
 8004478:	f8cd 9004 	str.w	r9, [sp, #4]
 800447c:	2713      	movs	r7, #19
 800447e:	2612      	movs	r6, #18
 8004480:	2011      	movs	r0, #17
 8004482:	2110      	movs	r1, #16
 8004484:	220e      	movs	r2, #14
 8004486:	e68b      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004488:	f04f 0919 	mov.w	r9, #25
 800448c:	2018      	movs	r0, #24
 800448e:	2117      	movs	r1, #23
 8004490:	2216      	movs	r2, #22
 8004492:	f8cd 9010 	str.w	r9, [sp, #16]
 8004496:	f04f 0813 	mov.w	r8, #19
 800449a:	f04f 090e 	mov.w	r9, #14
 800449e:	9005      	str	r0, [sp, #20]
 80044a0:	9106      	str	r1, [sp, #24]
 80044a2:	9207      	str	r2, [sp, #28]
 80044a4:	f04f 0a1a 	mov.w	sl, #26
 80044a8:	f04f 0e15 	mov.w	lr, #21
 80044ac:	f04f 0c14 	mov.w	ip, #20
 80044b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80044b4:	2712      	movs	r7, #18
 80044b6:	2611      	movs	r6, #17
 80044b8:	2010      	movs	r0, #16
 80044ba:	210f      	movs	r1, #15
 80044bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80044c0:	220d      	movs	r2, #13
 80044c2:	e66d      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 80044c4:	f04f 0818 	mov.w	r8, #24
 80044c8:	2016      	movs	r0, #22
 80044ca:	2115      	movs	r1, #21
 80044cc:	2212      	movs	r2, #18
 80044ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80044d2:	f04f 0917 	mov.w	r9, #23
 80044d6:	f04f 080d 	mov.w	r8, #13
 80044da:	9006      	str	r0, [sp, #24]
 80044dc:	9107      	str	r1, [sp, #28]
 80044de:	9201      	str	r2, [sp, #4]
 80044e0:	f04f 0a19 	mov.w	sl, #25
 80044e4:	f8cd 9014 	str.w	r9, [sp, #20]
 80044e8:	f04f 0e14 	mov.w	lr, #20
 80044ec:	f04f 0c13 	mov.w	ip, #19
 80044f0:	2711      	movs	r7, #17
 80044f2:	2610      	movs	r6, #16
 80044f4:	200f      	movs	r0, #15
 80044f6:	210e      	movs	r1, #14
 80044f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80044fc:	220c      	movs	r2, #12
 80044fe:	e64f      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004500:	2215      	movs	r2, #21
 8004502:	2017      	movs	r0, #23
 8004504:	2116      	movs	r1, #22
 8004506:	9206      	str	r2, [sp, #24]
 8004508:	f04f 0814 	mov.w	r8, #20
 800450c:	220c      	movs	r2, #12
 800450e:	f04f 0911 	mov.w	r9, #17
 8004512:	9004      	str	r0, [sp, #16]
 8004514:	9105      	str	r1, [sp, #20]
 8004516:	9202      	str	r2, [sp, #8]
 8004518:	f04f 0a18 	mov.w	sl, #24
 800451c:	f8cd 801c 	str.w	r8, [sp, #28]
 8004520:	f04f 0e13 	mov.w	lr, #19
 8004524:	f04f 0c12 	mov.w	ip, #18
 8004528:	f8cd 9004 	str.w	r9, [sp, #4]
 800452c:	2710      	movs	r7, #16
 800452e:	260f      	movs	r6, #15
 8004530:	200e      	movs	r0, #14
 8004532:	210d      	movs	r1, #13
 8004534:	220b      	movs	r2, #11
 8004536:	e633      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004538:	2016      	movs	r0, #22
 800453a:	2115      	movs	r1, #21
 800453c:	2214      	movs	r2, #20
 800453e:	2313      	movs	r3, #19
 8004540:	f04f 0810 	mov.w	r8, #16
 8004544:	f04f 090b 	mov.w	r9, #11
 8004548:	9004      	str	r0, [sp, #16]
 800454a:	9105      	str	r1, [sp, #20]
 800454c:	9206      	str	r2, [sp, #24]
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	f04f 0a17 	mov.w	sl, #23
 8004554:	f04f 0e12 	mov.w	lr, #18
 8004558:	f04f 0c11 	mov.w	ip, #17
 800455c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004560:	270f      	movs	r7, #15
 8004562:	260e      	movs	r6, #14
 8004564:	200d      	movs	r0, #13
 8004566:	210c      	movs	r1, #12
 8004568:	f8cd 9008 	str.w	r9, [sp, #8]
 800456c:	220a      	movs	r2, #10
 800456e:	2309      	movs	r3, #9
 8004570:	e616      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 8004572:	f04f 0915 	mov.w	r9, #21
 8004576:	2014      	movs	r0, #20
 8004578:	2113      	movs	r1, #19
 800457a:	2212      	movs	r2, #18
 800457c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004580:	f04f 080f 	mov.w	r8, #15
 8004584:	f04f 090a 	mov.w	r9, #10
 8004588:	9005      	str	r0, [sp, #20]
 800458a:	9106      	str	r1, [sp, #24]
 800458c:	9207      	str	r2, [sp, #28]
 800458e:	f04f 0a16 	mov.w	sl, #22
 8004592:	f04f 0e11 	mov.w	lr, #17
 8004596:	f04f 0c10 	mov.w	ip, #16
 800459a:	f8cd 8004 	str.w	r8, [sp, #4]
 800459e:	270e      	movs	r7, #14
 80045a0:	260d      	movs	r6, #13
 80045a2:	200c      	movs	r0, #12
 80045a4:	210b      	movs	r1, #11
 80045a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80045aa:	2209      	movs	r2, #9
 80045ac:	e5f8      	b.n	80041a0 <ChaCha20Poly1305_Header_Append+0x1d8>
 80045ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80045b2:	f898 3004 	ldrb.w	r3, [r8, #4]
 80045b6:	f013 0f12 	tst.w	r3, #18
 80045ba:	f47f ad17 	bne.w	8003fec <ChaCha20Poly1305_Header_Append+0x24>
 80045be:	e5b2      	b.n	8004126 <ChaCha20Poly1305_Header_Append+0x15e>

080045c0 <ChaCha20Poly1305_Encrypt_Finish>:
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	4680      	mov	r8, r0
 80045c6:	b08d      	sub	sp, #52	@ 0x34
 80045c8:	4689      	mov	r9, r1
 80045ca:	4692      	mov	sl, r2
 80045cc:	b160      	cbz	r0, 80045e8 <ChaCha20Poly1305_Encrypt_Finish+0x28>
 80045ce:	b159      	cbz	r1, 80045e8 <ChaCha20Poly1305_Encrypt_Finish+0x28>
 80045d0:	b152      	cbz	r2, 80045e8 <ChaCha20Poly1305_Encrypt_Finish+0x28>
 80045d2:	7902      	ldrb	r2, [r0, #4]
 80045d4:	f002 0302 	and.w	r3, r2, #2
 80045d8:	f003 0bff 	and.w	fp, r3, #255	@ 0xff
 80045dc:	b14b      	cbz	r3, 80045f2 <ChaCha20Poly1305_Encrypt_Finish+0x32>
 80045de:	f640 401e 	movw	r0, #3102	@ 0xc1e
 80045e2:	b00d      	add	sp, #52	@ 0x34
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80045ec:	b00d      	add	sp, #52	@ 0x34
 80045ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f2:	6946      	ldr	r6, [r0, #20]
 80045f4:	6984      	ldr	r4, [r0, #24]
 80045f6:	f100 0c30 	add.w	ip, r0, #48	@ 0x30
 80045fa:	f042 0202 	orr.w	r2, r2, #2
 80045fe:	7102      	strb	r2, [r0, #4]
 8004600:	465b      	mov	r3, fp
 8004602:	4660      	mov	r0, ip
 8004604:	f108 011c 	add.w	r1, r8, #28
 8004608:	2700      	movs	r7, #0
 800460a:	2500      	movs	r5, #0
 800460c:	aa04      	add	r2, sp, #16
 800460e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004612:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004616:	f8cd c004 	str.w	ip, [sp, #4]
 800461a:	f7fe fbcb 	bl	8002db4 <Poly1305_Core_Update>
 800461e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004622:	f108 0144 	add.w	r1, r8, #68	@ 0x44
 8004626:	4660      	mov	r0, ip
 8004628:	aa08      	add	r2, sp, #32
 800462a:	f7ff fa27 	bl	8003a7c <Poly1305_Core_Finish>
 800462e:	a909      	add	r1, sp, #36	@ 0x24
 8004630:	c90e      	ldmia	r1, {r1, r2, r3}
 8004632:	9c08      	ldr	r4, [sp, #32]
 8004634:	f8c8 b01c 	str.w	fp, [r8, #28]
 8004638:	0a20      	lsrs	r0, r4, #8
 800463a:	9002      	str	r0, [sp, #8]
 800463c:	0e08      	lsrs	r0, r1, #24
 800463e:	f8c8 b020 	str.w	fp, [r8, #32]
 8004642:	f8c8 b024 	str.w	fp, [r8, #36]	@ 0x24
 8004646:	f8c8 b028 	str.w	fp, [r8, #40]	@ 0x28
 800464a:	f8c8 b02c 	str.w	fp, [r8, #44]	@ 0x2c
 800464e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004652:	0e27      	lsrs	r7, r4, #24
 8004654:	0a0e      	lsrs	r6, r1, #8
 8004656:	0c0d      	lsrs	r5, r1, #16
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	4658      	mov	r0, fp
 800465c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004660:	f889 4000 	strb.w	r4, [r9]
 8004664:	f889 b001 	strb.w	fp, [r9, #1]
 8004668:	f889 c002 	strb.w	ip, [r9, #2]
 800466c:	f889 7003 	strb.w	r7, [r9, #3]
 8004670:	f889 1004 	strb.w	r1, [r9, #4]
 8004674:	f889 6005 	strb.w	r6, [r9, #5]
 8004678:	f889 5006 	strb.w	r5, [r9, #6]
 800467c:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8004680:	0c14      	lsrs	r4, r2, #16
 8004682:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8004686:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800468a:	0c1f      	lsrs	r7, r3, #16
 800468c:	0e19      	lsrs	r1, r3, #24
 800468e:	2610      	movs	r6, #16
 8004690:	9d03      	ldr	r5, [sp, #12]
 8004692:	f889 5007 	strb.w	r5, [r9, #7]
 8004696:	f889 2008 	strb.w	r2, [r9, #8]
 800469a:	f889 8009 	strb.w	r8, [r9, #9]
 800469e:	f889 400a 	strb.w	r4, [r9, #10]
 80046a2:	f889 b00b 	strb.w	fp, [r9, #11]
 80046a6:	f889 300c 	strb.w	r3, [r9, #12]
 80046aa:	f889 c00d 	strb.w	ip, [r9, #13]
 80046ae:	f889 700e 	strb.w	r7, [r9, #14]
 80046b2:	f889 100f 	strb.w	r1, [r9, #15]
 80046b6:	f8ca 6000 	str.w	r6, [sl]
 80046ba:	e797      	b.n	80045ec <ChaCha20Poly1305_Encrypt_Finish+0x2c>

080046bc <ChaCha20Poly1305_Decrypt_Init>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	4604      	mov	r4, r0
 80046c2:	b097      	sub	sp, #92	@ 0x5c
 80046c4:	2800      	cmp	r0, #0
 80046c6:	f000 8166 	beq.w	8004996 <ChaCha20Poly1305_Decrypt_Init+0x2da>
 80046ca:	2900      	cmp	r1, #0
 80046cc:	f000 8163 	beq.w	8004996 <ChaCha20Poly1305_Decrypt_Init+0x2da>
 80046d0:	2a00      	cmp	r2, #0
 80046d2:	f000 8160 	beq.w	8004996 <ChaCha20Poly1305_Decrypt_Init+0x2da>
 80046d6:	7903      	ldrb	r3, [r0, #4]
 80046d8:	6081      	str	r1, [r0, #8]
 80046da:	f023 0006 	bic.w	r0, r3, #6
 80046de:	07db      	lsls	r3, r3, #31
 80046e0:	60e2      	str	r2, [r4, #12]
 80046e2:	7120      	strb	r0, [r4, #4]
 80046e4:	d460      	bmi.n	80047a8 <ChaCha20Poly1305_Decrypt_Init+0xec>
 80046e6:	4eae      	ldr	r6, [pc, #696]	@ (80049a0 <ChaCha20Poly1305_Decrypt_Init+0x2e4>)
 80046e8:	4dae      	ldr	r5, [pc, #696]	@ (80049a4 <ChaCha20Poly1305_Decrypt_Init+0x2e8>)
 80046ea:	48af      	ldr	r0, [pc, #700]	@ (80049a8 <ChaCha20Poly1305_Decrypt_Init+0x2ec>)
 80046ec:	4baf      	ldr	r3, [pc, #700]	@ (80049ac <ChaCha20Poly1305_Decrypt_Init+0x2f0>)
 80046ee:	6566      	str	r6, [r4, #84]	@ 0x54
 80046f0:	65a5      	str	r5, [r4, #88]	@ 0x58
 80046f2:	65e0      	str	r0, [r4, #92]	@ 0x5c
 80046f4:	6623      	str	r3, [r4, #96]	@ 0x60
 80046f6:	788b      	ldrb	r3, [r1, #2]
 80046f8:	784e      	ldrb	r6, [r1, #1]
 80046fa:	780d      	ldrb	r5, [r1, #0]
 80046fc:	78c8      	ldrb	r0, [r1, #3]
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8004704:	432b      	orrs	r3, r5
 8004706:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800470a:	6663      	str	r3, [r4, #100]	@ 0x64
 800470c:	798b      	ldrb	r3, [r1, #6]
 800470e:	79ce      	ldrb	r6, [r1, #7]
 8004710:	790d      	ldrb	r5, [r1, #4]
 8004712:	7948      	ldrb	r0, [r1, #5]
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800471a:	432b      	orrs	r3, r5
 800471c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004720:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004722:	7a8b      	ldrb	r3, [r1, #10]
 8004724:	7ace      	ldrb	r6, [r1, #11]
 8004726:	7a0d      	ldrb	r5, [r1, #8]
 8004728:	7a48      	ldrb	r0, [r1, #9]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004730:	432b      	orrs	r3, r5
 8004732:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004736:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8004738:	7b8b      	ldrb	r3, [r1, #14]
 800473a:	7bce      	ldrb	r6, [r1, #15]
 800473c:	7b0d      	ldrb	r5, [r1, #12]
 800473e:	7b48      	ldrb	r0, [r1, #13]
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004746:	432b      	orrs	r3, r5
 8004748:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800474c:	6723      	str	r3, [r4, #112]	@ 0x70
 800474e:	7c8b      	ldrb	r3, [r1, #18]
 8004750:	7cce      	ldrb	r6, [r1, #19]
 8004752:	7c0d      	ldrb	r5, [r1, #16]
 8004754:	7c48      	ldrb	r0, [r1, #17]
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800475c:	432b      	orrs	r3, r5
 800475e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004762:	6763      	str	r3, [r4, #116]	@ 0x74
 8004764:	7d8b      	ldrb	r3, [r1, #22]
 8004766:	7dce      	ldrb	r6, [r1, #23]
 8004768:	7d0d      	ldrb	r5, [r1, #20]
 800476a:	7d48      	ldrb	r0, [r1, #21]
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004772:	432b      	orrs	r3, r5
 8004774:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004778:	67a3      	str	r3, [r4, #120]	@ 0x78
 800477a:	7e8b      	ldrb	r3, [r1, #26]
 800477c:	7ece      	ldrb	r6, [r1, #27]
 800477e:	7e0d      	ldrb	r5, [r1, #24]
 8004780:	7e48      	ldrb	r0, [r1, #25]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004788:	432b      	orrs	r3, r5
 800478a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800478e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8004790:	7f8b      	ldrb	r3, [r1, #30]
 8004792:	7fcd      	ldrb	r5, [r1, #31]
 8004794:	7f08      	ldrb	r0, [r1, #28]
 8004796:	7f49      	ldrb	r1, [r1, #29]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800479e:	4303      	orrs	r3, r0
 80047a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047a4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 80047a8:	2500      	movs	r5, #0
 80047aa:	6165      	str	r5, [r4, #20]
 80047ac:	61a5      	str	r5, [r4, #24]
 80047ae:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
 80047b2:	7893      	ldrb	r3, [r2, #2]
 80047b4:	78d6      	ldrb	r6, [r2, #3]
 80047b6:	7810      	ldrb	r0, [r2, #0]
 80047b8:	7851      	ldrb	r1, [r2, #1]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80047c0:	4303      	orrs	r3, r0
 80047c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047c6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80047ca:	7993      	ldrb	r3, [r2, #6]
 80047cc:	79d6      	ldrb	r6, [r2, #7]
 80047ce:	7910      	ldrb	r0, [r2, #4]
 80047d0:	7951      	ldrb	r1, [r2, #5]
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80047d8:	4303      	orrs	r3, r0
 80047da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047de:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 80047e2:	7a93      	ldrb	r3, [r2, #10]
 80047e4:	7ad0      	ldrb	r0, [r2, #11]
 80047e6:	7a11      	ldrb	r1, [r2, #8]
 80047e8:	7a52      	ldrb	r2, [r2, #9]
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80047f0:	430b      	orrs	r3, r1
 80047f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047f6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80047fa:	a806      	add	r0, sp, #24
 80047fc:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8004800:	f7fd ffe6 	bl	80027d0 <salsa20_wordtobyte>
 8004804:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004808:	f89d b02e 	ldrb.w	fp, [sp, #46]	@ 0x2e
 800480c:	9002      	str	r0, [sp, #8]
 800480e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004812:	f89d 1023 	ldrb.w	r1, [sp, #35]	@ 0x23
 8004816:	f89d b032 	ldrb.w	fp, [sp, #50]	@ 0x32
 800481a:	f8cd b010 	str.w	fp, [sp, #16]
 800481e:	f89d a020 	ldrb.w	sl, [sp, #32]
 8004822:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004826:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800482a:	f89d c01d 	ldrb.w	ip, [sp, #29]
 800482e:	f89d 901e 	ldrb.w	r9, [sp, #30]
 8004832:	f89d 701a 	ldrb.w	r7, [sp, #26]
 8004836:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800483a:	f89d 8026 	ldrb.w	r8, [sp, #38]	@ 0x26
 800483e:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
 8004842:	f89d 602a 	ldrb.w	r6, [sp, #42]	@ 0x2a
 8004846:	0409      	lsls	r1, r1, #16
 8004848:	ea41 610b 	orr.w	r1, r1, fp, lsl #24
 800484c:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8004850:	4319      	orrs	r1, r3
 8004852:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 8004856:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	f89d b01f 	ldrb.w	fp, [sp, #31]
 8004866:	ea4c 6c09 	orr.w	ip, ip, r9, lsl #24
 800486a:	043f      	lsls	r7, r7, #16
 800486c:	ea4c 0c02 	orr.w	ip, ip, r2
 8004870:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	9b04      	ldr	r3, [sp, #16]
 8004878:	ea4a 0a09 	orr.w	sl, sl, r9
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	f89d 9022 	ldrb.w	r9, [sp, #34]	@ 0x22
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8004888:	9b02      	ldr	r3, [sp, #8]
 800488a:	ea41 2909 	orr.w	r9, r1, r9, lsl #8
 800488e:	ea48 6800 	orr.w	r8, r8, r0, lsl #24
 8004892:	f89d 102f 	ldrb.w	r1, [sp, #47]	@ 0x2f
 8004896:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800489a:	f8cd 900c 	str.w	r9, [sp, #12]
 800489e:	ea48 0803 	orr.w	r8, r8, r3
 80048a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80048a6:	f89d 902b 	ldrb.w	r9, [sp, #43]	@ 0x2b
 80048aa:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
 80048ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80048b2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80048b6:	9000      	str	r0, [sp, #0]
 80048b8:	ea48 2303 	orr.w	r3, r8, r3, lsl #8
 80048bc:	f89d 0019 	ldrb.w	r0, [sp, #25]
 80048c0:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
 80048c4:	0436      	lsls	r6, r6, #16
 80048c6:	f89d b033 	ldrb.w	fp, [sp, #51]	@ 0x33
 80048ca:	9204      	str	r2, [sp, #16]
 80048cc:	f89d 8029 	ldrb.w	r8, [sp, #41]	@ 0x29
 80048d0:	f8cd 8008 	str.w	r8, [sp, #8]
 80048d4:	ea47 070c 	orr.w	r7, r7, ip
 80048d8:	f8dd 8000 	ldr.w	r8, [sp]
 80048dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 80048e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80048ee:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 80048f2:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 80048f6:	6325      	str	r5, [r4, #48]	@ 0x30
 80048f8:	ea49 6b0b 	orr.w	fp, r9, fp, lsl #24
 80048fc:	ea4f 199c 	mov.w	r9, ip, lsr #6
 8004900:	f3c8 0c99 	ubfx	ip, r8, #2, #26
 8004904:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004908:	6365      	str	r5, [r4, #52]	@ 0x34
 800490a:	ea4b 0b03 	orr.w	fp, fp, r3
 800490e:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8004918:	63a5      	str	r5, [r4, #56]	@ 0x38
 800491a:	ea48 0101 	orr.w	r1, r8, r1
 800491e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004922:	f3c3 2813 	ubfx	r8, r3, #8, #20
 8004926:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800492a:	9b02      	ldr	r3, [sp, #8]
 800492c:	64a1      	str	r1, [r4, #72]	@ 0x48
 800492e:	4316      	orrs	r6, r2
 8004930:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 800493a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800493e:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 8004942:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 8004946:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800494a:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800494e:	ea4b 2202 	orr.w	r2, fp, r2, lsl #8
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	64e2      	str	r2, [r4, #76]	@ 0x4c
 8004956:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800495a:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 800495e:	6466      	str	r6, [r4, #68]	@ 0x44
 8004960:	430b      	orrs	r3, r1
 8004962:	f3ca 1a19 	ubfx	sl, sl, #4, #26
 8004966:	f42a 5a7c 	bic.w	sl, sl, #16128	@ 0x3f00
 800496a:	f429 297c 	bic.w	r9, r9, #1032192	@ 0xfc000
 800496e:	f02c 0cfc 	bic.w	ip, ip, #252	@ 0xfc
 8004972:	f027 477c 	bic.w	r7, r7, #4227858432	@ 0xfc000000
 8004976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800497a:	4628      	mov	r0, r5
 800497c:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 8004980:	f8c4 9028 	str.w	r9, [r4, #40]	@ 0x28
 8004984:	f8c4 c020 	str.w	ip, [r4, #32]
 8004988:	61e7      	str	r7, [r4, #28]
 800498a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800498c:	6425      	str	r5, [r4, #64]	@ 0x40
 800498e:	6523      	str	r3, [r4, #80]	@ 0x50
 8004990:	b017      	add	sp, #92	@ 0x5c
 8004992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004996:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800499a:	b017      	add	sp, #92	@ 0x5c
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	61707865 	.word	0x61707865
 80049a4:	3320646e 	.word	0x3320646e
 80049a8:	79622d32 	.word	0x79622d32
 80049ac:	6b206574 	.word	0x6b206574

080049b0 <ChaCha20Poly1305_Decrypt_Append>:
 80049b0:	b530      	push	{r4, r5, lr}
 80049b2:	b083      	sub	sp, #12
 80049b4:	b190      	cbz	r0, 80049dc <ChaCha20Poly1305_Decrypt_Append+0x2c>
 80049b6:	b179      	cbz	r1, 80049d8 <ChaCha20Poly1305_Decrypt_Append+0x28>
 80049b8:	7904      	ldrb	r4, [r0, #4]
 80049ba:	f014 0f06 	tst.w	r4, #6
 80049be:	d003      	beq.n	80049c8 <ChaCha20Poly1305_Decrypt_Append+0x18>
 80049c0:	f640 401e 	movw	r0, #3102	@ 0xc1e
 80049c4:	b003      	add	sp, #12
 80049c6:	bd30      	pop	{r4, r5, pc}
 80049c8:	9d06      	ldr	r5, [sp, #24]
 80049ca:	9500      	str	r5, [sp, #0]
 80049cc:	2401      	movs	r4, #1
 80049ce:	9401      	str	r4, [sp, #4]
 80049d0:	f7fe fd86 	bl	80034e0 <ChaCha20Poly1305_Append.part.30>
 80049d4:	b003      	add	sp, #12
 80049d6:	bd30      	pop	{r4, r5, pc}
 80049d8:	2a00      	cmp	r2, #0
 80049da:	dded      	ble.n	80049b8 <ChaCha20Poly1305_Decrypt_Append+0x8>
 80049dc:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80049e0:	b003      	add	sp, #12
 80049e2:	bd30      	pop	{r4, r5, pc}

080049e4 <ChaCha20Poly1305_Decrypt_Finish>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	4604      	mov	r4, r0
 80049ea:	b08b      	sub	sp, #44	@ 0x2c
 80049ec:	b170      	cbz	r0, 8004a0c <ChaCha20Poly1305_Decrypt_Finish+0x28>
 80049ee:	6903      	ldr	r3, [r0, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 809f 	beq.w	8004b34 <ChaCha20Poly1305_Decrypt_Finish+0x150>
 80049f6:	7901      	ldrb	r1, [r0, #4]
 80049f8:	f001 0202 	and.w	r2, r1, #2
 80049fc:	f002 05ff 	and.w	r5, r2, #255	@ 0xff
 8004a00:	b14a      	cbz	r2, 8004a16 <ChaCha20Poly1305_Decrypt_Finish+0x32>
 8004a02:	f640 401e 	movw	r0, #3102	@ 0xc1e
 8004a06:	b00b      	add	sp, #44	@ 0x2c
 8004a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8004a10:	b00b      	add	sp, #44	@ 0x2c
 8004a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a16:	6983      	ldr	r3, [r0, #24]
 8004a18:	6946      	ldr	r6, [r0, #20]
 8004a1a:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8004a1e:	f041 0102 	orr.w	r1, r1, #2
 8004a22:	7101      	strb	r1, [r0, #4]
 8004a24:	4698      	mov	r8, r3
 8004a26:	4650      	mov	r0, sl
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f104 011c 	add.w	r1, r4, #28
 8004a2e:	2700      	movs	r7, #0
 8004a30:	f04f 0900 	mov.w	r9, #0
 8004a34:	aa02      	add	r2, sp, #8
 8004a36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a3a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004a3e:	f7fe f9b9 	bl	8002db4 <Poly1305_Core_Update>
 8004a42:	4650      	mov	r0, sl
 8004a44:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8004a48:	aa06      	add	r2, sp, #24
 8004a4a:	f7ff f817 	bl	8003a7c <Poly1305_Core_Finish>
 8004a4e:	6922      	ldr	r2, [r4, #16]
 8004a50:	61e5      	str	r5, [r4, #28]
 8004a52:	6225      	str	r5, [r4, #32]
 8004a54:	6265      	str	r5, [r4, #36]	@ 0x24
 8004a56:	62a5      	str	r5, [r4, #40]	@ 0x28
 8004a58:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8004a5a:	9806      	ldr	r0, [sp, #24]
 8004a5c:	f892 a000 	ldrb.w	sl, [r2]
 8004a60:	f892 b001 	ldrb.w	fp, [r2, #1]
 8004a64:	f892 8003 	ldrb.w	r8, [r2, #3]
 8004a68:	7913      	ldrb	r3, [r2, #4]
 8004a6a:	f892 9002 	ldrb.w	r9, [r2, #2]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	ea80 0a0a 	eor.w	sl, r0, sl
 8004a74:	ea8b 2b10 	eor.w	fp, fp, r0, lsr #8
 8004a78:	9907      	ldr	r1, [sp, #28]
 8004a7a:	f892 c009 	ldrb.w	ip, [r2, #9]
 8004a7e:	7957      	ldrb	r7, [r2, #5]
 8004a80:	7996      	ldrb	r6, [r2, #6]
 8004a82:	f8cd c004 	str.w	ip, [sp, #4]
 8004a86:	ea4b 0a0a 	orr.w	sl, fp, sl
 8004a8a:	ea89 4910 	eor.w	r9, r9, r0, lsr #16
 8004a8e:	ea88 6010 	eor.w	r0, r8, r0, lsr #24
 8004a92:	f8dd 8000 	ldr.w	r8, [sp]
 8004a96:	9b08      	ldr	r3, [sp, #32]
 8004a98:	79d5      	ldrb	r5, [r2, #7]
 8004a9a:	7a14      	ldrb	r4, [r2, #8]
 8004a9c:	ea49 090a 	orr.w	r9, r9, sl
 8004aa0:	ea81 0c08 	eor.w	ip, r1, r8
 8004aa4:	fa5f f989 	uxtb.w	r9, r9
 8004aa8:	ea49 0000 	orr.w	r0, r9, r0
 8004aac:	ea87 2711 	eor.w	r7, r7, r1, lsr #8
 8004ab0:	fa5f fc8c 	uxtb.w	ip, ip
 8004ab4:	ea40 0c0c 	orr.w	ip, r0, ip
 8004ab8:	b2ff      	uxtb	r7, r7
 8004aba:	ea86 4611 	eor.w	r6, r6, r1, lsr #16
 8004abe:	ea4c 0c07 	orr.w	ip, ip, r7
 8004ac2:	b2f6      	uxtb	r6, r6
 8004ac4:	f8dd a004 	ldr.w	sl, [sp, #4]
 8004ac8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004aca:	7ad7      	ldrb	r7, [r2, #11]
 8004acc:	ea85 6911 	eor.w	r9, r5, r1, lsr #24
 8004ad0:	ea83 0804 	eor.w	r8, r3, r4
 8004ad4:	ea4c 0c06 	orr.w	ip, ip, r6
 8004ad8:	7a95      	ldrb	r5, [r2, #10]
 8004ada:	7b14      	ldrb	r4, [r2, #12]
 8004adc:	7b51      	ldrb	r1, [r2, #13]
 8004ade:	7b96      	ldrb	r6, [r2, #14]
 8004ae0:	7bd2      	ldrb	r2, [r2, #15]
 8004ae2:	ea4c 0c09 	orr.w	ip, ip, r9
 8004ae6:	fa5f f888 	uxtb.w	r8, r8
 8004aea:	ea8a 2913 	eor.w	r9, sl, r3, lsr #8
 8004aee:	ea4c 0808 	orr.w	r8, ip, r8
 8004af2:	ea85 4513 	eor.w	r5, r5, r3, lsr #16
 8004af6:	fa5f fc89 	uxtb.w	ip, r9
 8004afa:	ea48 0c0c 	orr.w	ip, r8, ip
 8004afe:	b2ed      	uxtb	r5, r5
 8004b00:	4044      	eors	r4, r0
 8004b02:	ea4c 0505 	orr.w	r5, ip, r5
 8004b06:	ea87 6313 	eor.w	r3, r7, r3, lsr #24
 8004b0a:	432b      	orrs	r3, r5
 8004b0c:	ea81 2110 	eor.w	r1, r1, r0, lsr #8
 8004b10:	b2e4      	uxtb	r4, r4
 8004b12:	431c      	orrs	r4, r3
 8004b14:	b2c9      	uxtb	r1, r1
 8004b16:	ea86 4310 	eor.w	r3, r6, r0, lsr #16
 8004b1a:	4321      	orrs	r1, r4
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	ea82 6010 	eor.w	r0, r2, r0, lsr #24
 8004b24:	4318      	orrs	r0, r3
 8004b26:	f1d0 0001 	rsbs	r0, r0, #1
 8004b2a:	bf38      	it	cc
 8004b2c:	2000      	movcc	r0, #0
 8004b2e:	f5c0 707b 	rsb	r0, r0, #1004	@ 0x3ec
 8004b32:	e768      	b.n	8004a06 <ChaCha20Poly1305_Decrypt_Finish+0x22>
 8004b34:	f640 401f 	movw	r0, #3103	@ 0xc1f
 8004b38:	b00b      	add	sp, #44	@ 0x2c
 8004b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3e:	bf00      	nop

08004b40 <siprintf>:
 8004b40:	b40e      	push	{r1, r2, r3}
 8004b42:	b500      	push	{lr}
 8004b44:	b09c      	sub	sp, #112	@ 0x70
 8004b46:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b48:	9002      	str	r0, [sp, #8]
 8004b4a:	9006      	str	r0, [sp, #24]
 8004b4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b50:	4809      	ldr	r0, [pc, #36]	@ (8004b78 <siprintf+0x38>)
 8004b52:	9107      	str	r1, [sp, #28]
 8004b54:	9104      	str	r1, [sp, #16]
 8004b56:	4909      	ldr	r1, [pc, #36]	@ (8004b7c <siprintf+0x3c>)
 8004b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b5c:	9105      	str	r1, [sp, #20]
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	a902      	add	r1, sp, #8
 8004b64:	f000 f9bc 	bl	8004ee0 <_svfiprintf_r>
 8004b68:	9b02      	ldr	r3, [sp, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	b01c      	add	sp, #112	@ 0x70
 8004b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b74:	b003      	add	sp, #12
 8004b76:	4770      	bx	lr
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	ffff0208 	.word	0xffff0208

08004b80 <memmove>:
 8004b80:	4288      	cmp	r0, r1
 8004b82:	b510      	push	{r4, lr}
 8004b84:	eb01 0402 	add.w	r4, r1, r2
 8004b88:	d902      	bls.n	8004b90 <memmove+0x10>
 8004b8a:	4284      	cmp	r4, r0
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	d807      	bhi.n	8004ba0 <memmove+0x20>
 8004b90:	1e43      	subs	r3, r0, #1
 8004b92:	42a1      	cmp	r1, r4
 8004b94:	d008      	beq.n	8004ba8 <memmove+0x28>
 8004b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b9e:	e7f8      	b.n	8004b92 <memmove+0x12>
 8004ba0:	4402      	add	r2, r0
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	428a      	cmp	r2, r1
 8004ba6:	d100      	bne.n	8004baa <memmove+0x2a>
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bb2:	e7f7      	b.n	8004ba4 <memmove+0x24>

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <__errno>:
 8004bc4:	4b01      	ldr	r3, [pc, #4]	@ (8004bcc <__errno+0x8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	2000000c 	.word	0x2000000c

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c08 <__libc_init_array+0x38>)
 8004bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c0c <__libc_init_array+0x3c>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	2600      	movs	r6, #0
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	4d0b      	ldr	r5, [pc, #44]	@ (8004c10 <__libc_init_array+0x40>)
 8004be2:	4c0c      	ldr	r4, [pc, #48]	@ (8004c14 <__libc_init_array+0x44>)
 8004be4:	f000 fc4c 	bl	8005480 <_init>
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	2600      	movs	r6, #0
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	080055c8 	.word	0x080055c8
 8004c0c:	080055c8 	.word	0x080055c8
 8004c10:	080055c8 	.word	0x080055c8
 8004c14:	080055cc 	.word	0x080055cc

08004c18 <__retarget_lock_acquire_recursive>:
 8004c18:	4770      	bx	lr

08004c1a <__retarget_lock_release_recursive>:
 8004c1a:	4770      	bx	lr

08004c1c <memcpy>:
 8004c1c:	440a      	add	r2, r1
 8004c1e:	4291      	cmp	r1, r2
 8004c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c24:	d100      	bne.n	8004c28 <memcpy+0xc>
 8004c26:	4770      	bx	lr
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c32:	4291      	cmp	r1, r2
 8004c34:	d1f9      	bne.n	8004c2a <memcpy+0xe>
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <_free_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	d041      	beq.n	8004cc4 <_free_r+0x8c>
 8004c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c44:	1f0c      	subs	r4, r1, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfb8      	it	lt
 8004c4a:	18e4      	addlt	r4, r4, r3
 8004c4c:	f000 f8e0 	bl	8004e10 <__malloc_lock>
 8004c50:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc8 <_free_r+0x90>)
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	b933      	cbnz	r3, 8004c64 <_free_r+0x2c>
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	6014      	str	r4, [r2, #0]
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c60:	f000 b8dc 	b.w	8004e1c <__malloc_unlock>
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	d908      	bls.n	8004c7a <_free_r+0x42>
 8004c68:	6820      	ldr	r0, [r4, #0]
 8004c6a:	1821      	adds	r1, r4, r0
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf01      	itttt	eq
 8004c70:	6819      	ldreq	r1, [r3, #0]
 8004c72:	685b      	ldreq	r3, [r3, #4]
 8004c74:	1809      	addeq	r1, r1, r0
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	e7ed      	b.n	8004c56 <_free_r+0x1e>
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b10b      	cbz	r3, 8004c84 <_free_r+0x4c>
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	d9fa      	bls.n	8004c7a <_free_r+0x42>
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	1850      	adds	r0, r2, r1
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d10b      	bne.n	8004ca4 <_free_r+0x6c>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	4401      	add	r1, r0
 8004c90:	1850      	adds	r0, r2, r1
 8004c92:	4283      	cmp	r3, r0
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	d1e0      	bne.n	8004c5a <_free_r+0x22>
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	6053      	str	r3, [r2, #4]
 8004c9e:	4408      	add	r0, r1
 8004ca0:	6010      	str	r0, [r2, #0]
 8004ca2:	e7da      	b.n	8004c5a <_free_r+0x22>
 8004ca4:	d902      	bls.n	8004cac <_free_r+0x74>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	e7d6      	b.n	8004c5a <_free_r+0x22>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	1821      	adds	r1, r4, r0
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	bf04      	itt	eq
 8004cb4:	6819      	ldreq	r1, [r3, #0]
 8004cb6:	685b      	ldreq	r3, [r3, #4]
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	bf04      	itt	eq
 8004cbc:	1809      	addeq	r1, r1, r0
 8004cbe:	6021      	streq	r1, [r4, #0]
 8004cc0:	6054      	str	r4, [r2, #4]
 8004cc2:	e7ca      	b.n	8004c5a <_free_r+0x22>
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000042c 	.word	0x2000042c

08004ccc <sbrk_aligned>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4e0f      	ldr	r6, [pc, #60]	@ (8004d0c <sbrk_aligned+0x40>)
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	6831      	ldr	r1, [r6, #0]
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	b911      	cbnz	r1, 8004cde <sbrk_aligned+0x12>
 8004cd8:	f000 fb8c 	bl	80053f4 <_sbrk_r>
 8004cdc:	6030      	str	r0, [r6, #0]
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 fb87 	bl	80053f4 <_sbrk_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	d103      	bne.n	8004cf2 <sbrk_aligned+0x26>
 8004cea:	f04f 34ff 	mov.w	r4, #4294967295
 8004cee:	4620      	mov	r0, r4
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	1cc4      	adds	r4, r0, #3
 8004cf4:	f024 0403 	bic.w	r4, r4, #3
 8004cf8:	42a0      	cmp	r0, r4
 8004cfa:	d0f8      	beq.n	8004cee <sbrk_aligned+0x22>
 8004cfc:	1a21      	subs	r1, r4, r0
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 fb78 	bl	80053f4 <_sbrk_r>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d1f2      	bne.n	8004cee <sbrk_aligned+0x22>
 8004d08:	e7ef      	b.n	8004cea <sbrk_aligned+0x1e>
 8004d0a:	bf00      	nop
 8004d0c:	20000428 	.word	0x20000428

08004d10 <_malloc_r>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	1ccd      	adds	r5, r1, #3
 8004d16:	f025 0503 	bic.w	r5, r5, #3
 8004d1a:	3508      	adds	r5, #8
 8004d1c:	2d0c      	cmp	r5, #12
 8004d1e:	bf38      	it	cc
 8004d20:	250c      	movcc	r5, #12
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	4606      	mov	r6, r0
 8004d26:	db01      	blt.n	8004d2c <_malloc_r+0x1c>
 8004d28:	42a9      	cmp	r1, r5
 8004d2a:	d904      	bls.n	8004d36 <_malloc_r+0x26>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	2000      	movs	r0, #0
 8004d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e0c <_malloc_r+0xfc>
 8004d3a:	f000 f869 	bl	8004e10 <__malloc_lock>
 8004d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d42:	461c      	mov	r4, r3
 8004d44:	bb44      	cbnz	r4, 8004d98 <_malloc_r+0x88>
 8004d46:	4629      	mov	r1, r5
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7ff ffbf 	bl	8004ccc <sbrk_aligned>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	4604      	mov	r4, r0
 8004d52:	d158      	bne.n	8004e06 <_malloc_r+0xf6>
 8004d54:	f8d8 4000 	ldr.w	r4, [r8]
 8004d58:	4627      	mov	r7, r4
 8004d5a:	2f00      	cmp	r7, #0
 8004d5c:	d143      	bne.n	8004de6 <_malloc_r+0xd6>
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	d04b      	beq.n	8004dfa <_malloc_r+0xea>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	4639      	mov	r1, r7
 8004d66:	4630      	mov	r0, r6
 8004d68:	eb04 0903 	add.w	r9, r4, r3
 8004d6c:	f000 fb42 	bl	80053f4 <_sbrk_r>
 8004d70:	4581      	cmp	r9, r0
 8004d72:	d142      	bne.n	8004dfa <_malloc_r+0xea>
 8004d74:	6821      	ldr	r1, [r4, #0]
 8004d76:	1a6d      	subs	r5, r5, r1
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff ffa6 	bl	8004ccc <sbrk_aligned>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d03a      	beq.n	8004dfa <_malloc_r+0xea>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	442b      	add	r3, r5
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	bb62      	cbnz	r2, 8004dec <_malloc_r+0xdc>
 8004d92:	f8c8 7000 	str.w	r7, [r8]
 8004d96:	e00f      	b.n	8004db8 <_malloc_r+0xa8>
 8004d98:	6822      	ldr	r2, [r4, #0]
 8004d9a:	1b52      	subs	r2, r2, r5
 8004d9c:	d420      	bmi.n	8004de0 <_malloc_r+0xd0>
 8004d9e:	2a0b      	cmp	r2, #11
 8004da0:	d917      	bls.n	8004dd2 <_malloc_r+0xc2>
 8004da2:	1961      	adds	r1, r4, r5
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	6025      	str	r5, [r4, #0]
 8004da8:	bf18      	it	ne
 8004daa:	6059      	strne	r1, [r3, #4]
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	bf08      	it	eq
 8004db0:	f8c8 1000 	streq.w	r1, [r8]
 8004db4:	5162      	str	r2, [r4, r5]
 8004db6:	604b      	str	r3, [r1, #4]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f82f 	bl	8004e1c <__malloc_unlock>
 8004dbe:	f104 000b 	add.w	r0, r4, #11
 8004dc2:	1d23      	adds	r3, r4, #4
 8004dc4:	f020 0007 	bic.w	r0, r0, #7
 8004dc8:	1ac2      	subs	r2, r0, r3
 8004dca:	bf1c      	itt	ne
 8004dcc:	1a1b      	subne	r3, r3, r0
 8004dce:	50a3      	strne	r3, [r4, r2]
 8004dd0:	e7af      	b.n	8004d32 <_malloc_r+0x22>
 8004dd2:	6862      	ldr	r2, [r4, #4]
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	bf0c      	ite	eq
 8004dd8:	f8c8 2000 	streq.w	r2, [r8]
 8004ddc:	605a      	strne	r2, [r3, #4]
 8004dde:	e7eb      	b.n	8004db8 <_malloc_r+0xa8>
 8004de0:	4623      	mov	r3, r4
 8004de2:	6864      	ldr	r4, [r4, #4]
 8004de4:	e7ae      	b.n	8004d44 <_malloc_r+0x34>
 8004de6:	463c      	mov	r4, r7
 8004de8:	687f      	ldr	r7, [r7, #4]
 8004dea:	e7b6      	b.n	8004d5a <_malloc_r+0x4a>
 8004dec:	461a      	mov	r2, r3
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	d1fb      	bne.n	8004dec <_malloc_r+0xdc>
 8004df4:	2300      	movs	r3, #0
 8004df6:	6053      	str	r3, [r2, #4]
 8004df8:	e7de      	b.n	8004db8 <_malloc_r+0xa8>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f000 f80c 	bl	8004e1c <__malloc_unlock>
 8004e04:	e794      	b.n	8004d30 <_malloc_r+0x20>
 8004e06:	6005      	str	r5, [r0, #0]
 8004e08:	e7d6      	b.n	8004db8 <_malloc_r+0xa8>
 8004e0a:	bf00      	nop
 8004e0c:	2000042c 	.word	0x2000042c

08004e10 <__malloc_lock>:
 8004e10:	4801      	ldr	r0, [pc, #4]	@ (8004e18 <__malloc_lock+0x8>)
 8004e12:	f7ff bf01 	b.w	8004c18 <__retarget_lock_acquire_recursive>
 8004e16:	bf00      	nop
 8004e18:	20000424 	.word	0x20000424

08004e1c <__malloc_unlock>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	@ (8004e24 <__malloc_unlock+0x8>)
 8004e1e:	f7ff befc 	b.w	8004c1a <__retarget_lock_release_recursive>
 8004e22:	bf00      	nop
 8004e24:	20000424 	.word	0x20000424

08004e28 <__ssputs_r>:
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	688e      	ldr	r6, [r1, #8]
 8004e2e:	461f      	mov	r7, r3
 8004e30:	42be      	cmp	r6, r7
 8004e32:	680b      	ldr	r3, [r1, #0]
 8004e34:	4682      	mov	sl, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	4690      	mov	r8, r2
 8004e3a:	d82d      	bhi.n	8004e98 <__ssputs_r+0x70>
 8004e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e44:	d026      	beq.n	8004e94 <__ssputs_r+0x6c>
 8004e46:	6965      	ldr	r5, [r4, #20]
 8004e48:	6909      	ldr	r1, [r1, #16]
 8004e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e4e:	eba3 0901 	sub.w	r9, r3, r1
 8004e52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e56:	1c7b      	adds	r3, r7, #1
 8004e58:	444b      	add	r3, r9
 8004e5a:	106d      	asrs	r5, r5, #1
 8004e5c:	429d      	cmp	r5, r3
 8004e5e:	bf38      	it	cc
 8004e60:	461d      	movcc	r5, r3
 8004e62:	0553      	lsls	r3, r2, #21
 8004e64:	d527      	bpl.n	8004eb6 <__ssputs_r+0x8e>
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7ff ff52 	bl	8004d10 <_malloc_r>
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	b360      	cbz	r0, 8004eca <__ssputs_r+0xa2>
 8004e70:	6921      	ldr	r1, [r4, #16]
 8004e72:	464a      	mov	r2, r9
 8004e74:	f7ff fed2 	bl	8004c1c <memcpy>
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	6126      	str	r6, [r4, #16]
 8004e86:	6165      	str	r5, [r4, #20]
 8004e88:	444e      	add	r6, r9
 8004e8a:	eba5 0509 	sub.w	r5, r5, r9
 8004e8e:	6026      	str	r6, [r4, #0]
 8004e90:	60a5      	str	r5, [r4, #8]
 8004e92:	463e      	mov	r6, r7
 8004e94:	42be      	cmp	r6, r7
 8004e96:	d900      	bls.n	8004e9a <__ssputs_r+0x72>
 8004e98:	463e      	mov	r6, r7
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	4632      	mov	r2, r6
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	f7ff fe6e 	bl	8004b80 <memmove>
 8004ea4:	68a3      	ldr	r3, [r4, #8]
 8004ea6:	1b9b      	subs	r3, r3, r6
 8004ea8:	60a3      	str	r3, [r4, #8]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	4433      	add	r3, r6
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb6:	462a      	mov	r2, r5
 8004eb8:	f000 faac 	bl	8005414 <_realloc_r>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d1e0      	bne.n	8004e84 <__ssputs_r+0x5c>
 8004ec2:	6921      	ldr	r1, [r4, #16]
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f7ff feb7 	bl	8004c38 <_free_r>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	f8ca 3000 	str.w	r3, [sl]
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	e7e9      	b.n	8004eb2 <__ssputs_r+0x8a>
	...

08004ee0 <_svfiprintf_r>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	4698      	mov	r8, r3
 8004ee6:	898b      	ldrh	r3, [r1, #12]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	b09d      	sub	sp, #116	@ 0x74
 8004eec:	4607      	mov	r7, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	d510      	bpl.n	8004f16 <_svfiprintf_r+0x36>
 8004ef4:	690b      	ldr	r3, [r1, #16]
 8004ef6:	b973      	cbnz	r3, 8004f16 <_svfiprintf_r+0x36>
 8004ef8:	2140      	movs	r1, #64	@ 0x40
 8004efa:	f7ff ff09 	bl	8004d10 <_malloc_r>
 8004efe:	6028      	str	r0, [r5, #0]
 8004f00:	6128      	str	r0, [r5, #16]
 8004f02:	b930      	cbnz	r0, 8004f12 <_svfiprintf_r+0x32>
 8004f04:	230c      	movs	r3, #12
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	b01d      	add	sp, #116	@ 0x74
 8004f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f12:	2340      	movs	r3, #64	@ 0x40
 8004f14:	616b      	str	r3, [r5, #20]
 8004f16:	2300      	movs	r3, #0
 8004f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f24:	2330      	movs	r3, #48	@ 0x30
 8004f26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050c4 <_svfiprintf_r+0x1e4>
 8004f2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f2e:	f04f 0901 	mov.w	r9, #1
 8004f32:	4623      	mov	r3, r4
 8004f34:	469a      	mov	sl, r3
 8004f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f3a:	b10a      	cbz	r2, 8004f40 <_svfiprintf_r+0x60>
 8004f3c:	2a25      	cmp	r2, #37	@ 0x25
 8004f3e:	d1f9      	bne.n	8004f34 <_svfiprintf_r+0x54>
 8004f40:	ebba 0b04 	subs.w	fp, sl, r4
 8004f44:	d00b      	beq.n	8004f5e <_svfiprintf_r+0x7e>
 8004f46:	465b      	mov	r3, fp
 8004f48:	4622      	mov	r2, r4
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	f7ff ff6b 	bl	8004e28 <__ssputs_r>
 8004f52:	3001      	adds	r0, #1
 8004f54:	f000 80a7 	beq.w	80050a6 <_svfiprintf_r+0x1c6>
 8004f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f5a:	445a      	add	r2, fp
 8004f5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 809f 	beq.w	80050a6 <_svfiprintf_r+0x1c6>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f72:	f10a 0a01 	add.w	sl, sl, #1
 8004f76:	9304      	str	r3, [sp, #16]
 8004f78:	9307      	str	r3, [sp, #28]
 8004f7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f80:	4654      	mov	r4, sl
 8004f82:	2205      	movs	r2, #5
 8004f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f88:	484e      	ldr	r0, [pc, #312]	@ (80050c4 <_svfiprintf_r+0x1e4>)
 8004f8a:	f7fb f949 	bl	8000220 <memchr>
 8004f8e:	9a04      	ldr	r2, [sp, #16]
 8004f90:	b9d8      	cbnz	r0, 8004fca <_svfiprintf_r+0xea>
 8004f92:	06d0      	lsls	r0, r2, #27
 8004f94:	bf44      	itt	mi
 8004f96:	2320      	movmi	r3, #32
 8004f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f9c:	0711      	lsls	r1, r2, #28
 8004f9e:	bf44      	itt	mi
 8004fa0:	232b      	movmi	r3, #43	@ 0x2b
 8004fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8004faa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fac:	d015      	beq.n	8004fda <_svfiprintf_r+0xfa>
 8004fae:	9a07      	ldr	r2, [sp, #28]
 8004fb0:	4654      	mov	r4, sl
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f04f 0c0a 	mov.w	ip, #10
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fbe:	3b30      	subs	r3, #48	@ 0x30
 8004fc0:	2b09      	cmp	r3, #9
 8004fc2:	d94b      	bls.n	800505c <_svfiprintf_r+0x17c>
 8004fc4:	b1b0      	cbz	r0, 8004ff4 <_svfiprintf_r+0x114>
 8004fc6:	9207      	str	r2, [sp, #28]
 8004fc8:	e014      	b.n	8004ff4 <_svfiprintf_r+0x114>
 8004fca:	eba0 0308 	sub.w	r3, r0, r8
 8004fce:	fa09 f303 	lsl.w	r3, r9, r3
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	9304      	str	r3, [sp, #16]
 8004fd6:	46a2      	mov	sl, r4
 8004fd8:	e7d2      	b.n	8004f80 <_svfiprintf_r+0xa0>
 8004fda:	9b03      	ldr	r3, [sp, #12]
 8004fdc:	1d19      	adds	r1, r3, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	9103      	str	r1, [sp, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bfbb      	ittet	lt
 8004fe6:	425b      	neglt	r3, r3
 8004fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fec:	9307      	strge	r3, [sp, #28]
 8004fee:	9307      	strlt	r3, [sp, #28]
 8004ff0:	bfb8      	it	lt
 8004ff2:	9204      	strlt	r2, [sp, #16]
 8004ff4:	7823      	ldrb	r3, [r4, #0]
 8004ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ff8:	d10a      	bne.n	8005010 <_svfiprintf_r+0x130>
 8004ffa:	7863      	ldrb	r3, [r4, #1]
 8004ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ffe:	d132      	bne.n	8005066 <_svfiprintf_r+0x186>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	1d1a      	adds	r2, r3, #4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	9203      	str	r2, [sp, #12]
 8005008:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800500c:	3402      	adds	r4, #2
 800500e:	9305      	str	r3, [sp, #20]
 8005010:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80050c8 <_svfiprintf_r+0x1e8>
 8005014:	7821      	ldrb	r1, [r4, #0]
 8005016:	2203      	movs	r2, #3
 8005018:	4650      	mov	r0, sl
 800501a:	f7fb f901 	bl	8000220 <memchr>
 800501e:	b138      	cbz	r0, 8005030 <_svfiprintf_r+0x150>
 8005020:	9b04      	ldr	r3, [sp, #16]
 8005022:	eba0 000a 	sub.w	r0, r0, sl
 8005026:	2240      	movs	r2, #64	@ 0x40
 8005028:	4082      	lsls	r2, r0
 800502a:	4313      	orrs	r3, r2
 800502c:	3401      	adds	r4, #1
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005034:	4825      	ldr	r0, [pc, #148]	@ (80050cc <_svfiprintf_r+0x1ec>)
 8005036:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800503a:	2206      	movs	r2, #6
 800503c:	f7fb f8f0 	bl	8000220 <memchr>
 8005040:	2800      	cmp	r0, #0
 8005042:	d036      	beq.n	80050b2 <_svfiprintf_r+0x1d2>
 8005044:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <_svfiprintf_r+0x1f0>)
 8005046:	bb1b      	cbnz	r3, 8005090 <_svfiprintf_r+0x1b0>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	3307      	adds	r3, #7
 800504c:	f023 0307 	bic.w	r3, r3, #7
 8005050:	3308      	adds	r3, #8
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005056:	4433      	add	r3, r6
 8005058:	9309      	str	r3, [sp, #36]	@ 0x24
 800505a:	e76a      	b.n	8004f32 <_svfiprintf_r+0x52>
 800505c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005060:	460c      	mov	r4, r1
 8005062:	2001      	movs	r0, #1
 8005064:	e7a8      	b.n	8004fb8 <_svfiprintf_r+0xd8>
 8005066:	2300      	movs	r3, #0
 8005068:	3401      	adds	r4, #1
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	4619      	mov	r1, r3
 800506e:	f04f 0c0a 	mov.w	ip, #10
 8005072:	4620      	mov	r0, r4
 8005074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005078:	3a30      	subs	r2, #48	@ 0x30
 800507a:	2a09      	cmp	r2, #9
 800507c:	d903      	bls.n	8005086 <_svfiprintf_r+0x1a6>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0c6      	beq.n	8005010 <_svfiprintf_r+0x130>
 8005082:	9105      	str	r1, [sp, #20]
 8005084:	e7c4      	b.n	8005010 <_svfiprintf_r+0x130>
 8005086:	fb0c 2101 	mla	r1, ip, r1, r2
 800508a:	4604      	mov	r4, r0
 800508c:	2301      	movs	r3, #1
 800508e:	e7f0      	b.n	8005072 <_svfiprintf_r+0x192>
 8005090:	ab03      	add	r3, sp, #12
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	462a      	mov	r2, r5
 8005096:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <_svfiprintf_r+0x1f4>)
 8005098:	a904      	add	r1, sp, #16
 800509a:	4638      	mov	r0, r7
 800509c:	f3af 8000 	nop.w
 80050a0:	1c42      	adds	r2, r0, #1
 80050a2:	4606      	mov	r6, r0
 80050a4:	d1d6      	bne.n	8005054 <_svfiprintf_r+0x174>
 80050a6:	89ab      	ldrh	r3, [r5, #12]
 80050a8:	065b      	lsls	r3, r3, #25
 80050aa:	f53f af2d 	bmi.w	8004f08 <_svfiprintf_r+0x28>
 80050ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050b0:	e72c      	b.n	8004f0c <_svfiprintf_r+0x2c>
 80050b2:	ab03      	add	r3, sp, #12
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	462a      	mov	r2, r5
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <_svfiprintf_r+0x1f4>)
 80050ba:	a904      	add	r1, sp, #16
 80050bc:	4638      	mov	r0, r7
 80050be:	f000 f879 	bl	80051b4 <_printf_i>
 80050c2:	e7ed      	b.n	80050a0 <_svfiprintf_r+0x1c0>
 80050c4:	0800558c 	.word	0x0800558c
 80050c8:	08005592 	.word	0x08005592
 80050cc:	08005596 	.word	0x08005596
 80050d0:	00000000 	.word	0x00000000
 80050d4:	08004e29 	.word	0x08004e29

080050d8 <_printf_common>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	4616      	mov	r6, r2
 80050de:	4698      	mov	r8, r3
 80050e0:	688a      	ldr	r2, [r1, #8]
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	bfb8      	it	lt
 80050ec:	4613      	movlt	r3, r2
 80050ee:	6033      	str	r3, [r6, #0]
 80050f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050f4:	4607      	mov	r7, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	b10a      	cbz	r2, 80050fe <_printf_common+0x26>
 80050fa:	3301      	adds	r3, #1
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	6833      	ldrmi	r3, [r6, #0]
 8005106:	3302      	addmi	r3, #2
 8005108:	6033      	strmi	r3, [r6, #0]
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	f015 0506 	ands.w	r5, r5, #6
 8005110:	d106      	bne.n	8005120 <_printf_common+0x48>
 8005112:	f104 0a19 	add.w	sl, r4, #25
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	6832      	ldr	r2, [r6, #0]
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	42ab      	cmp	r3, r5
 800511e:	dc26      	bgt.n	800516e <_printf_common+0x96>
 8005120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005124:	6822      	ldr	r2, [r4, #0]
 8005126:	3b00      	subs	r3, #0
 8005128:	bf18      	it	ne
 800512a:	2301      	movne	r3, #1
 800512c:	0692      	lsls	r2, r2, #26
 800512e:	d42b      	bmi.n	8005188 <_printf_common+0xb0>
 8005130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005134:	4641      	mov	r1, r8
 8005136:	4638      	mov	r0, r7
 8005138:	47c8      	blx	r9
 800513a:	3001      	adds	r0, #1
 800513c:	d01e      	beq.n	800517c <_printf_common+0xa4>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	f003 0306 	and.w	r3, r3, #6
 8005146:	2b04      	cmp	r3, #4
 8005148:	bf02      	ittt	eq
 800514a:	68e5      	ldreq	r5, [r4, #12]
 800514c:	6833      	ldreq	r3, [r6, #0]
 800514e:	1aed      	subeq	r5, r5, r3
 8005150:	68a3      	ldr	r3, [r4, #8]
 8005152:	bf0c      	ite	eq
 8005154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005158:	2500      	movne	r5, #0
 800515a:	4293      	cmp	r3, r2
 800515c:	bfc4      	itt	gt
 800515e:	1a9b      	subgt	r3, r3, r2
 8005160:	18ed      	addgt	r5, r5, r3
 8005162:	2600      	movs	r6, #0
 8005164:	341a      	adds	r4, #26
 8005166:	42b5      	cmp	r5, r6
 8005168:	d11a      	bne.n	80051a0 <_printf_common+0xc8>
 800516a:	2000      	movs	r0, #0
 800516c:	e008      	b.n	8005180 <_printf_common+0xa8>
 800516e:	2301      	movs	r3, #1
 8005170:	4652      	mov	r2, sl
 8005172:	4641      	mov	r1, r8
 8005174:	4638      	mov	r0, r7
 8005176:	47c8      	blx	r9
 8005178:	3001      	adds	r0, #1
 800517a:	d103      	bne.n	8005184 <_printf_common+0xac>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	3501      	adds	r5, #1
 8005186:	e7c6      	b.n	8005116 <_printf_common+0x3e>
 8005188:	18e1      	adds	r1, r4, r3
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	2030      	movs	r0, #48	@ 0x30
 800518e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005192:	4422      	add	r2, r4
 8005194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800519c:	3302      	adds	r3, #2
 800519e:	e7c7      	b.n	8005130 <_printf_common+0x58>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4622      	mov	r2, r4
 80051a4:	4641      	mov	r1, r8
 80051a6:	4638      	mov	r0, r7
 80051a8:	47c8      	blx	r9
 80051aa:	3001      	adds	r0, #1
 80051ac:	d0e6      	beq.n	800517c <_printf_common+0xa4>
 80051ae:	3601      	adds	r6, #1
 80051b0:	e7d9      	b.n	8005166 <_printf_common+0x8e>
	...

080051b4 <_printf_i>:
 80051b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	7e0f      	ldrb	r7, [r1, #24]
 80051ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051bc:	2f78      	cmp	r7, #120	@ 0x78
 80051be:	4691      	mov	r9, r2
 80051c0:	4680      	mov	r8, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	469a      	mov	sl, r3
 80051c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ca:	d807      	bhi.n	80051dc <_printf_i+0x28>
 80051cc:	2f62      	cmp	r7, #98	@ 0x62
 80051ce:	d80a      	bhi.n	80051e6 <_printf_i+0x32>
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	f000 80d2 	beq.w	800537a <_printf_i+0x1c6>
 80051d6:	2f58      	cmp	r7, #88	@ 0x58
 80051d8:	f000 80b9 	beq.w	800534e <_printf_i+0x19a>
 80051dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051e4:	e03a      	b.n	800525c <_printf_i+0xa8>
 80051e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ea:	2b15      	cmp	r3, #21
 80051ec:	d8f6      	bhi.n	80051dc <_printf_i+0x28>
 80051ee:	a101      	add	r1, pc, #4	@ (adr r1, 80051f4 <_printf_i+0x40>)
 80051f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	08005261 	.word	0x08005261
 80051fc:	080051dd 	.word	0x080051dd
 8005200:	080051dd 	.word	0x080051dd
 8005204:	080051dd 	.word	0x080051dd
 8005208:	080051dd 	.word	0x080051dd
 800520c:	08005261 	.word	0x08005261
 8005210:	080051dd 	.word	0x080051dd
 8005214:	080051dd 	.word	0x080051dd
 8005218:	080051dd 	.word	0x080051dd
 800521c:	080051dd 	.word	0x080051dd
 8005220:	08005361 	.word	0x08005361
 8005224:	0800528b 	.word	0x0800528b
 8005228:	0800531b 	.word	0x0800531b
 800522c:	080051dd 	.word	0x080051dd
 8005230:	080051dd 	.word	0x080051dd
 8005234:	08005383 	.word	0x08005383
 8005238:	080051dd 	.word	0x080051dd
 800523c:	0800528b 	.word	0x0800528b
 8005240:	080051dd 	.word	0x080051dd
 8005244:	080051dd 	.word	0x080051dd
 8005248:	08005323 	.word	0x08005323
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6032      	str	r2, [r6, #0]
 8005254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800525c:	2301      	movs	r3, #1
 800525e:	e09d      	b.n	800539c <_printf_i+0x1e8>
 8005260:	6833      	ldr	r3, [r6, #0]
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	1d19      	adds	r1, r3, #4
 8005266:	6031      	str	r1, [r6, #0]
 8005268:	0606      	lsls	r6, r0, #24
 800526a:	d501      	bpl.n	8005270 <_printf_i+0xbc>
 800526c:	681d      	ldr	r5, [r3, #0]
 800526e:	e003      	b.n	8005278 <_printf_i+0xc4>
 8005270:	0645      	lsls	r5, r0, #25
 8005272:	d5fb      	bpl.n	800526c <_printf_i+0xb8>
 8005274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005278:	2d00      	cmp	r5, #0
 800527a:	da03      	bge.n	8005284 <_printf_i+0xd0>
 800527c:	232d      	movs	r3, #45	@ 0x2d
 800527e:	426d      	negs	r5, r5
 8005280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005284:	4859      	ldr	r0, [pc, #356]	@ (80053ec <_printf_i+0x238>)
 8005286:	230a      	movs	r3, #10
 8005288:	e011      	b.n	80052ae <_printf_i+0xfa>
 800528a:	6821      	ldr	r1, [r4, #0]
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	0608      	lsls	r0, r1, #24
 8005290:	f853 5b04 	ldr.w	r5, [r3], #4
 8005294:	d402      	bmi.n	800529c <_printf_i+0xe8>
 8005296:	0649      	lsls	r1, r1, #25
 8005298:	bf48      	it	mi
 800529a:	b2ad      	uxthmi	r5, r5
 800529c:	2f6f      	cmp	r7, #111	@ 0x6f
 800529e:	4853      	ldr	r0, [pc, #332]	@ (80053ec <_printf_i+0x238>)
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	bf14      	ite	ne
 80052a4:	230a      	movne	r3, #10
 80052a6:	2308      	moveq	r3, #8
 80052a8:	2100      	movs	r1, #0
 80052aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ae:	6866      	ldr	r6, [r4, #4]
 80052b0:	60a6      	str	r6, [r4, #8]
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	bfa2      	ittt	ge
 80052b6:	6821      	ldrge	r1, [r4, #0]
 80052b8:	f021 0104 	bicge.w	r1, r1, #4
 80052bc:	6021      	strge	r1, [r4, #0]
 80052be:	b90d      	cbnz	r5, 80052c4 <_printf_i+0x110>
 80052c0:	2e00      	cmp	r6, #0
 80052c2:	d04b      	beq.n	800535c <_printf_i+0x1a8>
 80052c4:	4616      	mov	r6, r2
 80052c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ca:	fb03 5711 	mls	r7, r3, r1, r5
 80052ce:	5dc7      	ldrb	r7, [r0, r7]
 80052d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052d4:	462f      	mov	r7, r5
 80052d6:	42bb      	cmp	r3, r7
 80052d8:	460d      	mov	r5, r1
 80052da:	d9f4      	bls.n	80052c6 <_printf_i+0x112>
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d10b      	bne.n	80052f8 <_printf_i+0x144>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	07df      	lsls	r7, r3, #31
 80052e4:	d508      	bpl.n	80052f8 <_printf_i+0x144>
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	6861      	ldr	r1, [r4, #4]
 80052ea:	4299      	cmp	r1, r3
 80052ec:	bfde      	ittt	le
 80052ee:	2330      	movle	r3, #48	@ 0x30
 80052f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052f8:	1b92      	subs	r2, r2, r6
 80052fa:	6122      	str	r2, [r4, #16]
 80052fc:	f8cd a000 	str.w	sl, [sp]
 8005300:	464b      	mov	r3, r9
 8005302:	aa03      	add	r2, sp, #12
 8005304:	4621      	mov	r1, r4
 8005306:	4640      	mov	r0, r8
 8005308:	f7ff fee6 	bl	80050d8 <_printf_common>
 800530c:	3001      	adds	r0, #1
 800530e:	d14a      	bne.n	80053a6 <_printf_i+0x1f2>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	b004      	add	sp, #16
 8005316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	f043 0320 	orr.w	r3, r3, #32
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	4833      	ldr	r0, [pc, #204]	@ (80053f0 <_printf_i+0x23c>)
 8005324:	2778      	movs	r7, #120	@ 0x78
 8005326:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	6831      	ldr	r1, [r6, #0]
 800532e:	061f      	lsls	r7, r3, #24
 8005330:	f851 5b04 	ldr.w	r5, [r1], #4
 8005334:	d402      	bmi.n	800533c <_printf_i+0x188>
 8005336:	065f      	lsls	r7, r3, #25
 8005338:	bf48      	it	mi
 800533a:	b2ad      	uxthmi	r5, r5
 800533c:	6031      	str	r1, [r6, #0]
 800533e:	07d9      	lsls	r1, r3, #31
 8005340:	bf44      	itt	mi
 8005342:	f043 0320 	orrmi.w	r3, r3, #32
 8005346:	6023      	strmi	r3, [r4, #0]
 8005348:	b11d      	cbz	r5, 8005352 <_printf_i+0x19e>
 800534a:	2310      	movs	r3, #16
 800534c:	e7ac      	b.n	80052a8 <_printf_i+0xf4>
 800534e:	4827      	ldr	r0, [pc, #156]	@ (80053ec <_printf_i+0x238>)
 8005350:	e7e9      	b.n	8005326 <_printf_i+0x172>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	f023 0320 	bic.w	r3, r3, #32
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	e7f6      	b.n	800534a <_printf_i+0x196>
 800535c:	4616      	mov	r6, r2
 800535e:	e7bd      	b.n	80052dc <_printf_i+0x128>
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	6825      	ldr	r5, [r4, #0]
 8005364:	6961      	ldr	r1, [r4, #20]
 8005366:	1d18      	adds	r0, r3, #4
 8005368:	6030      	str	r0, [r6, #0]
 800536a:	062e      	lsls	r6, r5, #24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	d501      	bpl.n	8005374 <_printf_i+0x1c0>
 8005370:	6019      	str	r1, [r3, #0]
 8005372:	e002      	b.n	800537a <_printf_i+0x1c6>
 8005374:	0668      	lsls	r0, r5, #25
 8005376:	d5fb      	bpl.n	8005370 <_printf_i+0x1bc>
 8005378:	8019      	strh	r1, [r3, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	4616      	mov	r6, r2
 8005380:	e7bc      	b.n	80052fc <_printf_i+0x148>
 8005382:	6833      	ldr	r3, [r6, #0]
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	6032      	str	r2, [r6, #0]
 8005388:	681e      	ldr	r6, [r3, #0]
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	2100      	movs	r1, #0
 800538e:	4630      	mov	r0, r6
 8005390:	f7fa ff46 	bl	8000220 <memchr>
 8005394:	b108      	cbz	r0, 800539a <_printf_i+0x1e6>
 8005396:	1b80      	subs	r0, r0, r6
 8005398:	6060      	str	r0, [r4, #4]
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	2300      	movs	r3, #0
 80053a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053a4:	e7aa      	b.n	80052fc <_printf_i+0x148>
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	4632      	mov	r2, r6
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	47d0      	blx	sl
 80053b0:	3001      	adds	r0, #1
 80053b2:	d0ad      	beq.n	8005310 <_printf_i+0x15c>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	079b      	lsls	r3, r3, #30
 80053b8:	d413      	bmi.n	80053e2 <_printf_i+0x22e>
 80053ba:	68e0      	ldr	r0, [r4, #12]
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	4298      	cmp	r0, r3
 80053c0:	bfb8      	it	lt
 80053c2:	4618      	movlt	r0, r3
 80053c4:	e7a6      	b.n	8005314 <_printf_i+0x160>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4632      	mov	r2, r6
 80053ca:	4649      	mov	r1, r9
 80053cc:	4640      	mov	r0, r8
 80053ce:	47d0      	blx	sl
 80053d0:	3001      	adds	r0, #1
 80053d2:	d09d      	beq.n	8005310 <_printf_i+0x15c>
 80053d4:	3501      	adds	r5, #1
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	9903      	ldr	r1, [sp, #12]
 80053da:	1a5b      	subs	r3, r3, r1
 80053dc:	42ab      	cmp	r3, r5
 80053de:	dcf2      	bgt.n	80053c6 <_printf_i+0x212>
 80053e0:	e7eb      	b.n	80053ba <_printf_i+0x206>
 80053e2:	2500      	movs	r5, #0
 80053e4:	f104 0619 	add.w	r6, r4, #25
 80053e8:	e7f5      	b.n	80053d6 <_printf_i+0x222>
 80053ea:	bf00      	nop
 80053ec:	0800559d 	.word	0x0800559d
 80053f0:	080055ae 	.word	0x080055ae

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d06      	ldr	r5, [pc, #24]	@ (8005410 <_sbrk_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fb fba4 	bl	8000b4c <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000420 	.word	0x20000420

08005414 <_realloc_r>:
 8005414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005418:	4680      	mov	r8, r0
 800541a:	4615      	mov	r5, r2
 800541c:	460c      	mov	r4, r1
 800541e:	b921      	cbnz	r1, 800542a <_realloc_r+0x16>
 8005420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005424:	4611      	mov	r1, r2
 8005426:	f7ff bc73 	b.w	8004d10 <_malloc_r>
 800542a:	b92a      	cbnz	r2, 8005438 <_realloc_r+0x24>
 800542c:	f7ff fc04 	bl	8004c38 <_free_r>
 8005430:	2400      	movs	r4, #0
 8005432:	4620      	mov	r0, r4
 8005434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005438:	f000 f81a 	bl	8005470 <_malloc_usable_size_r>
 800543c:	4285      	cmp	r5, r0
 800543e:	4606      	mov	r6, r0
 8005440:	d802      	bhi.n	8005448 <_realloc_r+0x34>
 8005442:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005446:	d8f4      	bhi.n	8005432 <_realloc_r+0x1e>
 8005448:	4629      	mov	r1, r5
 800544a:	4640      	mov	r0, r8
 800544c:	f7ff fc60 	bl	8004d10 <_malloc_r>
 8005450:	4607      	mov	r7, r0
 8005452:	2800      	cmp	r0, #0
 8005454:	d0ec      	beq.n	8005430 <_realloc_r+0x1c>
 8005456:	42b5      	cmp	r5, r6
 8005458:	462a      	mov	r2, r5
 800545a:	4621      	mov	r1, r4
 800545c:	bf28      	it	cs
 800545e:	4632      	movcs	r2, r6
 8005460:	f7ff fbdc 	bl	8004c1c <memcpy>
 8005464:	4621      	mov	r1, r4
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fbe6 	bl	8004c38 <_free_r>
 800546c:	463c      	mov	r4, r7
 800546e:	e7e0      	b.n	8005432 <_realloc_r+0x1e>

08005470 <_malloc_usable_size_r>:
 8005470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005474:	1f18      	subs	r0, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	bfbc      	itt	lt
 800547a:	580b      	ldrlt	r3, [r1, r0]
 800547c:	18c0      	addlt	r0, r0, r3
 800547e:	4770      	bx	lr

08005480 <_init>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

0800548c <_fini>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr
